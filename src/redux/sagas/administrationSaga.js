import {
  put,
  call,
  takeLatest,
  takeEvery,
  takeLeading,
} from 'redux-saga/effects';
import {
  ADMINISTRATION_ORGANIZATION_LIST_REQUESTED,
  ADMINISTRATION_ORGANIZATION_LIST_SUCCESSED,
  ADMINISTRATION_ORGANIZATION_LIST_FAILED,
  ADMINISTRATION_CLASSIFICATION_LIST_REQUESTED,
  ADMINISTRATION_CLASSIFICATION_LIST_SUCCESSED,
  ADMINISTRATION_CLASSIFICATION_LIST_FAILED,
  ADMINISTRATION_CLASSIFICATION_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_CLASSIFICATION_UPDATE_LIST_SUCCESSED,
  ADMINISTRATION_CLASSIFICATION_UPDATE_LIST_FAILED,
  ADMINISTRATION_CLASSIFICATION_DELETE_REQUESTED,
  ADMINISTRATION_CLASSIFICATION_DELETE_SUCCESSED,
  ADMINISTRATION_CLASSIFICATION_DELETE_FAILED,
  ADMINISTRATION_CLASSIFICATION_CREATE_LIST_REQUESTED,
  ADMINISTRATION_CLASSIFICATION_CREATE_LIST_SUCCESSED,
  ADMINISTRATION_CLASSIFICATION_CREATE_LIST_FAILED,
  ADMINISTRATION_OWNERS_LIST_REQUESTED,
  ADMINISTRATION_OWNERS_LIST_SUCCESSED,
  ADMINISTRATION_OWNERS_LIST_FAILED,
  ADMINISTRATION_OWNERS_DELETE_REQUESTED,
  ADMINISTRATION_OWNERS_DELETE_SUCCESSED,
  ADMINISTRATION_OWNERS_DELETE_FAILED,
  ADMINISTRATION_OWNERS_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_OWNERS_UPDATE_LIST_SUCCESSED,
  ADMINISTRATION_OWNERS_UPDATE_LIST_FAILED,
  ADMINISTRATION_OWNERS_CREATE_LIST_REQUESTED,
  ADMINISTRATION_OWNERS_CREATE_LIST_SUCCESSED,
  ADMINISTRATION_OWNERS_CREATE_LIST_FAILED,
  ADMINISTRATION_ASSETS_GROUP_LIST_SUCCESSED,
  ADMINISTRATION_ASSETS_GROUP_LIST_FAILED,
  ADMINISTRATION_ASSETS_GROUP_LIST_REQUESTED,
  ADMINISTRATION_ORAGANIZATION_CREATE_FAILED,
  ADMINISTRATION_ORAGANIZATION_CREATE_SUCCESSED,
  ADMINISTRATION_ORAGANIZATION_CREATE_REQUESTED,
  ADMINISTRATION_ORAGANIZATION_DELETE_SUCCESSED,
  ADMINISTRATION_ORAGANIZATION_DELETE_REQUESTED,
  ADMINISTRATION_ORAGANIZATION_DELETE_FAILED,
  ADMINISTRATION_ORGANIZATION_UPDATE_FAILED,
  ADMINISTRATION_ORGANIZATION_UPDATE_SUCCESSED,
  ADMINISTRATION_ORGANIZATION_UPDATE_REQUESTED,
  ADMINISTRATION_GET_SELECTED_ORGANIZATION_FAILED,
  ADMINISTRATION_GET_SELECTED_ORGANIZATION_SUCCESSED,
  ADMINISTRATION_GET_SELECTED_ORGANIZATION_REQUESTED,
  ADMINISTRATION_SET_SELECTED_ORGANIZATION_SUCCESSED,
  ADMINISTRATION_SET_SELECTED_ORGANIZATION_FAILED,
  ADMINISTRATION_SET_SELECTED_ORGANIZATION_REQUESTED,
  ADMINISTRATION_ORAGANIZATION_USERS_PROCESSING,
  ADMINISTRATION_ORAGANIZATION_USERS_SUCCESSED,
  ADMINISTRATION_ORAGANIZATION_USERS_FAILED,
  ADMINISTRATION_ORAGANIZATION_USERS_REQUESTED,
  ADMINISTRATION_ASSETS_GROUP_SOURCE_LIST_REQUESTED,
  ADMINISTRATION_ASSETS_GROUP_SUB_GROUP_REQUESTED,
  ADMINISTRATION_ASSETS_GROUP_SOURCE_LIST_SUCCESSED,
  ADMINISTRATION_ASSETS_GROUP_SOURCE_LIST_FAILED,
  ADMINISTRATION_ASSETS_GROUP_SUB_GROUP_SUCCESSED,
  ADMINISTRATION_ASSETS_GROUP_SUB_GROUP_FAILED,
  ADMINISTRATION_CREATE_ASSETS_GROUP_REQUESTED,
  ADMINISTRATION_CREATE_ASSETS_GROUP_SUCCESSED,
  ADMINISTRATION_CREATE_ASSETS_GROUP_FAILED,
  ADMINISTRATION_DELETE_ASSETS_GROUPS_REQUESTED,
  ADMINISTRATION_DELETE_ASSETS_GROUPS_SUCCESSED,
  ADMINISTRATION_DELETE_ASSETS_GROUPS_FAILED,
  ADMINISTRATION_EDIT_ASSETS_GROUPS_REQUESTED,
  ADMINISTRATION_EDIT_ASSETS_GROUPS_SUCCESSED,
  ADMINISTRATION_EDIT_ASSETS_GROUPS_FAILED,
  ADMINISTRATION_WORKFLOW_LIST_REQUESTED,
  ADMINISTRATION_WORKFLOW_LIST_SUCCESSED,
  ADMINISTRATION_WORKFLOW_LIST_FAILED,
  ADMINISTRATION_ORAGANIZATION_MEMBERS_SUCCESSED,
  ADMINISTRATION_ORAGANIZATION_MEMBERS_FAILED,
  ADMINISTRATION_ORAGANIZATION_MEMBERS_REQUESTED,
  ORAGANIZATION_SUCCESSED,
  ORAGANIZATION_FAILED,
  ORAGANIZATION_REQUESTED,
  ORAGANIZATION_USER_CREATE_SUCCESSED,
  ORAGANIZATION_USER_CREATE_FAILED,
  ORAGANIZATION_USER_DELETE_SUCCESSED,
  ORAGANIZATION_USER_DELETE_FAILED,
  ORAGANIZATION_USER_UPDATE_SUCCESSED,
  ORAGANIZATION_USER_UPDATE_FAILED,
  ORAGANIZATION_USER_CREATE_REQUESTED,
  ORAGANIZATION_USER_DELETE_REQUESTED,
  ORAGANIZATION_USER_UPDATE_REQUESTED,
  SHOW_LOADER,
  HIDE_LOADER,
  ADMINISTRATION_CATEGORY_LIST_REQUESTED,
  ADMINISTRATION_CATEGORY_LIST_SUCCESSED,
  ADMINISTRATION_CATEGORY_LIST_FAILED,
  ADMINISTRATION_CATEGORY_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_CATEGORY_UPDATE_LIST_SUCCESSED,
  ADMINISTRATION_CATEGORY_UPDATE_LIST_FAILED,
  ADMINISTRATION_CATEGORY_DELETE_LIST_REQUESTED,
  ADMINISTRATION_CATEGORY_DELETE_LIST_SUCCESSED,
  ADMINISTRATION_CATEGORY_DELETE_LIST_FAILED,
  ADMINISTRATION_CATEGORY_CREATE_LIST_REQUESTED,
  ADMINISTRATION_CATEGORY_CREATE_LIST_SUCCESSED,
  ADMINISTRATION_CATEGORY_CREATE_LIST_FAILED,
  ADMINISTRATION_WORKFLOW_CHANGE_STATUS_REQUESTED,
  ADMINISTRATION_WORKFLOW_CHANGE_STATUS_SUCCESSED,
  ADMINISTRATION_WORKFLOW_CHANGE_STATUS_FAILED,
  ADMINISTRATION_ASSET_SUB_GROUP_LIST_REQUESTED,
  ADMINISTRATION_ASSET_SUB_GROUP_LIST_SUCCESSED,
  ADMINISTRATION_ASSET_SUB_GROUP_LIST_FAILED,
  ADMINISTRATION_ASSET_GROUP_DROP_DOWN_LIST_REQUESTED,
  ADMINISTRATION_ASSET_GROUP_DROP_DOWN_LIST_SUCCESSED,
  ADMINISTRATION_ASSET_GROUP_DROP_DOWN_LIST_FAILED,
  ADMINISTRATION_CREATE_ASSET_SUB_GROUP_REQUESTED,
  ADMINISTRATION_CREATE_ASSET_SUB_GROUP_SUCCESSED,
  ADMINISTRATION_CREATE_ASSET_SUB_GROUP_FAILED,
  ADMINISTRATION_EDIT_ASSET_SUB_GROUP_REQUESTED,
  ADMINISTRATION_DELETE_ASSET_SUB_GROUP_REQUESTED,
  ADMINISTRATION_EDIT_ASSET_SUB_GROUP_SUCCESSED,
  ADMINISTRATION_WORKFLOW_DUPLICATE_REQUESTED,
  ADMINISTRATION_WORKFLOW_DUPLICATE_SUCCESSED,
  ADMINISTRATION_WORKFLOW_DUPLICATE_FAILED,
  ADMINISTRATION_WORKFLOW_DELETE_REQUESTED,
  ADMINISTRATION_WORKFLOW_DELETE_SUCCESSED,
  ADMINISTRATION_WORKFLOW_DELETE_FAILED,
  ADMINISTRATION_WORKFLOW_CATEGORY_REQUESTED,
  ADMINISTRATION_WORKFLOW_CATEGORY_SUCCESSED,
  ADMINISTRATION_WORKFLOW_CATEGORY_FAILED,
  ADMINISTRATION_WORKFLOW_SUB_CATEGORY_REQUESTED,
  ADMINISTRATION_WORKFLOW_SUB_CATEGORY_SUCCESSED,
  ADMINISTRATION_WORKFLOW_SUB_CATEGORY_FAILED,
  ADMINISTRATION_WORKFLOW_TASK_CATEGORY_REQUESTED,
  ADMINISTRATION_WORKFLOW_TASK_CATEGORY_SUCCESSED,
  ADMINISTRATION_WORKFLOW_TASK_CATEGORY_FAILED,
  ADMINISTRATION_WORKFLOW_CREATE_REQUESTED,
  ADMINISTRATION_WORKFLOW_CREATE_SUCCESSED,
  ADMINISTRATION_WORKFLOW_CREATE_FAILED,
  ADMINISTRATION_WORKFLOW_UPDATE_REQUESTED,
  ADMINISTRATION_WORKFLOW_UPDATE_SUCCESSED,
  ADMINISTRATION_WORKFLOW_UPDATE_FAILED,
  ADMINISTRATION_ASSET_VALUE_LIST_REQUESTED,
  ADMINISTRATION_ASSET_VALUE_LIST_SUCCESSED,
  ADMINISTRATION_ASSET_VALUE_LIST_FAILED,
  ADMINISTRATION_CREATE_ASSET_VALUE_LIST_REQUESTED,
  ADMINISTRATION_CREATE_ASSET_VALUE_LIST_SUCCESSED,
  ADMINISTRATION_CREATE_ASSET_VALUE_LIST_FAILED,
  ADMINISTRATION_EDIT_ASSET_VALUE_REQUESTED,
  ADMINISTRATION_EDIT_ASSET_VALUE_SUCCESSED,
  ADMINISTRATION_EDIT_ASSET_VALUE_FAILED,
  ADMINISTRATION_DELETE_ASSET_VALUE_REQUESTED,
  ADMINISTRATION_DELETE_ASSET_VALUE_SUCCESSED,
  ADMINISTRATION_DELETE_ASSET_VALUE_FAILED,
  ADMINISTRATION_CHANGE_TITLE_ASSET_VALUE_REQUESTED,
  ADMINISTRATION_CHANGE_TITLE_ASSET_VALUE_SUCCESSED,
  ADMINISTRATION_CHANGE_TITLE_ASSET_VALUE_FAILED,
  ADMINISTRATION_GET_OPERATING_SYSTEM_LIST_REQUESTED,
  ADMINISTRATION_GET_OPERATING_SYSTEM_LIST_SUCCESSED,
  ADMINISTRATION_GET_OPERATING_SYSTEM_LIST_FAILED,
  ADMINISTRATION_CREATE_OPERATING_SYSTEM_REQUESTED,
  ADMINISTRATION_CREATE_OPERATING_SYSTEM_SUCCESSED,
  ADMINISTRATION_CREATE_OPERATING_SYSTEM_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VALUE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VALUE_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VALUE_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VULNERABILITY_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VULNERABILITY_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VULNERABILITY_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_CREATE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_DELETE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_CONTROL_REGISTER_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_CONTROL_REGISTER_CREATE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_CONTROL_REGISTER_UPDATE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_CONTROL_REGISTER_DELETE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_DELETE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_CREATE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_UPDATE_REQUESTED,
  ADMINISTRATION_ORAGANIZATION_TIMEZONE_REQUESTED,
  ADMINISTRATION_ORAGANIZATION_TIMEZONE_SUCCESSED,
  ADMINISTRATION_ORAGANIZATION_TIMEZONE_FAILED,
  ORGANIZATION_INFOMATION_POST_REQUESTED,
  ORGANIZATION_INFOMATION_POST_SUCCESSED,
  ORGANIZATION_INFOMATION_POST_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_CHANGE_TITLE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_CHANGE_TITLE_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_CHANGE_TITLE_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_CREATE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_DELETE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_UPDATE_REQUESTED,
  ADMINISTRATION_AUTOMATION_VENDORS_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_LIST_SUCCESSED,
  ADMINISTRATION_AUTOMATION_LIST_FAILED,
  ADMINISTRATION_AUTOMATION_VENDORS_CREATE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_CREATE_LIST_SUCCESSED,
  ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
  ADMINISTRATION_AUTOMATION_VENDORS_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_UPDATE_LIST_SUCCESSED,
  ADMINISTRATION_AUTOMATION_UPDATE_LIST_FAILED,
  ADMINISTRATION_AUTOMATION_VENDORS_DELETE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_DELETE_LIST_SUCCESSED,
  ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
  ADMINISTRATION_AUTOMATION_PUBLISHERS_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_PUBLISHERS_CREATE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_PUBLISHERS_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_PUBLISHERS_DELETE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_ACTIONIO_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_ACTIONIO_CREATE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_ACTIONIO_VALIDATION_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_ACTIONIO_VALIDATION_LIST_SUCCESSED,
  ADMINISTRATION_AUTOMATION_ACTIONIO_VALIDATION_LIST_FAILED,
  ADMINISTRATION_AUTOMATION_ACTIONIO_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_ACTIONIO_DELETE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_THREAT_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_THREAT_DELETE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_THREAT_CREATE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_THREAT_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_CASE_FAMILY_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_CASE_FAMILY_DELETE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_CASE_FAMILY_CREATE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_CASE_FAMILY_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_EDIT_OPERATING_SYSTEM_REQUESTED,
  ADMINISTRATION_EDIT_OPERATING_SYSTEM_SUCCESSED,
  ADMINISTRATION_EDIT_OPERATING_SYSTEM_FAILED,
  ADMINISTRATION_DELETE_OPERATING_SYSTEM_REQUESTED,
  ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_REQUESTED,
  ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_SUCCESSED,
  ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_FAILED,
  ADMINISTRATION_CREATE_ASSET_DEPARTMENT_LIST_REQUESTED,
  ADMINISTRATION_EDIT_DEPARTMENT_REQUESTED,
  ADMINISTRATION_EDIT_DEPARTMENT_SUCCESSED,
  ADMINISTRATION_EDIT_DEPARTMENT_FAILED,
  ADMINISTRATION_DELETE_DEPARTMENT_REQUESTED,
  ADMINISTRATION_DELETE_DEPARTMENT_SUCCESSED,
  ADMINISTRATION_DELETE_DEPARTMENT_FAILED,
  ADMINISTRATION_CASES_CATEGORY_LIST_SUCCESSED,
  ADMINISTRATION_CASES_CATEGORY_LIST_FAILED,
  ADMINISTRATION_CASES_CATEGORY_LIST_REQUESTED,
  ADMINISTRATION_CASES_CATEGORY_DISPOSITION_SUCCESSED,
  ADMINISTRATION_CASES_CATEGORY_DISPOSITION_FAILED,
  ADMINISTRATION_CASES_CATEGORY_DISPOSITION_REQUESTED,
  ADMINISTRATION_CASES_CATEGORY_UPDATE_SUCCESSED,
  ADMINISTRATION_CASES_CATEGORY_UPDATE_FAILED,
  ADMINISTRATION_CASES_CATEGORY_DELETE_FAILED,
  ADMINISTRATION_CASES_CATEGORY_DELETE_SUCCESSED,
  ADMINISTRATION_CASES_CATEGORY_UPDATE_REQUESTED,
  ADMINISTRATION_CASES_CATEGORY_DELETE_REQUESTED,
  ADMINISTRATION_CASES_CATEGORY_CREATE_SUCCESSED,
  ADMINISTRATION_CASES_CATEGORY_CREATE_FAILED,
  ADMINISTRATION_CASES_CATEGORY_CREATE_REQUESTED,
  ADMINISTRATION_CASES_SUBCATEGORY_LIST_SUCCESSED,
  ADMINISTRATION_CASES_SUBCATEGORY_LIST_FAILED,
  ADMINISTRATION_CASES_SUBCATEGORY_LIST_REQUESTED,
  ADMINISTRATION_CASES_SUB_CATEGORY_CREATE_FAILED,
  ADMINISTRATION_CASES_SUB_CATEGORY_CREATE_SUCCESSED,
  ADMINISTRATION_CASES_SUB_CATEGORY_CREATE_REQUESTED,
  ADMINISTRATION_CASES_SUB_CATEGORY_UPDATE_FAILED,
  ADMINISTRATION_CASES_SUB_CATEGORY_UPDATE_REQUESTED,
  ADMINISTRATION_CASES_SUB_CATEGORY_DELETE_REQUESTED,
  ADMINISTRATION_CASES_SUB_CATEGORY_UPDATE_SUCCESSED,
  ADMINISTRATION_CASES_SUB_CATEGORY_DELETE_SUCCESSED,
  ADMINISTRATION_CASES_SUB_CATEGORY_DELETE_FAILED,
  ADMINISTRATION_PRIMARY_CATEGORY_LIST_FAILED,
  ADMINISTRATION_PRIMARY_CATEGORY_LIST_REQUESTED,
  ADMINISTRATION_PRIMARY_CATEGORY_LIST_SUCCESSED,
  ADMINISTRATION_CASES_DISPOSITIONS_LIST_REQUESTED,
  ADMINISTRATION_CASES_DISPOSITIONS_LIST_FAILED,
  ADMINISTRATION_CASES_DISPOSITION_DELETE_SUCCESSED,
  ADMINISTRATION_CASES_DISPOSITION_DELETE_FAILED,
  ADMINISTRATION_CASES_DISPOSITION_UPDATE_SUCCESSED,
  ADMINISTRATION_CASES_DISPOSITION_UPDATE_FAILED,
  ADMINISTRATION_CASES_DISPOSITION_CREATE_SUCCESSED,
  ADMINISTRATION_CASES_DISPOSITION_CREATE_FAILED,
  ADMINISTRATION_CASES_DISPOSITION_UPDATE_REQUESTED,
  ADMINISTRATION_CASES_DISPOSITION_DELETE_REQUESTED,
  ADMINISTRATION_CASES_DISPOSITION_CREATE_REQUESTED,
  ADMINISTRATION_CASES_DISPOSITIONS_LIST_SUCCESSED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_CREATE_REQUESTED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_CREATE_FAILED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_LIST_REQUESTED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_CREATE_SUCCESSED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_LIST_FAILED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_UPDATE_SUCCESSED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_UPDATE_REQUESTED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_DELETE_SUCCESSED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_DELETE_FAILED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_DELETE_REQUESTED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_LIST_SUCCESSED,
  ADMINISTRATION_ASSET_GET_BUSINESS_GROUP_LIST_REQUESTED,
  ADMINISTRATION_ASSET_GET_BUSINESS_GROUP_LIST_SUCCESSED,
  ADMINISTRATION_ASSET_GET_BUSINESS_GROUP_LIST_FAILED,
  ADMINISTRATION_ASSET_CREATE_BUSINESS_GROUP_LIST_REQUESTED,
  ADMINISTRATION_ASSET_CREATE_BUSINESS_GROUP_LIST_SUCCESSED,
  ADMINISTRATION_ASSET_CREATE_BUSINESS_GROUP_LIST_FAILED,
  ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_LIST_REQUESTED,
  ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_LIST_SUCCESSED,
  ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_LIST_FAILED,
  ADMINISTRATION_ASSET_DELETE_BUSINESS_GROUP_LIST_REQUESTED,
  ADMINISTRATION_ASSET_DELETE_BUSINESS_GROUP_LIST_SUCCESSED,
  ADMINISTRATION_ASSET_DELETE_BUSINESS_GROUP_LIST_FAILED,
  ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_TITLE_REQUESTED,
  ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_TITLE_SUCCESSED,
  ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_TITLE_FAILED,
  ADMINISTRATION_ASSET_TYPE_LIST_REQUESTED,
  ADMINISTRATION_ASSET_TYPE_LIST_SUCCESSED,
  ADMINISTRATION_ASSET_TYPE_LIST_FAILED,
  ADMINISTRATION_EDIT_ASSET_TYPE_TITLE_REQUESTED,
  ADMINISTRATION_EDIT_ASSET_TYPE_TITLE_SUCCESSED,
  ADMINISTRATION_EDIT_ASSET_TYPE_TITLE_FAILED,
  ADMINISTRATION_DELETE_ASSET_TYPE_REQUESTED,
  ADMINISTRATION_DELETE_ASSET_TYPE_SUCCESSED,
  ADMINISTRATION_DELETE_ASSET_TYPE_FAILED,
  ADMINISTRATION_SUB_CATEGORY_LIST_REQUESTED,
  ADMINISTRATION_VULNERABILITY_TECHNICAL_REQUESTED,
  ADMINISTRATION_VULNERABILITY_SUCCESSED,
  ADMINISTRATION_VULNERABILITY_FAILED,
  ADMINISTRATION_GET_ASSET_TYPE_ASSET_DROP_DOWN_LIST_REQUESTED,
  ADMINISTRATION_GET_ASSET_TYPE_SUBGROUP_DROP_DOWN_LIST_REQUESTED,
  ADMINISTRATION_GET_ASSET_TYPE_OWNER_DROP_DOWN_LIST_REQUESTED,
  ADMINISTRATION_GET_ASSET_TYPE_DEPARTMENT_DROP_DOWN_LIST_REQUESTED,
  ADMINISTRATION_GET_ASSET_TYPE_ASSET_DROP_DOWN_LIST_SUCCESSED,
  ADMINISTRATION_GET_ASSET_TYPE_ASSET_DROP_DOWN_LIST_FAILED,
  ADMINISTRATION_GET_ASSET_TYPE_SUBGROUP_DROP_DOWN_LIST_SUCCESSED,
  ADMINISTRATION_GET_ASSET_TYPE_SUBGROUP_DROP_DOWN_LIST_FAILED,
  ADMINISTRATION_GET_ASSET_TYPE_OWNER_DROP_DOWN_LIST_SUCCESSED,
  ADMINISTRATION_GET_ASSET_TYPE_OWNER_DROP_DOWN_LIST_FAILED,
  ADMINISTRATION_GET_ASSET_TYPE_DEPARTMENT_DROP_DOWN_LIST_SUCCESSED,
  ADMINISTRATION_GET_ASSET_TYPE_DEPARTMENT_DROP_DOWN_LIST_FAILED,
  ADMINISTRATION_CASES_DITECTION_METHOD_LIST_FAILED,
  ADMINISTRATION_CASES_DITECTION_METHOD_LIST_SUCCESSED,
  ADMINISTRATION_CASES_DITECTION_METHOD_LIST_REQUESTED,
  ADMINISTRATION_CASES_DITECTION_METHOD_DELETE_SUCCESSED,
  ADMINISTRATION_CASES_DITECTION_METHOD_DELETE_FAILED,
  ADMINISTRATION_CASES_DITECTION_METHOD_DELETE_REQUESTED,
  ADMINISTRATION_CASES_DITECTION_METHOD_UPDATE_REQUESTED,
  ADMINISTRATION_CASES_DITECTION_METHOD_UPDATE_FAILED,
  ADMINISTRATION_CASES_DITECTION_METHOD_CREATE_SUCCESSED,
  ADMINISTRATION_CASES_DITECTION_METHOD_CREATE_FAILED,
  ADMINISTRATION_CASES_DITECTION_METHOD_CREATE_REQUESTED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_DROPDOWN_LIST_REQUESTED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_DROPDOWN_LIST_SUCCESSED,
  ADMINISTRATION_CASES_SUB_DISPOSITION_DROPDOWN_LIST_FAILED,
  ADMINISTRATION_CASES_LOCATIONS_LIST_REQUESTED,
  ADMINISTRATION_CASES_LOCATIONS_LIST_SUCCESSED,
  ADMINISTRATION_CASES_LOCATIONS_LIST_FAILED,
  ADMINISTRATION_CASES_LOCATION_DELETE_FAILED,
  ADMINISTRATION_CASES_LOCATION_DELETE_SUCCESSED,
  ADMINISTRATION_CASES_LOCATION_DELETE_REQUESTED,
  ADMINISTRATION_CASES_LOCATION_UPDATE_REQUESTED,
  ADMINISTRATION_CASES_LOCATION_UPDATE_SUCCESSED,
  ADMINISTRATION_CASES_LOCATION_UPDATE_FAILED,
  ADMINISTRATION_CASES_LOCATION_CREATE_FAILED,
  ADMINISTRATION_CASES_LOCATION_CREATE_REQUESTED,
  ADMINISTRATION_CASES_LOCATION_CREATE_SUCCESSED,
  ADMINISTRATION_VULNERABILITY_TECHNICAL_DELETE_REQUESTED,
  ADMINISTRATION_VULNERABILITY_SEVERITY_REQUESTED,
  ADMINISTRATION_VULNERABILITY_SEVERITY_SUCCESSED,
  ADMINISTRATION_VULNERABILITY_SEVERITY_FAILED,
  ADMINISTRATION_VULNERABILITY_TECHNICAL_CREATE_REQUESTED,
  ADMINISTRATION_VULNERABILITY_CREATE_SUCCESSED,
  ADMINISTRATION_VULNERABILITY_CREATE_FAILED,
  ADMINISTRATION_VULNERABILITY_TECHNICAL_UPDATE_REQUESTED,
  ADMINISTRATION_VULNERABILITY_UPDATE_SUCCESSED,
  ADMINISTRATION_VULNERABILITY_UPDATE_FAILED,
  ADMINISTRATION_VULNERABILITY_NON_TECHNICAL_REQUESTED,
  ADMINISTRATION_VULNERABILITY_NON_TECHNICAL_SEVERITY_REQUESTED,
  ADMINISTRATION_VULNERABILITY_THREAT_REQUESTED,
  ADMINISTRATION_VULNERABILITY_THREAT_SUCCESSED,
  ADMINISTRATION_VULNERABILITY_THREAT_FAILED,
  ADMINISTRATION_VULNERABILITY_NON_TECHNICAL_DELETE_REQUESTED,
  ADMINISTRATION_VULNERABILITY_TECHNICAL_NON_UPDATE_REQUESTED,
  ADMINISTRATION_VULNERABILITY_NON_TECHNICAL_CREATE_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_CATEGORY_LIST_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_LIST_SUCCESSED,
  ADMINISTRATION_THREAT_INTEL_LIST_FAILED,
  ADMINISTRATION_THREAT_INTEL_CATEGORY_CREATE_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_CREATE_SUCCESSED,
  ADMINISTRATION_THREAT_INTEL_CREATE_FAILED,
  ADMINISTRATION_THREAT_INTEL_CATEGORY_DELETE_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_DELETE_SUCCESSED,
  ADMINISTRATION_THREAT_INTEL_DELETE_FAILED,
  ADMINISTRATION_THREAT_INTEL_CATEGORY_UPDATE_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_UPDATE_SUCCESSED,
  ADMINISTRATION_THREAT_INTEL_UPDATE_FAILED,
  ADMINISTRATION_THREAT_INTEL_SUB_CATEGORY_LIST_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_SUB_CATEGORY_CREATE_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_SUB_CATEGORY_DELETE_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_SUB_CATEGORY_UPDATE_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_SEVERITY_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_PRIMARY_CATEGORY_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_SEVERITY_SUCCESSED,
  ADMINISTRATION_THREAT_INTEL_SEVERITY_FAILED,
  ADMINISTRATION_CREATE_ASSET_TYPE_REQUESTED,
  ADMINISTRATION_CREATE_ASSET_TYPE_SUCCESSED,
  ADMINISTRATION_CREATE_ASSET_TYPE_FAILED,
  ADMINISTRATION_EDIT_ASSET_TYPE_REQUESTED,
  ADMINISTRATION_EDIT_ASSET_TYPE_SUCCESSED,
  ADMINISTRATION_EDIT_ASSET_TYPE_FAILED,
  ADMINISTRATION_CASES_NCISS_LIST_FAILED,
  ADMINISTRATION_CASES_NCISS_LIST_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_CREATE_REQUESTED,
  ADMINISTRATION_CASES_NCISS_UPDATE_REQUESTED,
  ADMINISTRATION_CASES_NCISS_LIST_REQUESTED,
  ADMINISTRATION_CASES_NCISS_CATEGORY_LIST_FAILED,
  ADMINISTRATION_CASES_NCISS_CATEGORY_LIST_REQUESTED,
  ADMINISTRATION_CASES_NCISS_CATEGORY_LIST_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_CREATE_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_CREATE_FAILED,
  ADMINISTRATION_CASES_NCISS_UPDATE_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_UPDATE_FAILED,
  ADMINISTRATION_CASES_NCISS_CATEGORIES_LIST_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_CATEGORIES_LIST_FAILED,
  ADMINISTRATION_CASES_NCISS_CATEGORIES_LIST_REQUESTED,
  ADMINISTRATION_CASES_NCISS_CATEGORIES_UPDATE_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_CATEGORIES_UPDATE_FAILED,
  ADMINISTRATION_CASES_NCISS_CATEGORIES_CREATE_FAILED,
  ADMINISTRATION_CASES_NCISS_CATEGORIES_CREATE_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_CATEGORIES_UPDATE_REQUESTED,
  ADMINISTRATION_CASES_NCISS_CATEGORIES_CREATE_REQUESTED,
  ADMINISTRATION_CASES_NCISS_CATEGORIES_DELETE_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_CATEGORIES_DELETE_FAILED,
  ADMINISTRATION_CASES_NCISS_CATEGORIES_DELETE_REQUESTED,
  ADMINISTRATION_CASES_NCISS_PERIORITIE_UPDATE_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_PERIORITIES_LIST_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_PERIORITIES_LIST_FAILED,
  ADMINISTRATION_CASES_NCISS_PERIORITIES_LIST_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_PRIMARY_CATEGORY_SUCCESSED,
  ADMINISTRATION_THREAT_INTEL_PRIMARY_CATEGORY_FAILED,
  ADMINISTRATION_GET_DISPOSITION_LIST_REQUESTED,
  ADMINISTRATION_GET_DISPOSITION_LIST_SUCCESSED,
  ADMINISTRATION_GET_DISPOSITION_LIST_FAILED,
  ADMINISTRATION_CASES_NCISS_PERIORITIE_DELETE_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_PERIORITIE_DELETE_FAILED,
  ADMINISTRATION_CASES_NCISS_PERIORITIE_UPDATE_FAILED,
  ADMINISTRATION_CASES_NCISS_PERIORITIE_CREATE_FAILED,
  ADMINISTRATION_CASES_NCISS_PERIORITIE_CREATE_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_PERIORITIE_DELETE_REQUESTED,
  ADMINISTRATION_CASES_NCISS_PERIORITIE_UPDATE_REQUESTED,
  ADMINISTRATION_CASES_NCISS_PERIORITIE_CREATE_REQUESTED,
  ADMINISTRATION_CASES_DITECTION_METHOD_UPDATE_SUCCESSED,
  ADMINISTRATION_THREAT_INTEL_DISPOSITION_UPDATE_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_DISPOSITION_CREATE_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_DISPOSITION_DELETE_REQUESTED,
  ADMINISTRATION_GET_ASSET_TYPE_ASSET_VALUE_DROP_DOWN_LIST_REQUESTED,
  ADMINISTRATION_GET_ASSET_TYPE_ASSET_VALUE_DROP_DOWN_LIST_SUCCESSED,
  ADMINISTRATION_GET_ASSET_TYPE_ASSET_VALUE_DROP_DOWN_LIST_FAILED,
  ADMINISTRATION_AUTOMATION_INGESTION_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_INGESTION_DELETE_LIST_REQUESTED,
  INGESTION_TYPE_REQUESTED,
  INGESTION_WIDGET_REQUESTED,
  INGESTION_FREQUENCY_REQUESTED,
  INGESTION_APPLICATION_REQUESTED,
  INGESTION_USERS_REQUESTED,
  INGESTION_ACTION_REQUESTED,
  INGESTION_TYPE_SUCCESSED,
  INGESTION_TYPE_FAILED,
  INGESTION_ACTION_SUCCESSED,
  INGESTION_ACTION_FAILED,
  INGESTION_USERS_SUCCESSED,
  INGESTION_USERS_FAILED,
  INGESTION_APPLICATION_SUCCESSED,
  INGESTION_APPLICATION_FAILED,
  INGESTION_FREQUENCY_SUCCESSED,
  INGESTION_FREQUENCY_FAILED,
  INGESTION_WIDGET_SUCCESSED,
  INGESTION_WIDGET_FAILED,
  ENABLE_ADVISORY_REQUESTED,
  ENABLE_ADVISORY_SUCCESSED,
  ENABLE_ADVISORY_FAILED,
  ADMINISTRATION_AUTOMATION_INGESTION_CREATE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_INGESTION_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_ACTIONS_LIST_REQUESTED,
  ACTIONS_TYPE_REQUESTED,
  ACTIONS_TYPE_SUCCESSED,
  ACTIONS_TYPE_FAILED,
  ACTIONS_SCRIPT_TYPE_REQUESTED,
  ACTIONS_SCRIPT_TYPE_SUCCESSED,
  ACTIONS_SCRIPT_TYPE_FAILED,
  ACTIONS_IO_TYPE_REQUESTED,
  ACTIONS_IO_TYPE_SUCCESSED,
  ACTIONS_IO_TYPE_FAILED,
  ACTIONS_APPLICATION_REQUESTED,
  ACTIONS_APPLICATION_SUCCESSED,
  ACTIONS_APPLICATION_FAILED,
  ADMINISTRATION_AUTOMATION_ACTIONS_CREATE_LIST_REQUESTED,
  GET_INGESTION_MULTI_DATA_REQUESTED,
  GET_INGESTION_MULTI_DATA_SUCCESSED,
  GET_INGESTION_MULTI_DATA_FAILED,
  GET_INGESTION_MAPPING_REQUESTED,
  GET_INGESTION_MAPPING_SUCCESSED,
  GET_INGESTION_MAPPING_FAILED,
  ADD_INGESTION_MULTI_DATA_REQUESTED,
  ADD_INGESTION_MULTI_DATA_SUCCESSED,
  ADD_INGESTION_MULTI_DATA_FAILED,
  ADMINISTRATION_LOGS_APPS_LIST_REQUESTED,
  ADMINISTRATION_LOGS_LIST_SUCCESSED,
  ADMINISTRATION_LOGS_LIST_FAILED,
  ADMINISTRATION_LOGS_AUTHENTICATION_LIST_REQUESTED,
  ADMINISTRATION_LOGS_ACTIVITY_LIST_REQUESTED,
  ADMINISTRATION_LOGS_INGESTION_LIST_REQUESTED,
  ADMINISTRATION_PRODUCT_FAILED_REGISTER_LIST_REQUESTED,
  ADMINISTRATION_PRODUCTS_LIST_SUCCESSED,
  ADMINISTRATION_PRODUCTS_LIST_FAILED,
  ADMINISTRATION_PRODUCT_FAILED_REGISTER_DELETE_REQUESTED,
  ADMINISTRATION_ACCESS_USERS_LIST_REQUESTED,
  ADMINISTRATION_ACCESS_LIST_SUCCESSED,
  ADMINISTRATION_ACCESS_LIST_FAILED,
  ADMINISTRATION_ACCESS_USERS_DELETE_REQUESTED,
  ADMINISTRATION_ACCESS_AUTHENTICATION_TYPE_REQUESTED,
  ADMINISTRATION_ACCESS_AUTHENTICATION_TYPE_SUCCESSED,
  ADMINISTRATION_ACCESS_AUTHENTICATION_TYPE_FAILED,
  ADMINISTRATION_ACCESS_PERMISSION_REQUESTED,
  ADMINISTRATION_ACCESS_PERMISSION_SUCCESSED,
  ADMINISTRATION_ACCESS_PERMISSION_FAILED,
  ADMINISTRATION_ACCESS_LANDING_PAGE_REQUESTED,
  ADMINISTRATION_ACCESS_LANDING_PAGE_SUCCESSED,
  ADMINISTRATION_ACCESS_LANDING_PAGE_FAILED,
  ADMINISTRATION_ACCESS_GROUP_REQUESTED,
  ADMINISTRATION_ACCESS_GROUP_SUCCESSED,
  ADMINISTRATION_ACCESS_GROUP_FAILED,
  ADMINISTRATION_ACCESS_SESSION__PASSWORD_SUCCESSED,
  ADMINISTRATION_ACCESS_SESSION__PASSWORD_FAILED,
  ADMINISTRATION_ACCESS_SESSION__PASSWORD_REQUESTED,
  ADMINISTRATION_ACCESS_SESSION__PASSWORD_UPDATE_REQUESTED,
  ADMINISTRATION_ACCESS_SESSION__PASSWORD_UPDATE_SUCCESSED,
  ADMINISTRATION_ACCESS_SESSION__PASSWORD_UPDATE_FAILED,
  ADMINISTRATION_ACCESS_USERS_UPDATE_FAILED,
  ADMINISTRATION_ACCESS_USERS_UPDATE_REQUESTED,
  ADMINISTRATION_ACCESS_USERS_UPDATE_SUCCESS,
  ADMINISTRATION_ACCESS_USER_INVITE_REQUESTED,
  ADMINISTRATION_ACCESS_USER_INVITE_SUCCESSED,
  ADMINISTRATION_ACCESS_USER_INVITE_FAILED,
  ADMINISTRATION_ACCESS_CONTORL_GROUPS_FAILED,
  ADMINISTRATION_ACCESS_CONTORL_GROUPS_REQUESTED,
  ADMINISTRATION_ACCESS_CONTORL_GROUPS_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTORL_GROUP_UPDATE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTORL_GROUP_UPDATE_FAILED,
  ADMINISTRATION_ACCESS_CONTORL_GROUP_UPDATE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTORL_GROUP_CREATE_FAILED,
  ADMINISTRATION_ACCESS_CONTORL_GROUP_CREATE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTORL_GROUP_CREATE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTORL_GROUP_DELETE_FAILED,
  ADMINISTRATION_ACCESS_CONTORL_GROUP_DELETE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTORL_GROUP_DELETE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTORL_ROLES_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTORL_ROLES_FAILED,
  ADMINISTRATION_ACCESS_CONTORL_ROLES_REQUESTED,
  ADMINISTRATION_ACCESS_CONTORL_ROLE_UPDATE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTORL_ROLE_UPDATE_FAILED,
  ADMINISTRATION_ACCESS_CONTORL_ROLE_CREATE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTORL_ROLE_CREATE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTORL_ROLE_CREATE_FAILED,
  ADMINISTRATION_ACCESS_CONTORL_ROLE_DELETE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTORL_ROLE_DELETE_FAILED,
  ADMINISTRATION_ACCESS_CONTORL_ROLE_UPDATE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTORL_ROLE_DELETE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_ACTIONS_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_ACTIONS_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_ACTIONS_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_UPDATE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_UPDATE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_DELETE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_DELETE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_UPDATE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_CREATE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_DELETE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_TAB_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_TAB_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_TAB_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_UPDATE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_UPDATE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_CREATE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_DELETE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_DELETE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_UPDATE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_CREATE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_DELETE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_CREATE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_LIST_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_LIST_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_LIST_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_TYPE_LIST_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_TYPE_LIST_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_VENDOR_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_VENDOR_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_VENDOR_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_TYPE_LIST_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_CREATE_AUTH_SETTING_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_CREATE_AUTH_SETTING_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_CREATE_AUTH_SETTING_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_DELETE_AUTH_SETTING_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_DELETE_AUTH_SETTING_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_UPDATE_AUTH_SETTING_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_UPDATE_AUTH_SETTING_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_DELETE_AUTH_SETTING_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_UPDATE_AUTH_SETTING_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_LIST_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_LIST_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_LIST_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_LIST_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_LIST_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_LIST_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_DELETE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_DELETE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_DELETE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGETS_LIST_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGETS_LIST_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGETS_LIST_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_UPDATE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_UPDATE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_CREATE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_CREATE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_DELETE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_DELETE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_UPDATE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_CREATE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_DELETE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_SOURCE_LIST_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_SOURCE_LIST_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_GROUP_LIST_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_GROUP_LIST_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_GROUP_LIST_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_SOURCE_LIST_REQUESTED,
  ADMINISTRATION_PRODUCT_LICENSE_INFO_LIST_SUCCESSED,
  ADMINISTRATION_PRODUCT_LICENSE_INFO_LIST_FAILED,
  ADMINISTRATION_PRODUCT_LICENSE_INFO_LIST_REQUESTED,
  ADMINISTRATION_NOTIFICATIONS_LIST_REQUESTED,
  ADMINISTRATION_NOTIFICATIONS_LIST_SUCCESSED,
  ADMINISTRATION_NOTIFICATIONS_LIST_FAILED,
  ADMINISTRATION_NOTIFICATIONS_UPDATE_REQUESTED,
  ADMINISTRATION_NOTIFICATIONS_UPDATE_SUCCESSED,
  ADMINISTRATION_NOTIFICATIONS_UPDATE_FAILED,
  SET_FEEDBACK_ALERT,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_LIST_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_LIST_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_DELETE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_DELETE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_CREATE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_CREATE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_CREATE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_DELETE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_LIST_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_NOTIFY_USERS_LIST_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_NOTIFY_USERS_LIST_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_NOTIFY_USERS_LIST_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_DOWNLOAD_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_DOWNLOAD_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_DOWNLOAD_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_GET_BACKUP_SETTING_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_GET_BACKUP_SETTING_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_GET_BACKUP_SETTING_REQUESTED,
  ADMINISTRATION_FIELD_SETTING_LIST_REQUESTED,
  ADMINISTRATION_FIELD_SETTING_LIST_SUCCESSED,
  ADMINISTRATION_FIELD_SETTING_LIST_FAILED,
  ADMINISTRATION_FIELD_SETTING_UPDATE_REQUESTED,
  ADMINISTRATION_FIELD_SETTING_UPDATE_SUCCESSED,
  ADMINISTRATION_FIELD_SETTING_UPDATE_FAILED,
  ADMINISTRATION_CASE_FIELD_SETTING_LIST_SUCCESSED,
  ADMINISTRATION_CASE_FIELD_SETTING_LIST_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_LIST_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_LIST_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_DELETE_LIST_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_DELETE_LIST_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_UPDATE_LIST_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_UPDATE_LIST_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_CREATE_LIST_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_CREATE_LIST_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_LIST_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_DELETE_LIST_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_CREATE_LIST_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_CHANGE_TITLE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_CHANGE_TITLE_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_CHANGE_TITLE_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_UPDATE_FORMULA_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_UPDATE_FORMULA_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_UPDATE_FORMULA_REQUESTED,
  ADMINISTRATION_GET_INTIAL_DATA_ORAGANIZATION_INFOMATION_REQUESTED,
  ADMINISTRATION_GET_INTIAL_DATA_ORAGANIZATION_INFOMATION_SUCCESSED,
  ADMINISTRATION_GET_INTIAL_DATA_ORAGANIZATION_INFOMATION_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_GROUP_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_GROUP_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_DELETE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_DELETE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_DELETE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_UPDATE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_UPDATE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_CREATE_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_CREATE_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_CREATE_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_UPDATE_REQUESTED,
  ADMINISTRATION_ASSET_CONFIDENTIALUITY_LIST_REQUESTED,
  ADMINISTRATION_ASSET_CONFIDENTIALUITY_LIST_FAILED,
  ADMINISTRATION_ASSET_CONFIDENTIALUITY_UPDATE_SUCCESSED,
  ADMINISTRATION_ASSET_CONFIDENTIALUITY_UPDATE_FAILED,
  ADMINISTRATION_ASSET_CONFIDENTIALUITY_UPDATE_REQUESTED,
  ADMINISTRATION_ASSET_CONFIDENTIALUITY_CREATE_REQUESTED,
  ADMINISTRATION_ASSET_CONFIDENTIALUITY_CREATE_SUCCESSED,
  ADMINISTRATION_ASSET_CONFIDENTIALUITY_CREATE_FAILED,
  ADMINISTRATION_ASSET_CONFIDENTIALUITY_DELETE_SUCCESSED,
  ADMINISTRATION_ASSET_CONFIDENTIALUITY_DELETE_FAILED,
  ADMINISTRATION_ASSET_CONFIDENTIALUITY_DELETE_REQUESTED,
  ADMINISTRATION_CASE_FIELD_SETTING_LIST_REQUESTED,
  ADMINISTRATION_CASE_FIELD_SETTING_UPDATE_REQUESTED,
  ADMINISTRATION_ASSET_CONFIDENTIALUITY_LIST_SUCCESSED,
  ASSET_CLASSIFICATION_CHANGE_TITLE_SUCCESSED,
  ASSET_CLASSIFICATION_CHANGE_TITLE_FAILED,
  ASSET_CLASSIFICATION_FORMULA_CHANGE_SUCCESSED,
  ASSET_CLASSIFICATION_FORMULA_CHANGE_FAILED,
  ASSET_CLASSIFICATION_CHANGE_TITLE_REQUESTED,
  ASSET_CLASSIFICATION_FORMULA_CHANGE_REQUESTED,
  ASSET_CLASSIFICATION_GET_FORMULA_SUCCESSED,
  ASSET_CLASSIFICATION_GET_FORMULA_FAILED,
  ASSET_CLASSIFICATION_GET_FORMULA_REQUESTED,
  ASSET_CLASSIFICATION_INTEGIRTY_LIST_SUCCESSED,
  ASSET_CLASSIFICATION_INTEGIRTY_LIST_FAILED,
  ASSET_CLASSIFICATION_INTEGIRTY_UPDATE_SUCCESSED,
  ASSET_CLASSIFICATION_INTEGIRTY_UPDATE_FAILED,
  ASSET_CLASSIFICATION_INTEGIRTY_DELETE_SUCCESSED,
  ASSET_CLASSIFICATION_INTEGIRTY_DELETE_FAILED,
  ASSET_CLASSIFICATION_INTEGIRTY_CREATE_REQUESTED,
  ASSET_CLASSIFICATION_INTEGIRTY_CREATE_SUCCESSED,
  ASSET_CLASSIFICATION_INTEGIRTY_CREATE_FAILED,
  ASSET_CLASSIFICATION_INTEGIRTY_LIST_REQUESTED,
  ASSET_CLASSIFICATION_INTEGIRTY_UPDATE_REQUESTED,
  ASSET_CLASSIFICATION_INTEGIRTY_DELETE_REQUESTED,
  ASSET_CLASSIFICATION_AVAILABILITY_CREATE_FAILED,
  ASSET_CLASSIFICATION_AVAILABILITY_UPDATE_REQUESTED,
  ASSET_CLASSIFICATION_AVAILABILITY_UPDATE_FAILED,
  ASSET_CLASSIFICATION_AVAILABILITY_CREATE_SUCCESSED,
  ASSET_CLASSIFICATION_AVAILABILITY_DELETE_SUCCESSED,
  ASSET_CLASSIFICATION_AVAILABILITY_DELETE_FAILED,
  ASSET_CLASSIFICATION_AVAILABILITY_LIST_REQUESTED,
  ASSET_CLASSIFICATION_AVAILABILITY_CREATE_REQUESTED,
  ASSET_CLASSIFICATION_AVAILABILITY_DELETE_REQUESTED,
  ASSET_CLASSIFICATION_AVAILABILITY_LIST_SUCCESSED,
  ASSET_CLASSIFICATION_AVAILABILITY_LIST_FAILED,
  ASSET_CLASSIFICATION_AVAILABILITY_UPDATE_SUCCESSED,
  ADMINISTRATION_GET_TABS_HEADING_REQUESTED,
  ADMINISTRATION_GET_TABS_HEADING_SUCCESSED,
  ADMINISTRATION_GET_TABS_HEADING_FAILED,
  ADMINISTRATION_CASES_SLA_LIST_REQUESTED,
  ADMINISTRATION_CASES_SLA_LIST_SUCCESSED,
  ADMINISTRATION_CASES_SLA_LIST_FAILED,
  ADMINISTRATION_CASES_SLA_DELETE_SUCCESSED,
  ADMINISTRATION_CASES_SLA_DELETE_FAILED,
  ADMINISTRATION_CASES_SLA_UPDATE_SUCCESSED,
  ADMINISTRATION_CASES_SLA_UPDATE_FAILED,
  ADMINISTRATION_CASES_SLA_VIEW_LIST_SUCCESSED,
  ADMINISTRATION_CASES_SLA_VIEW_LIST_FAILED,
  ADMINISTRATION_CASES_SLA_DELETE_REQUESTED,
  ADMINISTRATION_CASES_SLA_UPDATE_REQUESTED,
  ADMINISTRATION_CASES_SLA_VIEW_LIST_REQUESTED,
  ADMINISTRATION_CASES_NCISS_DELETE_LIST_SUCCESSED,
  ADMINISTRATION_CASES_NCISS_DELETE_LIST_FAILED,
  ADMINISTRATION_CASES_NCISS_DELETE_LIST_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_UPDATE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_UPDATE_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_UPDATE_FAILED,
  ADMINISTRATION_RISK_MATRIX_LIST_REQUESTED,
  ADMINISTRATION_RISK_MATRIX_LIST_FAILED,
  ADMINISTRATION_RISK_MATRIX_LIST_SUCCESSED,
  ADMINISTRATION_RESET_RISK_MATRIX_REQUESTED,
  ADMINISTRATION_RESET_RISK_MATRIX_FAILED,
  ADMINISTRATION_RESET_RISK_MATRIX_SUCCESSED,
  ADMINISTRATION_GET_RISK_MATRIX_DROPDOWN_DATA_REQUESTED,
  ADMINISTRATION_GET_RISK_MATRIX_RANGE_FROM_SUCCESSED,
  ADMINISTRATION_GET_RISK_MATRIX_RANGE_TO_FAILED,
  ADMINISTRATION_GET_RISK_MATRIX_RANGE_TO_SUCCESSED,
  ADMINISTRATION_GET_RISK_MATRIX_COLOR_LIST_SUCCESSED,
  ADMINISTRATION_GET_RISK_MATRIX_COLOR_LIST_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_SUCCESSED,
  AUTOMATION_ACTION_DUPLICATE_SUCCESSED,
  AUTOMATION_ACTION_DUPLICATE_FAILED,
  AUTOMATION_ACTION_DUPLICATE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_GET_FORMULA_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_GET_FORMULA_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_GET_FORMULA_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_FAILED,
  ADMINISTRATION_CREATE_RISK_MATRIX_REQUESTED,
  ADMINISTRATION_CREATE_RISK_MATRIX_SUCCESSED,
  ADMINISTRATION_CREATE_RISK_MATRIX_FAILED,
  ADMINISTRATION_AUTOMATION_ACTIONS_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_ACTIONS_DELETE_LIST_REQUESTED,
  ADMINISTRATION_AUTOMATION_ACTIONS_OUTPUT_SUCCESSED,
  ADMINISTRATION_AUTOMATION_ACTIONS_OUTPUT_FAILED,
  ADMINISTRATION_AUTOMATION_ACTIONS_OUTPUT_REQUESTED,
  AUTOMATION_ACTION_CONFIGURATION_SUCCESSED,
  AUTOMATION_ACTION_CONFIGURATION_FAILED,
  AUTOMATION_ACTION_CONFIGURATION_REQUESTED,
  AUTOMATION_ACTION_CONFIGURATION_POST_SUCCESSED,
  AUTOMATION_ACTION_CONFIGURATION_POST_FAILED,
  AUTOMATION_ACTION_CONFIGURATION_POST_REQUESTED,
  AUTOMATION_ACTION_VIEW_SCRIPT_SUCCESSED,
  AUTOMATION_ACTION_VIEW_SCRIPT_FAILED,
  AUTOMATION_ACTION_VIEW_SCRIPT_REQUESTED,
  AUTOMATION_ACTION_MULTIDATA_POST_REQUESTED,
  AUTOMATION_ACTION_MULTIDATA_POST_FAILED,
  AUTOMATION_ACTION_MULTIDATA_POST_SUCCESSED,
  ADMINISTRATION_CASES_CONTAINER_LIST_SUCCESS,
  ADMINISTRATION_CASES_CONTAINER_LIST_FAILDED,
  ADMINISTRATION_CASES_DESPOSITION_SUCCESS,
  ADMINISTRATION_CASES_DESPOSITION_FAILED,
  ADMINISTRATION_CASES_CATEGORY_SUCCESS,
  ADMINISTRATION_CASES_CATEGORY_FAILED,
  ADMINISTRATION_CASES_CONTAINER_LIST_REQUESTED,
  ADMINISTRATION_CASES_DESPOSITION_REQUESTED,
  ADMINISTRATION_CASES_CATEGORY_REQUESTED,
  ADMINISTRATION_VAL_SEVERTIY_LEVEL_LIST_SUCCESSED,
  ADMINISTRATION_VAL_SEVERTIY_LEVEL_LIST_FAILED,
  ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_LIST_SUCCESSED,
  ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_LIST_FAILED,
  ADMINISTRATION_VAL_SEVERTIY_LEVEL_LIST_REQUESTED,
  ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_LIST_REQUESTED,
  ADMINISTRATION_VAL_SEVERTIY_LEVEL_CREATE_LIST_SUCCESSED,
  ADMINISTRATION_VAL_SEVERTIY_LEVEL_CREATE_LIST_FAILED,
  ADMINISTRATION_VAL_SEVERTIY_LEVEL_UPDATE_LIST_SUCCESSED,
  ADMINISTRATION_VAL_SEVERTIY_LEVEL_UPDATE_LIST_FAILED,
  ADMINISTRATION_VAL_SEVERTIY_LEVEL_DELETE_LIST_SUCCESSED,
  ADMINISTRATION_VAL_SEVERTIY_LEVEL_DELETE_LIST_FAILED,
  ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_DELETE_LIST_SUCCESSED,
  ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_DELETE_LIST_FAILED,
  ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_UPDATE_LIST_SUCCESSED,
  ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_UPDATE_LIST_FAILED,
  ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_CREATE_LIST_SUCCESSED,
  ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_CREATE_LIST_FAILED,
  ADMINISTRATION_VAL_SEVERTIY_LEVEL_CREATE_LIST_REQUESTED,
  ADMINISTRATION_VAL_SEVERTIY_LEVEL_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_VAL_SEVERTIY_LEVEL_DELETE_LIST_REQUESTED,
  ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_DELETE_LIST_REQUESTED,
  ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_UPDATE_LIST_REQUESTED,
  ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_CREATE_LIST_REQUESTED,
  ADMINISTRATION_CASES_SLA_RULE_LIST_REQUESTED,
  ADMINISTRATION_CASES_SLA_RULE_LIST_SUCCESSED,
  ADMINISTRATION_CASES_SLA_RULE_LIST_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_GET_DEFAULT_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_GET_DEFAULT_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_GET_DEFAULT_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_ACTION_CREATE_SUCCESSED,
  ADMINISTRATION_CASES_SLA_CREATE_REQUESTED,
  ADMINISTRATION_CASES_SLA_CREATE_SUCCESSED,
  ADMINISTRATION_CASES_SLA_CREATE_FAILED,
  ADMINISTRATION_PRODUCT_LICENSE_UPLOAD_SUCCESSED,
  ADMINISTRATION_PRODUCT_LICENSE_UPLOAD_FAILED,
  ADMINISTRATION_PRODUCT_LICENSE_UPLOAD_REQUESTED,
  ADMINISTRATION_PRODUCT_LICENSE_SOURCES_SUCCESSED,
  ADMINISTRATION_PRODUCT_LICENSE_SOURCES_FAILED,
  ADMINISTRATION_PRODUCT_LICENSE_CREATE_SUCCESSED,
  ADMINISTRATION_PRODUCT_LICENSE_CREATE_FAILED,
  ADMINISTRATION_PRODUCT_LICENSE_CREATE_REQUESTED,
  ADMINISTRATION_PRODUCT_LICENSE_SOURCES_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_IMPORT_BACKUP_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_IMPORT_BACKUP_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_RESTORE_BACKUP_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_RESTORE_BACKUP_FAILED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_IMPORT_BACKUP_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_RESTORE_BACKUP_REQUESTED,
  ADMINISTRATION_PRODUCT_SETTTING_BACKUP_SETTING_RESTORE_CONFIGURE_AUTO_BACKUP_REQUESTED,
  ADMINISTRATION_PRODUCT_SETTINGS_PATCH_SUCCESSED,
  ADMINISTRATION_PRODUCT_SETTINGS_PATCH_FAILED,
  ADMINISTRATION_PRODUCT_SETTINGS_PATCH_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_HEALTH_REQUESTED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_HEALTH_SUCCESSED,
  ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_HEALTH_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_GET_RISK_META_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_GET_RISK_META_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_GET_RISK_META_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_FAILED,
  ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_LABEL_REQUESTED,
  ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_LABEL_SUCCESSED,
  ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_LABEL_FAILED,
  ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_LIST_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_LIST_SUCCESSED,
  ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_LIST_FAILED,
  ADMINISTRATION_THREAT_INTEL_ASSOCIATE_ACTOR_THREAT_ACTOR_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_ASSOCIATE_ACTOR_THREAT_ACTOR_SUCCESSED,
  ADMINISTRATION_THREAT_INTEL_ASSOCIATE_ACTOR_THREAT_ACTOR_FAILED,
  ADMINISTRATION_THREAT_INTEL_ASSOCIATE_THREAT_ACTOR_LIST_SUCCESSED,
  ADMINISTRATION_THREAT_INTEL_ASSOCIATE_THREAT_ACTOR_LIST_FAILED,
  ADMINISTRATION_THREAT_INTEL_ASSOCIATE_THREAT_ACTOR_LIST_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_CREATE_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_CREATE_SUCCESSED,
  ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_CREATE_FAILED,
  ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_UPDATE_REQUESTED,
  ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_UPDATE_SUCCESSED,
  ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_UPDATE_FAILED,
} from '../../constants/actionTypes';

import {
  assetsGroupsAPI,
  organizationListAPI,
  classificationListAPI,
  updateClassificationListAPI,
  deleteClassificationListAPI,
  createClassificationListAPI,
  ownersListAPI,
  deleteOwnerListAPI,
  createOwnerListAPI,
  updateOwnerListAPI,
  createOrganization,
  deleteOrganization,
  getselectedOraganization,
  setselectedOraganization,
  organizationUserListAPI,
  assetsSourceListAPI,
  assetsSubGroupListAPI,
  createAssetGroupAPI,
  deleteAssetsGroupAPI,
  editAssetGroupAPI,
  administrationListAPI,
  organizationMemberDetails,
  oraganizationslist,
  createOraganizationUser,
  updateOraganizationUser,
  deleteOraganizationUser,
  administrationCreateListAPI,
  administrationUpdateListAPI,
  administrationDeleteListAPI,
  administrationChangeStatusAPI,
  assetsSubGroupTabAPI,
  assetsSubGroupDropDownAPI,
  createAssetSubGroupAPI,
  deleteAssetsSubGroupAPI,
  editAssetSubGroupAPI,
  administrationDuplicateAPI,
  administrationDeleteAPI,
  administrationWorkflowCategoryListAPI,
  administrationWorkflowSubCategoryListAPI,
  administrationWorkflowTaskCategoryListAPI,
  administrationCreateWorkflowTaskAPI,
  administrationUpdateWorkflowTaskAPI,
  assetsValueTabAPI,
  createAssetValueAPI,
  editAssetValueAPI,
  deleteAssetsValueAPI,
  editAssetTitleValueAPI,
  assetsOsListAPI,
  createOperatingSystemAPI,
  threatRegisterValueApi,
  threatRegisterVulnerabilityApi,
  createRiskManagementThreatRegisterAPI,
  deleteRiskManagementThreatRegisterAPI,
  updateRiskManagementAPI,
  updateRiskManagementThreatRegisterAPI,
  oraganizationTimezone,
  updateOrganization,
  oraganizationPost,
  RiskManagementBusinesImpactChangeTitleAPI,
  automationListAPI,
  automationCreateListAPI,
  automationUpdateListAPI,
  automationActionIOValidationListAPI,
  editAssetOsAPI,
  deleteOsAPI,
  assetsDepartmentListAPI,
  createAssetDepartmentAPI,
  editAssetDepartmentAPI,
  deleteAssetDepartmentAPI,
  administratorCasesCategory,
  administratorCasesDispositions,
  administratorCasesCategoryDelete,
  administratorCasesCategoryUpdate,
  administratorCasesCategoryCreate,
  administratorCasesSubCategory,
  administratorCasesSubCategoryUpdate,
  administratorCasesSubCategoryDelete,
  administratorCasesSubCategoryCreate,
  administratorCasesCategoryList,
  assetsBusinessGroupListAPI,
  createAssetBusinessGroupAPI,
  editAssetBusinessGroupAPI,
  deleteAssetBusinessGroupAPI,
  editAssetBusinessGroupTitleAPI,
  assetsTypeListAPI,
  editAssetTypeTitleAPI,
  deleteAssetTypeAPI,
  administratorCasesDispositionsList,
  administratorCasesDispositionDelete,
  administratorCasesDispositionUpdate,
  administratorCasesDispositionCreate,
  administratorCasesDispositionsItem,
  administratorCasesSubDispositionsList,
  administratorCasesSubDispositionCreate,
  administratorSubCasesDispositionUpdate,
  administratorCasesSubDispositionDelete,
  vulnerabilityListAPI,
  assetsDropDownListAPI,
  subGroupDropDownListAPI,
  ownerDropDownListAPI,
  departmentDropDownListAPI,
  administratorCasesDetectionMethodsList,
  administratorCasesDetectionMethodDelete,
  administratorCasesDetectionMethodUpdate,
  administratorCasesDetectionMethodCreate,
  administratorSubCasesDispositionDropdownList,
  administratorCasesLocationsList,
  administratorCasesLocationDelete,
  administratorCasesLocationCreate,
  administratorCasesLocationUpdate,
  deleteVulnerabilityAPI,
  createVulnerabilityAPI,
  updateVulnerabilityAPI,
  threatIntelListAPI,
  createthreatIntelAPI,
  deletethreatIntelAPI,
  updateThreatIntelAPI,
  createAssetTypeAPI,
  editAssetTypeListAPI,
  administratorCasesNciss,
  administratorCasesNcissCreate,
  administratorCasesNcissUpdate,
  casesNcissDropDownListAPI,
  administratorCasesNcisCategories,
  administratorNcisCategoryUpdate,
  administratorNcisCategoryCreate,
  administratorNcisCategoryDelete,
  administratorCasesNcissPeriorities,
  administratorCasesNcissPerioritieDelete,
  administratorCasesNcissPerioritieUpdate,
  administratorCasesNcissPerioritieCreate,
  assetValueDropDownListAPI,
  allIngestionAPI,
  enableAdvisoryAPI,
  ingestionActionAPI,
  addMultiData,
  sessionPassword,
  sessionPasswordUpdate,
  userAccessUpdate,
  userAccessInviteUser,
  accessControlGroups,
  updateAccessContorlGroup,
  createAccessControlGroup,
  deleteAccessContorlGroup,
  accessControlRoles,
  updateAccessControlRole,
  createAccessControlRole,
  deleteAccessControlRole,
  accessControlActions,
  updateAccessControlAction,
  createAccessControlAction,
  deleteAccessControlaction,
  accessControlActionsGroup,
  accessControlActionsGroupTab,
  updateAccessControlActionGroup,
  deleteAccessControlActionGroup,
  createAccessControlActionGroup,
  accessControlAuthSettings,
  accessControlAuthSettingAuthencticationType,
  accessControlAuthSettingAuthencticationVendors,
  updateAccessControlThirdPartyAuth,
  deleteAccessControlThirdPartyAuth,
  createAccessControlThirdPartyAuth,
  accessControlPrivileges,
  accessControlProductSettingFeedback,
  deleteProductSettingFeedback,
  accessControlProductSettingWidgets,
  updateProductSettingWidget,
  createProductSettingWidget,
  deleteProductSettingWidget,
  accessControlWidgetDataSource,
  accessControlWidgetDataGroup,
  productSettingLicense,
  notificationListApi,
  notificationUpdateApi,
  accessControlProductSettingBackup,
  deleteProductSettingBackup,
  createBackupList,
  notifyUserList,
  dowloadBackup,
  getBackupSettingAPI,
  fieldSettingListApi,
  fieldSettingUpdateApi,
  fieldCaseSettingListApi,
  caseFieldSettingUpdateApi,
  probabilityGetDefaultAPI,
  Riskprobability,
  deleteRiskprobability,
  updateRiskprobability,
  createRiskprobability,
  changeProbabilityTitle,
  updateFormula,
  getFormula,
  getInitOraganizationInfo,
  accessControlPrivilegeGroup,
  accessControlPrivilegeDelete,
  accessControlPrivilegeUpdate,
  accessControlPrivilegeCreate,
  assetConfidentialityApi,
  updateConfidentialityApi,
  deleteConfidentialityApi,
  classificationTitleChange,
  classificationFormulaChange,
  classificationGetFormula,
  createConfidentialityApi,
  assetIntegrityApi,
  updateIntegrityApi,
  deleteIntegrityApi,
  createIntegrityApi,
  assetAvailabilityApi,
  updateAvailabilityApi,
  createAvailabilityApi,
  deleteAvailabilityApi,
  caseGetTabsHeadingsApi,
  administratorCasesSlaList,
  administratorCaseseDelete,
  administratorCasesSlaCreate,
  administratorCasesSlaLogs,
  administratorCasesSlaViewRule,
  administratorCasesNcissDelete,
  getRiskMatrixAPi,
  resetRiskMatrixAPi,
  getRiskMatrixRangeFromApi,
  getRiskMatrixRangeToApi,
  getRiskMatrixColorListApi,
  automationActionDuplication,
  createRiskMatrixAPi,
  automationAutomationUpdate,
  automationDeleteListAPI,
  automationActionOutput,
  automationActionConfigurations,
  automationActionConfigurationsPost,
  automationViewAction,
  automationActionsMultiPostData,
  getContainerList,
  getCasesDespositionList,
  getCasesCategoriesList,
  technicalSeverityLevel,
  NontechnicalSeverityLevel,
  technicalSeverityLevelCreate,
  technicalSeverityLevelDelete,
  NontechnicalSeverityLevelDelete,
  NontechnicalSeverityLevelUpdated,
  NontechnicalSeverityLevelCreated,
  technicalSeverityLevelUpdate,
  uploadLicenseApi,
  createLicenceRequest,
  getModuleSources,
  importBackup,
  configureRestoreBackupAPI,
  RestoreBackup,
  patchUploadRequest,
  productSettingHealthAPI,
  getRiskMetaAPI,
  administratorCasesSlaUpdate,
  riskMetaLabelUpdate,
  riskMetaUpdateAPI,
  getAssociateThreatActor,
  getThreatActor,
  associateThreatActorListAPI,
  administratorThreatActorCreate,
  administratorThreatActorUpdate,
  administratorThreatActorDelete
} from '../../api/administrationApi';

import {
  oraganizationUsers,
  ongetSelectedOraganization,
  getOrganizationList,
  administratorCasesCategoriesList,
  administratorCasesSubCategoriesList,
  administratorCasesDispositions as administratorCasesDispositionsDataList,
  administratorSubCasesDispositions,
  administratorCasesDitectionsMethod,
  administratorCasesLocationList,
  administratorCasesNcissList,
  administratorCasesNcisscategories,
  administratorCasesNcissPerioritiesList,
  getSessionPassword,
  accessUsersList as accessControlUserlist,
  onGetAccessControlGroupsTab,
  onGetAccessControlRolesTab,
  onGetAccessControlActionTab,
  onGetAccessControlActionGroupTab,
  onGetAccessControlAuthSettingList,
  onGetListOfProductFeedback,
  onUpdateWidgetList,
  onGetWidgetList,
  onGetListofBackups,
  riskManagementProbablity,
  onGetListOfPrivileges,
  getAssetValueList,
  getAssetOperatingSystemList,
  assetConfidentiality as assetConfidentialityList,
  getIntegirtyListRequest,
  getAvaiabilityListRequest,
  getAllTabbsHeading,
  getWorkflowList,
  administratorCasesSlaList as administratorCasesSlaAction,
  riskManagementThreatRegisterList,
  riskManagementThreatValueList,
  riskManagementControlRegisterList,
  getCategoryList,
  automationVendorsList,
  threatIntelCategoryList as threatIntelCategoryListAction,
  threatIntelSubCategoryList as threatIntelSubCategoryListAction,
  getThreatDispositionList,
  vulnerabilityTechnicalList,
  riskManagementComplianceList,
  automationPublishersList,
  automationActionIOList,
  automationThreatList,
  automationFamilyList,
  automationActionsList as automationActionsLists,
  riskManagementBusinessImpactList,
  createRiskMatrix,
  getRiskMtrix,
  vulnerabilityNonTechnicalList,
  automationIngestionList as automationIngestionLists,
  productsRegisterList as productsRegisterListAction,
  valTechserverity,
  valNoTechserverity,
  onGetRiskMetaList,
  getAssetSubGroupList,
  getOwnersList,
  getAssetBusinessGroupList as getAssetBusinessGroupAction,
  associateGroupThreatActor,
  associateGroupThreatActorList,
} from '../../actions/administration';
import { getUserProfile } from '../../actions/user';


export function* organizationList(action) {
  try {
    const organizationData = yield call(organizationListAPI, action.payload);
    if (organizationData.success === true) {
      yield put({
        type: ADMINISTRATION_ORGANIZATION_LIST_SUCCESSED,
        data: organizationData,
      });
    } else {
      yield put({ type: ADMINISTRATION_ORGANIZATION_LIST_FAILED, data: null });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ORGANIZATION_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* classificationList(action) {
  try {
    const organizationData = yield call(classificationListAPI, action.payload);

    if (organizationData.success === true) {
      yield put({
        type: ADMINISTRATION_CLASSIFICATION_LIST_SUCCESSED,
        data: organizationData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CLASSIFICATION_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    console.log(err);
    yield put({
      type: ADMINISTRATION_CLASSIFICATION_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateList(action) {
  try {
    const organizationData = yield call(
      updateClassificationListAPI,
      action.payload
    );
    if (organizationData.success === true) {
      const classificationListData = yield call(classificationListAPI, {
        queryItem: action.payload.queryItem,
      });

      if (classificationListData.success === true) {
        yield put({
          type: ADMINISTRATION_CLASSIFICATION_LIST_SUCCESSED,
          data: classificationListData,
        });
      } else {
        yield put({
          type: ADMINISTRATION_CLASSIFICATION_LIST_FAILED,
          data: null,
        });
      }

      yield put({
        type: ADMINISTRATION_CLASSIFICATION_UPDATE_LIST_SUCCESSED,
        data: organizationData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CLASSIFICATION_UPDATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CLASSIFICATION_UPDATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteClassification(action) {
  try {
    const organizationData = yield call(
      deleteClassificationListAPI,
      action.payload
    );

    if (organizationData.success === true) {
      const classificationListData = yield call(classificationListAPI, {
        queryItem: action.payload.queryItem,
      });

      if (classificationListData.success === true) {
        yield put({
          type: ADMINISTRATION_CLASSIFICATION_LIST_SUCCESSED,
          data: classificationListData,
        });
      } else {
        yield put({
          type: ADMINISTRATION_CLASSIFICATION_LIST_FAILED,
          data: null,
        });
      }

      yield put({
        type: ADMINISTRATION_CLASSIFICATION_DELETE_SUCCESSED,
        data: organizationData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CLASSIFICATION_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CLASSIFICATION_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createClassification(action) {
  try {
    const organizationData = yield call(
      createClassificationListAPI,
      action.payload
    );

    const classificationListData = yield call(classificationListAPI, {
      queryItem: action.payload.queryItem,
    });

    if (classificationListData.success === true) {
      yield put({
        type: ADMINISTRATION_CLASSIFICATION_LIST_SUCCESSED,
        data: classificationListData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CLASSIFICATION_LIST_FAILED,
        data: null,
      });
    }

    if (organizationData.success === true) {
      yield put({
        type: ADMINISTRATION_CLASSIFICATION_CREATE_LIST_SUCCESSED,
        data: organizationData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CLASSIFICATION_CREATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CLASSIFICATION_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* ownerList(action) {
  try {
    const organizationData = yield call(ownersListAPI, action.payload);

    if (organizationData.success === true) {
      yield put({
        type: ADMINISTRATION_OWNERS_LIST_SUCCESSED,
        data: organizationData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_OWNERS_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_OWNERS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteOwner(action) {
  try {
    const deltedOwnerInfo = yield call(deleteOwnerListAPI, action.payload);

    if (deltedOwnerInfo.success === true) {
      const ownerListData = yield call(ownersListAPI, {
        queryItem: action.payload.queryItem,
      });

      if (ownerListData.success === true) {
        yield put({
          type: ADMINISTRATION_OWNERS_LIST_SUCCESSED,
          data: ownerListData,
        });
      } else {
        yield put({
          type: ADMINISTRATION_OWNERS_LIST_FAILED,
          data: null,
        });
      }

      yield put({
        type: ADMINISTRATION_OWNERS_DELETE_SUCCESSED,
        data: deltedOwnerInfo,
      });
    } else {
      yield put({
        type: ADMINISTRATION_OWNERS_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_OWNERS_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateOwner(action) {
  try {
    const organizationData = yield call(updateOwnerListAPI, action.payload);
    if (organizationData.success === true) {
      yield put({
        type: ADMINISTRATION_OWNERS_UPDATE_LIST_SUCCESSED,
        data: organizationData,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Update Owner Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getOwnersList({ queryItem: action.payload.queryItem }))
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_OWNERS_UPDATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createOwner(action) {
  try {
    const organizationData = yield call(createOwnerListAPI, action.payload);
    if (organizationData.success === true) {
      yield put({
        type: ADMINISTRATION_OWNERS_CREATE_LIST_SUCCESSED,
        data: organizationData,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Create Owner Successfully ',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getOwnersList({ queryItem: action.payload.queryItem }))
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_OWNERS_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetGroupList(action) {
  try {
    const assetsGroupData = yield call(assetsGroupsAPI, action.payload);

    if (assetsGroupData.success === true) {
      yield put({
        type: ADMINISTRATION_ASSETS_GROUP_LIST_SUCCESSED,
        data: assetsGroupData,
      });
    } else {
      yield put({ type: ADMINISTRATION_ASSETS_GROUP_LIST_FAILED, data: null });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSETS_GROUP_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCreateOraganization(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(createOrganization, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ORAGANIZATION_CREATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Oraganization Created Successfully ',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getOrganizationList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ORAGANIZATION_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    const msg = err?.response?.data?.data?.message
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: msg || "somthign Went Wrong",
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ORAGANIZATION_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchOragaizationInfomationPost(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(oraganizationPost, action.payload);
    if (response.success === true) {
      yield put({
        type: ORGANIZATION_INFOMATION_POST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ORGANIZATION_INFOMATION_POST_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ORGANIZATION_INFOMATION_POST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchDeleteOraganization(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(deleteOrganization, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ORAGANIZATION_DELETE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.message
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Delete Oraganization Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getOrganizationList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ORAGANIZATION_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ORAGANIZATION_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchUpdateOraganization(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(updateOrganization, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ORGANIZATION_UPDATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Update Oraganization Successfully ',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getOrganizationList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ORGANIZATION_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ORGANIZATION_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchGetSelectionOraganization() {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(getselectedOraganization);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_GET_SELECTED_ORGANIZATION_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_SELECTED_ORGANIZATION_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_GET_SELECTED_ORGANIZATION_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchGetIntialValueInfo() {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(getInitOraganizationInfo);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_GET_INTIAL_DATA_ORAGANIZATION_INFOMATION_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_INTIAL_DATA_ORAGANIZATION_INFOMATION_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_GET_INTIAL_DATA_ORAGANIZATION_INFOMATION_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchSetSelectionOraganization(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(setselectedOraganization, action.payload);
    if (response.success === true) {
      yield put(getUserProfile());
      yield put({
        type: ADMINISTRATION_SET_SELECTED_ORGANIZATION_SUCCESSED,
        data: response?.data,
      });
      yield put(ongetSelectedOraganization());
    } else {
      yield put({
        type: ADMINISTRATION_SET_SELECTED_ORGANIZATION_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_SET_SELECTED_ORGANIZATION_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* organizationUsersList(action) {
  try {
    const response = yield call(organizationUserListAPI, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ORAGANIZATION_USERS_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ORAGANIZATION_USERS_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ORAGANIZATION_USERS_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetSourceList(action) {
  try {
    const assetsSourceListData = yield call(
      assetsSourceListAPI,
      action.payload
    );

    if (assetsSourceListData.success === true) {
      yield put({
        type: ADMINISTRATION_ASSETS_GROUP_SOURCE_LIST_SUCCESSED,
        data: assetsSourceListData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ASSETS_GROUP_SOURCE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSETS_GROUP_SOURCE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetSubGroupList(action) {
  try {
    const assetsGroupData = yield call(assetsSubGroupListAPI, action.payload);

    if (assetsGroupData.success === true) {
      yield put({
        type: ADMINISTRATION_ASSETS_GROUP_SUB_GROUP_SUCCESSED,
        data: assetsGroupData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ASSETS_GROUP_SUB_GROUP_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSETS_GROUP_SUB_GROUP_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createAssetGroup(action) {
  try {
    const assetsGroupData = yield call(createAssetGroupAPI, action.payload);

    if (assetsGroupData.success === true) {
      const assetsGroupListData = yield call(assetsGroupsAPI, {
        queryItem: action.payload.queryItem,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Asset Group Created Succesfully ',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      if (assetsGroupListData.success === true) {
        yield put({
          type: ADMINISTRATION_ASSETS_GROUP_LIST_SUCCESSED,
          data: assetsGroupListData,
        });
      } else {
        yield put({
          type: ADMINISTRATION_ASSETS_GROUP_LIST_FAILED,
          data: null,
        });
      }
      yield put({
        type: ADMINISTRATION_CREATE_ASSETS_GROUP_SUCCESSED,
        data: assetsGroupData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CREATE_ASSETS_GROUP_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CREATE_ASSETS_GROUP_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchOraganizatioMemberList() {
  try {
    const response = yield call(organizationMemberDetails);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ORAGANIZATION_MEMBERS_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ORAGANIZATION_MEMBERS_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ORAGANIZATION_MEMBERS_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteAssetGroup(action) {
  try {
    const assetsGroupData = yield call(deleteAssetsGroupAPI, action.payload);

    if (assetsGroupData.success === true) {
      const assetsGroupListData = yield call(assetsGroupsAPI, {
        queryItem: action.payload.queryItem,
      });

      if (assetsGroupListData.success === true) {
        yield put({
          type: ADMINISTRATION_ASSETS_GROUP_LIST_SUCCESSED,
          data: assetsGroupListData,
        });
        yield put({
          type: SET_FEEDBACK_ALERT,
          payload: {
            feedbackMessage: 'Asset Group  Deleted Succesfully ',
            feedbackType: 'success',
            module: 'administration',
          },
        });
      } else {
        yield put({
          type: ADMINISTRATION_ASSETS_GROUP_LIST_FAILED,
          data: null,
        });
      }
      yield put({
        type: ADMINISTRATION_DELETE_ASSETS_GROUPS_SUCCESSED,
        data: assetsGroupData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_DELETE_ASSETS_GROUPS_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_DELETE_ASSETS_GROUPS_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* editAssetGroup(action) {
  try {
    const assetsGroupData = yield call(editAssetGroupAPI, action.payload);

    if (assetsGroupData.success === true) {
      const assetsGroupListData = yield call(assetsGroupsAPI, {
        queryItem: action.payload.queryItem,
      });
      if (assetsGroupListData.success === true) {
        yield put({
          type: ADMINISTRATION_ASSETS_GROUP_LIST_SUCCESSED,
          data: assetsGroupListData,
        });
        yield put({
          type: SET_FEEDBACK_ALERT,
          payload: {
            feedbackMessage: 'Asset Group Updated Succesfully ',
            feedbackType: 'success',
            module: 'administration',
          },
        });
      } else {
        yield put({
          type: ADMINISTRATION_ASSETS_GROUP_LIST_FAILED,
          data: null,
        });
      }

      yield put({
        type: ADMINISTRATION_EDIT_ASSETS_GROUPS_SUCCESSED,
        data: assetsGroupData,
      });
    } else {
      yield put({ type: ADMINISTRATION_EDIT_ASSETS_GROUPS_FAILED, data: null });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_EDIT_ASSETS_GROUPS_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* workflowList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'workflow',
    };
    const workflowData = yield call(administrationListAPI, payload);

    if (workflowData.success === true) {
      yield put({
        type: ADMINISTRATION_WORKFLOW_LIST_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({ type: ADMINISTRATION_WORKFLOW_LIST_FAILED, data: null });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_WORKFLOW_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchOraganizationsList() {
  try {
    const response = yield call(oraganizationslist);
    if (response.success === true) {
      yield put({ type: ORAGANIZATION_SUCCESSED, data: response?.data });
    } else {
      yield put({ type: ORAGANIZATION_FAILED, data: null });
    }
  } catch (err) {
    yield put({
      type: ORAGANIZATION_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCreateOraganizationUser(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(createOraganizationUser, action.payload);
    if (response.success === true) {
      yield put({
        type: ORAGANIZATION_USER_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Oraganization User is Created Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(oraganizationUsers({ queryItem: action.query }));
    } else {
      yield put({ type: ORAGANIZATION_USER_CREATE_FAILED, data: null });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ORAGANIZATION_USER_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchDeleteOraganizationUser(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(deleteOraganizationUser, action.id);
    if (response.success === true) {
      yield put({
        type: ORAGANIZATION_USER_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Oraganization User Deleted Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(oraganizationUsers({ queryItem: action.query }));
    } else {
      yield put({ type: ORAGANIZATION_USER_DELETE_FAILED, data: null });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ORAGANIZATION_USER_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchUpdateOraganizationUser(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      updateOraganizationUser,
      action.id,
      action.payload
    );
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Oraganization User Updated Successfully',
        feedbackType: 'success',
        module: 'administration',
      },
    });
    if (response.success === true) {
      yield put({
        type: ORAGANIZATION_USER_UPDATE_SUCCESSED,
        data: response?.data,
      });

      yield put(oraganizationUsers({ queryItem: action.query }));
    } else {
      yield put({ type: ORAGANIZATION_USER_UPDATE_FAILED, data: null });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ORAGANIZATION_USER_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchOraganizationTimezon() {
  try {
    const response = yield call(oraganizationTimezone);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ORAGANIZATION_TIMEZONE_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ORAGANIZATION_TIMEZONE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ORAGANIZATION_TIMEZONE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* categoryList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'category',
    };
    const categoryData = yield call(administrationListAPI, payload);

    if (categoryData.success === true) {
      yield put({
        type: ADMINISTRATION_CATEGORY_LIST_SUCCESSED,
        data: categoryData?.data,
      });
    } else {
      yield put({ type: ADMINISTRATION_CATEGORY_LIST_FAILED, data: null });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CATEGORY_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateCateogryList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'category',
    };
    const categoryData = yield call(administrationUpdateListAPI, payload);

    if (categoryData.success === true) {
      yield put({
        type: ADMINISTRATION_CATEGORY_UPDATE_LIST_SUCCESSED,
        data: categoryData?.data,
      });
      const msg = categoryData?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Workflows Task-categories Updated',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getCategoryList({ queryItem: action.payload.query }))
    } else {
      yield put({
        type: ADMINISTRATION_CATEGORY_UPDATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CATEGORY_UPDATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error While updating ',
        feedbackType: 'error',
        module: 'Administrator',
      },
    });
  }
}

export function* deleteCategory(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'category',
    };
    const categoryData = yield call(administrationDeleteListAPI, payload);

    if (categoryData.success === true) {
      yield put({
        type: ADMINISTRATION_CATEGORY_DELETE_LIST_SUCCESSED,
        data: categoryData?.data,
      });
      const msg = categoryData?.data?.[1]

      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Workflows Task-categories Deleted',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getCategoryList({ queryItem: action.payload.query }))
    } else {
      yield put({
        type: ADMINISTRATION_CATEGORY_DELETE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_CATEGORY_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createCategoryList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'category',
    };
    const categoryData = yield call(administrationCreateListAPI, payload);

    if (categoryData.success === true) {
      yield put({
        type: ADMINISTRATION_CATEGORY_CREATE_LIST_SUCCESSED,
        data: categoryData?.data,
      });
      const msg = categoryData?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Workflows Task-categories',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getCategoryList({ queryItem: action.payload.query }))
    } else {
      yield put({
        type: ADMINISTRATION_CATEGORY_CREATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_CATEGORY_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* changeWorkFlowStatus(action) {
  try {
    const response = yield call(
      administrationChangeStatusAPI,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_WORKFLOW_CHANGE_STATUS_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Workflow Status Change',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getWorkflowList({ queryItem: action.payload.query }))
    } else {
      yield put({
        type: ADMINISTRATION_WORKFLOW_CHANGE_STATUS_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_WORKFLOW_CHANGE_STATUS_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetSubGroupTabList(action) {
  try {
    const assetsGroupData = yield call(assetsSubGroupTabAPI, action.payload);
    if (assetsGroupData.success === true) {
      yield put({
        type: ADMINISTRATION_ASSET_SUB_GROUP_LIST_SUCCESSED,
        data: assetsGroupData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ASSET_SUB_GROUP_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSET_SUB_GROUP_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetSubGroupDropDownList(action) {
  try {
    const assetsGroupData = yield call(
      assetsSubGroupDropDownAPI,
      action.payload
    );
    if (assetsGroupData.success === true) {
      yield put({
        type: ADMINISTRATION_ASSET_GROUP_DROP_DOWN_LIST_SUCCESSED,
        data: assetsGroupData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ASSET_GROUP_DROP_DOWN_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSET_GROUP_DROP_DOWN_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createAssetSubGroup(action) {
  try {
    const assetsGroupData = yield call(createAssetSubGroupAPI, action.payload);
    if (assetsGroupData.success === true) {
      const msg = assetsGroupData?.[0];
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Asset SubGroup is Created',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_CREATE_ASSET_SUB_GROUP_SUCCESSED,
        data: assetsGroupData,
      });
      yield put(getAssetSubGroupList({ queryItem: action.payload.queryItem }))
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_CREATE_ASSET_SUB_GROUP_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteAssetSubGroup(action) {
  try {
    const response = yield call(deleteAssetsSubGroupAPI, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_DELETE_ASSETS_GROUPS_SUCCESSED,
        data: response,
      });
      const msg = response?.[0];
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Asset-sub-group deleted successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getAssetSubGroupList({ queryItem: action.payload.queryItem }))
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_DELETE_ASSETS_GROUPS_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* editAssetSubGroup(action) {
  try {
    const assetsGroupData = yield call(editAssetSubGroupAPI, action.payload);
    if (assetsGroupData.success === true) {
      yield put({
        type: ADMINISTRATION_EDIT_ASSET_SUB_GROUP_SUCCESSED,
        data: assetsGroupData,
      });
      const msg = assetsGroupData?.[0];
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Asset-sub-group updated successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getAssetSubGroupList({ queryItem: action.payload.queryItem }))
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_EDIT_ASSET_SUB_GROUP_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* duplicateWorkFlow(action) {
  try {
    const duplicateData = yield call(
      administrationDuplicateAPI,
      action.payload
    );

    if (duplicateData.success === true) {
      yield put({
        type: ADMINISTRATION_WORKFLOW_DUPLICATE_SUCCESSED,
        data: duplicateData?.data,
      });
      const msg = duplicateData?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Workflow Duplicated',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getWorkflowList({ queryItem: action.payload.query }))
    } else {
      yield put({
        type: ADMINISTRATION_WORKFLOW_DUPLICATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_WORKFLOW_DUPLICATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteWorkFlow(action) {
  try {
    const response = yield call(administrationDeleteAPI, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_WORKFLOW_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data?.message || 'Workflow successfully Deleted',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getWorkflowList({ queryItem: action.payload.query }))
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_WORKFLOW_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* workFlowCategoryList(action) {
  try {
    const deleteWorkFlow = yield call(
      administrationWorkflowCategoryListAPI,
      action.payload
    );

    if (deleteWorkFlow.success === true) {
      yield put({
        type: ADMINISTRATION_WORKFLOW_CATEGORY_SUCCESSED,
        data: deleteWorkFlow?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_WORKFLOW_CATEGORY_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_WORKFLOW_CATEGORY_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* workFlowSubCategoryList(action) {
  try {
    const deleteWorkFlow = yield call(
      administrationWorkflowSubCategoryListAPI,
      action.payload
    );

    if (deleteWorkFlow.success === true) {
      yield put({
        type: ADMINISTRATION_WORKFLOW_SUB_CATEGORY_SUCCESSED,
        data: deleteWorkFlow?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_WORKFLOW_SUB_CATEGORY_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_WORKFLOW_SUB_CATEGORY_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* workFlowTaskCategoryList(action) {
  try {
    const deleteWorkFlow = yield call(
      administrationWorkflowTaskCategoryListAPI,
      action.payload
    );

    if (deleteWorkFlow.success === true) {
      yield put({
        type: ADMINISTRATION_WORKFLOW_TASK_CATEGORY_SUCCESSED,
        data: deleteWorkFlow?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_WORKFLOW_TASK_CATEGORY_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_WORKFLOW_TASK_CATEGORY_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createWorkFlow(action) {
  try {
    const response = yield call(
      administrationCreateWorkflowTaskAPI,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_WORKFLOW_CREATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Workflow Created',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getWorkflowList({ queryItem: action.payload.query }))
    } else {
      yield put({
        type: ADMINISTRATION_WORKFLOW_CREATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_WORKFLOW_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* riskManagementThreatRegister(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'riskManagementThreatRegister',
    };
    const workflowData = yield call(administrationListAPI, payload);

    if (workflowData.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* updateWorkFlow(action) {
  try {
    const updateWorkFlow = yield call(
      administrationUpdateWorkflowTaskAPI,
      action.payload
    );
    if (updateWorkFlow.success === true) {
      yield put({
        type: ADMINISTRATION_WORKFLOW_UPDATE_SUCCESSED,
        data: updateWorkFlow?.data,
      });
      const msg = updateWorkFlow?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Workflow Updated',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getWorkflowList({ queryItem: action.payload.query }))
    } else {
      yield put({
        type: ADMINISTRATION_WORKFLOW_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_WORKFLOW_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetValueList(action) {
  try {
    const assetsValueList = yield call(assetsValueTabAPI, action.payload);
    if (assetsValueList.success === true) {
      yield put({
        type: ADMINISTRATION_ASSET_VALUE_LIST_SUCCESSED,
        data: assetsValueList,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ASSET_VALUE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSET_VALUE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetConfidentiality(action) {
  try {
    const response = yield call(assetConfidentialityApi, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ASSET_CONFIDENTIALUITY_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ASSET_CONFIDENTIALUITY_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSET_CONFIDENTIALUITY_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetClassificationTitleChange(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(classificationTitleChange, action.payload);
    if (response.success === true) {
      yield put(getAllTabbsHeading('assetsClassification'));
      yield put({
        type: ASSET_CLASSIFICATION_CHANGE_TITLE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Change Title Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ASSET_CLASSIFICATION_CHANGE_TITLE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ASSET_CLASSIFICATION_CHANGE_TITLE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetClassificationFormulaChange(action) {
  try {
    const response = yield call(classificationFormulaChange, action.payload);
    if (response.success === true) {
      yield put({
        type: ASSET_CLASSIFICATION_FORMULA_CHANGE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Formula Update Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ASSET_CLASSIFICATION_FORMULA_CHANGE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ASSET_CLASSIFICATION_FORMULA_CHANGE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* getAssetClassificationgFormula() {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(classificationGetFormula);
    if (response.success === true) {
      yield put({
        type: ASSET_CLASSIFICATION_GET_FORMULA_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ASSET_CLASSIFICATION_GET_FORMULA_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ASSET_CLASSIFICATION_GET_FORMULA_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetIntegrity(action) {
  try {
    const response = yield call(assetIntegrityApi, action.payload);
    if (response.success === true) {
      yield put({
        type: ASSET_CLASSIFICATION_INTEGIRTY_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ASSET_CLASSIFICATION_INTEGIRTY_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ASSET_CLASSIFICATION_INTEGIRTY_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateIntegrity(action) {
  try {
    const response = yield call(updateIntegrityApi, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: ASSET_CLASSIFICATION_INTEGIRTY_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Integirty Update Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getIntegirtyListRequest({ queryItem: action.query }));
    } else {
      yield put({
        type: ASSET_CLASSIFICATION_INTEGIRTY_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ASSET_CLASSIFICATION_INTEGIRTY_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteIntegrity(action) {
  try {
    const response = yield call(deleteIntegrityApi, action.id);
    if (response.success === true) {
      yield put({
        type: ASSET_CLASSIFICATION_INTEGIRTY_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Integirty Delete Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getIntegirtyListRequest({ queryItem: action.query }));
    } else {
      yield put({
        type: ASSET_CLASSIFICATION_INTEGIRTY_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ASSET_CLASSIFICATION_INTEGIRTY_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* createIntegrity(action) {
  try {
    const response = yield call(createIntegrityApi, action.payload);
    if (response.success === true) {
      yield put({
        type: ASSET_CLASSIFICATION_INTEGIRTY_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Integirty Create Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getIntegirtyListRequest({ queryItem: action.query }));
    } else {
      yield put({
        type: ASSET_CLASSIFICATION_INTEGIRTY_CREATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ASSET_CLASSIFICATION_INTEGIRTY_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetAvailability(action) {
  try {
    const response = yield call(assetAvailabilityApi, action.payload);
    if (response.success === true) {
      yield put({
        type: ASSET_CLASSIFICATION_AVAILABILITY_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ASSET_CLASSIFICATION_AVAILABILITY_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ASSET_CLASSIFICATION_AVAILABILITY_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateAvailability(action) {
  try {
    const response = yield call(updateAvailabilityApi, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: ASSET_CLASSIFICATION_AVAILABILITY_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Asset Availability Update Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getAvaiabilityListRequest({ queryItem: action.query }));
    } else {
      yield put({
        type: ASSET_CLASSIFICATION_AVAILABILITY_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ASSET_CLASSIFICATION_AVAILABILITY_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createAvailability(action) {
  try {
    const response = yield call(createAvailabilityApi, action.payload);
    if (response.success === true) {
      yield put({
        type: ASSET_CLASSIFICATION_AVAILABILITY_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Asset Availability Create Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getAvaiabilityListRequest({ queryItem: action.query }));
    } else {
      yield put({
        type: ASSET_CLASSIFICATION_AVAILABILITY_CREATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ASSET_CLASSIFICATION_AVAILABILITY_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteAvailability(action) {
  try {
    const response = yield call(deleteAvailabilityApi, action.id);
    if (response.success === true) {
      yield put({
        type: ASSET_CLASSIFICATION_AVAILABILITY_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Asset Availability Delete Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getAvaiabilityListRequest({ queryItem: action.query }));
    } else {
      yield put({
        type: ASSET_CLASSIFICATION_AVAILABILITY_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ASSET_CLASSIFICATION_AVAILABILITY_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* updateConfidentiality(action) {
  try {
    const response = yield call(updateConfidentialityApi, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ASSET_CONFIDENTIALUITY_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put(assetConfidentialityList({ queryItem: action.payload.query }))
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Confidentiality Update Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_ASSET_CONFIDENTIALUITY_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSET_CONFIDENTIALUITY_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createConfidentiality(action) {
  try {
    const response = yield call(createConfidentialityApi, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ASSET_CONFIDENTIALUITY_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put(assetConfidentialityList({ queryItem: action.payload.query }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Confidentiality Created Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_ASSET_CONFIDENTIALUITY_CREATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSET_CONFIDENTIALUITY_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* deleteConfidentiality(action) {
  // debugger;
  try {
    const response = yield call(deleteConfidentialityApi, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ASSET_CONFIDENTIALUITY_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put(assetConfidentialityList({ queryItem: action.query }))
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Confidentiality Delete Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_ASSET_CONFIDENTIALUITY_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSET_CONFIDENTIALUITY_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createAssetValue(action) {
  try {
    const response = yield call(
      createAssetValueAPI,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CREATE_ASSET_VALUE_LIST_SUCCESSED,
        data: response?.data,
      });
      yield put(getAssetValueList({ queryItem: action.payload.queryItem }))
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Create Asset Value Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_CREATE_ASSET_VALUE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CREATE_ASSET_VALUE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* editAssetsValue(action) {
  try {
    const response = yield call(editAssetValueAPI, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_EDIT_ASSET_VALUE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Update Asset Value Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getAssetValueList({ queryItem: action.payload.queryItem }))
    } else {
      yield put({
        type: ADMINISTRATION_EDIT_ASSET_VALUE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_EDIT_ASSET_VALUE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}



export function* deleteAssetsValue(action) {
  try {
    const assetsValueData = yield call(deleteAssetsValueAPI, action.payload);
    if (assetsValueData.success === true) {
      yield put({
        type: ADMINISTRATION_DELETE_ASSET_VALUE_SUCCESSED,
        data: assetsValueData,
      });
      yield put(getAssetValueList({ queryItem: action.payload.queryItem }))
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Delete asset Value Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_DELETE_ASSET_VALUE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_DELETE_ASSET_VALUE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* changeAssetValueTitle(action) {
  try {
    const assetsEditTitleValueData = yield call(
      editAssetTitleValueAPI,
      action.payload
    );
    if (assetsEditTitleValueData.success === true) {
      yield put(getAllTabbsHeading('assetsValue'));
      yield put({
        type: ADMINISTRATION_CHANGE_TITLE_ASSET_VALUE_SUCCESSED,
        data: assetsEditTitleValueData,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Change Title Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_CHANGE_TITLE_ASSET_VALUE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CHANGE_TITLE_ASSET_VALUE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetOsList(action) {
  try {
    // yield put({ type: SHOW_LOADER });
    const assetsOsListData = yield call(assetsOsListAPI, action?.payload);
    if (assetsOsListData.success === true) {
      yield put({
        type: ADMINISTRATION_GET_OPERATING_SYSTEM_LIST_SUCCESSED,
        data: assetsOsListData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_OPERATING_SYSTEM_LIST_FAILED,
        data: null,
      });
    }
    // yield put({ type: HIDE_LOADER });
  } catch (err) {
    // yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_GET_OPERATING_SYSTEM_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createOperatingSystem(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const assetsCreateValueData = yield call(
      createOperatingSystemAPI,
      action.payload
    );
    if (assetsCreateValueData.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Operating System created successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        getAssetOperatingSystemList({ queryItem: action.queryItem })
      );

      if (assetsOsListData.success === true) {
        yield put({
          type: ADMINISTRATION_GET_OPERATING_SYSTEM_LIST_SUCCESSED,
          data: assetsOsListData,
        });
      } else {
        yield put({
          type: ADMINISTRATION_CREATE_OPERATING_SYSTEM_FAILED,
          data: null,
        });
      }

      yield put({
        type: ADMINISTRATION_CREATE_OPERATING_SYSTEM_SUCCESSED,
        data: assetsCreateValueData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CREATE_OPERATING_SYSTEM_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CREATE_OPERATING_SYSTEM_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* editOperatingSystem(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const assetsEditOsData = yield call(editAssetOsAPI, action.payload);
    if (assetsEditOsData.success === true) {
      const assetsOsListData = yield call(assetsOsListAPI, {
        queryItem: action.payload.queryItem,
      });
      if (assetsOsListData.success === true) {
        yield put({
          type: SET_FEEDBACK_ALERT,
          payload: {
            feedbackMessage: 'Operating System updated successfully',
            feedbackType: 'success',
            module: 'administration',
          },
        });

        yield put(
          getAssetOperatingSystemList({ queryItem: action.queryItem })
        );
      } else {
        yield put({
          type: ADMINISTRATION_EDIT_OPERATING_SYSTEM_FAILED,
          data: null,
        });
      }

      yield put({
        type: ADMINISTRATION_EDIT_OPERATING_SYSTEM_SUCCESSED,
        data: assetsEditOsData,
      });
      yield put({ type: HIDE_LOADER });
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_EDIT_OPERATING_SYSTEM_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_EDIT_OPERATING_SYSTEM_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteOperatingSystem(action) {
  try {
    const assetsValueData = yield call(deleteOsAPI, action.payload);
    if (assetsValueData.success === true) {
      const assetsOsListData = yield call(assetsOsListAPI, {
        queryItem: action.payload.queryItem,
      });
      if (assetsOsListData.success === true) {
        yield put({
          type: SET_FEEDBACK_ALERT,
          payload: {
            feedbackMessage: 'Operating System deleted successfully',
            feedbackType: 'success',
            module: 'administration',
          },
        });

        yield put({
          type: ADMINISTRATION_GET_OPERATING_SYSTEM_LIST_SUCCESSED,
          data: assetsOsListData,
        });
      } else {
        yield put({
          type: ADMINISTRATION_DELETE_ASSET_VALUE_FAILED,
          data: null,
        });
      }

      yield put({
        type: ADMINISTRATION_DELETE_ASSET_VALUE_SUCCESSED,
        data: assetsValueData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_DELETE_ASSET_VALUE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_DELETE_ASSET_VALUE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* riskManagementThreatResisterValueList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'riskManagementThreatRegister',
    };
    const valueList = yield call(threatRegisterValueApi, payload);

    if (valueList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VALUE_SUCCESSED,
        data: valueList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VALUE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VALUE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* riskManagementThreatResisterVulnerabilityList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'riskManagementThreatRegister',
    };
    // yield put({ type: SHOW_LOADER });
    const valueList = yield call(threatRegisterVulnerabilityApi, payload);

    if (valueList.success === true) {
      // debugger;
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VULNERABILITY_SUCCESSED,
        data: valueList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VULNERABILITY_FAILED,
        data: null,
      });
    }
  } catch (err) {
    // yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VULNERABILITY_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createRiskManagementThreatRegister(action) {
  // debugger;
  try {
    const payload = {
      payload: action.payload,
      tabName: 'riskManagementThreatRegister',
    };
    yield put({ type: SHOW_LOADER });
    const createList = yield call(
      createRiskManagementThreatRegisterAPI,
      payload
    );

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_SUCCESSED,
        data: createList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: createList?.data[1],
          feedbackType: 'success',
          module: 'Administrator',
        },
      });
      yield put({ type: HIDE_LOADER });
      yield put(riskManagementThreatRegisterList({ queryItem: action.query }))
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_FAILED,
        data: null,
      });

    }
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_FAILED,
      data: err?.response?.data?.data,
    });

    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error While creating thread register',
        feedbackType: 'error',
        module: 'Administrator',
      },
    });
  }
}




export function* updateRiskManagementThreatRegister(action) {
  try {
    const payload = {
      payload: action.payload,
      tabName: 'riskManagementThreatRegister',
    };


    yield put({ type: SHOW_LOADER });
    const updateList = yield call(
      updateRiskManagementThreatRegisterAPI,
      payload
    );

    if (updateList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_UPDATE_SUCCESSED,
        data: updateList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: updateList?.data[1],
          feedbackType: updateList?.data[0],
          module: 'Administrator',
        },
      });
      yield put({ type: HIDE_LOADER });
      yield put(riskManagementThreatRegisterList({ queryItem: action.query }))
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_UPDATE_FAILED,
        data: null,
      });
      // yield put({
      //   type: SET_FEEDBACK_ALERT,
      //   payload: {
      //     feedbackMessage: updateList?.data[1],
      //     feedbackType: updateList?.data[0],
      //     module: 'Administrator',
      //   },
      // });

    }
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });

    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error While updating thread register',
        feedbackType: 'error',
        module: 'Administrator',
      },
    });
  }
}

export function* deleteRiskManagementThreatRegister(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'riskManagementThreatRegister',
    };
    yield put({ type: SHOW_LOADER });
    const createList = yield call(
      deleteRiskManagementThreatRegisterAPI,
      payload
    );

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_SUCCESSED,
        data: createList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: createList?.data[1],
          feedbackType: createList?.data[0],
          module: 'Administrator',
        },
      });
      yield put({ type: HIDE_LOADER });
      yield put(riskManagementThreatRegisterList({ queryItem: action.payload.query }))
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_FAILED,
        data: null,
      });

    }
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_FAILED,
      data: err?.response?.data?.data,
    });

    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error While deleting thread register',
        feedbackType: 'error',
        module: 'Administrator',
      },
    });
  }
}

export function* riskManagementThreatValue(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'riskManagementThreatValue',
    };
    const workflowData = yield call(administrationListAPI, payload);

    if (workflowData.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* riskManagementControlRegister(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'riskManagementControlRegister',
    };
    const workflowData = yield call(administrationListAPI, payload);

    if (workflowData.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createRiskManagementThreatValue(action) {
  try {
    //  debugger;
    const payload = {
      payload: action.payload,
      tabName: 'riskManagementThreatValue',
    };
    yield put({ type: SHOW_LOADER });
    const createList = yield call(
      createRiskManagementThreatRegisterAPI,
      payload
    );

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_SUCCESSED,
        data: createList?.data,
      });

      yield put({ type: HIDE_LOADER });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Threat value created successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementThreatValueList({ queryItem: action.query }))
    } else {

      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_FAILED,
        data: null,
      });
      yield put({ type: HIDE_LOADER });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while creating threat value',
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while creating threat value',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* deleteRiskManagementThreatValue(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'riskManagementThreatValue',
    };
    yield put({ type: SHOW_LOADER });
    const createList = yield call(
      deleteRiskManagementThreatRegisterAPI,
      payload
    );

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_SUCCESSED,
        data: createList?.data,
      });
      yield put({ type: HIDE_LOADER });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Threat value deleted successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementThreatValueList({ queryItem: action.query }))
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({ type: HIDE_LOADER });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while creating threat value',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* updateRiskManagementThreatValue(action) {
  try {
    const payload = {
      payload: action.payload,
      id: action.id,
      tabName: 'riskManagementThreatValue',
    };
    yield put({ type: SHOW_LOADER });
    const createList = yield call(updateRiskManagementAPI, payload);

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_SUCCESSED,
        data: createList?.data,
      });
      yield put({ type: HIDE_LOADER });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Threat value updated successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementThreatValueList({ queryItem: action.query }))
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });

    yield put({ type: HIDE_LOADER });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while creating threat value',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* createRiskManagementControlRegister(action) {
  try {
    const payload = {
      payload: action.payload,
      tabName: 'riskManagementControlRegister',
    };
    yield put({ type: SHOW_LOADER });
    const createList = yield call(
      createRiskManagementThreatRegisterAPI,
      payload
    );

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VULNERABILITY_SUCCESSED,
        data: createList?.data,
      });
      yield put({ type: HIDE_LOADER });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Control register created successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementControlRegisterList({ queryItem: action.query }))
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_FAILED,
        data: null,
      });
    }
  } catch (err) {

    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({ type: HIDE_LOADER });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while creating control register',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* updateRiskManagementControlRegister(action) {
  // debugger;
  try {
    const payload = {
      payload: action.payload,
      id: action.id,
      tabName: 'riskManagementControlRegister',
    };
    yield put({ type: SHOW_LOADER });
    const createList = yield call(
      updateRiskManagementThreatRegisterAPI,
      payload
    );

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_SUCCESSED,
        data: createList?.data,
      });
      yield put({ type: HIDE_LOADER });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Control register updated successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementControlRegisterList({ queryItem: action.query }))
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while updating control register',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteRiskManagementControlRegister(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'riskManagementControlRegister',
    };
    yield put({ type: SHOW_LOADER });
    const createList = yield call(
      deleteRiskManagementThreatRegisterAPI,
      payload
    );

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_SUCCESSED,
        data: createList?.data,
      });
      yield put({ type: HIDE_LOADER });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Control register deleted successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementControlRegisterList({ queryItem: action.query }))
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while deleting control register',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* riskManagementBusinessImpact(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'riskManagementBusinessImpact',
    };
    const workflowData = yield call(administrationListAPI, payload);

    if (workflowData.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteRiskManagementBusinessImpact(action) {
  yield put({ type: SHOW_LOADER });
  try {
    const payload = {
      id: action.payload,
      tabName: 'riskManagementBusinessImpact',
    };
    const createList = yield call(
      deleteRiskManagementThreatRegisterAPI,
      payload
    );

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_SUCCESSED,
        data: createList?.data,
      });
      yield put({ type: HIDE_LOADER });
      yield put(riskManagementBusinessImpactList({ queryItem: action.query }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: createList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_FAILED,
        data: null,
      });

    }
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while deleting business impact',
        feedbackType: 'success',
        module: 'administration',
      },
    });
  }
}

export function* createRiskManagementBusinessImpact(action) {
  yield put({ type: SHOW_LOADER });
  try {
    const payload = {
      payload: action.payload,
      tabName: 'riskManagementBusinessImpact',
    };
    const createList = yield call(
      createRiskManagementThreatRegisterAPI,
      payload
    );

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VULNERABILITY_SUCCESSED,
        data: createList?.data,
      });

      yield put({ type: HIDE_LOADER });
      yield put(riskManagementBusinessImpactList({ queryItem: action.query }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: createList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });

    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while creating business impact',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while creating business impact',
        feedbackType: 'success',
        module: 'administration',
      },
    });
  }
}

export function* updateRiskManagementBusinessImpact(action) {
  yield put({ type: SHOW_LOADER });
  try {
    const payload = {
      payload: action.payload,
      id: action.id,
      tabName: 'riskManagementBusinessImpact',
    };
    const createList = yield call(
      updateRiskManagementThreatRegisterAPI,
      payload
    );

    if (createList.success === true) {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_SUCCESSED,
        data: createList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: createList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementBusinessImpactList({ queryItem: action.query }));
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while updating business impact',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while updating business impact',
        feedbackType: 'success',
        module: 'administration',
      },
    });
  }
}

export function* RiskManagementBusinessImpactChangeTitle(action) {
  try {
    const title = yield call(RiskManagementBusinesImpactChangeTitleAPI, action);

    if (title.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Compliance created successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_CHANGE_TITLE_SUCCESSED,
        data: title?.data,
      });
      yield put(getAllTabbsHeading('businessImpact'));
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_CHANGE_TITLE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_CHANGE_TITLE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* riskManagementCompliance(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'riskManagementCompliance',
    };
    const workflowData = yield call(administrationListAPI, payload);

    if (workflowData.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createRiskManagementCompliance(action) {
  try {
    const payload = {
      payload: action.payload,
      tabName: 'riskManagementCompliance',
    };
    const createList = yield call(
      createRiskManagementThreatRegisterAPI,
      payload
    );

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VULNERABILITY_SUCCESSED,
        data: createList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Compliance created successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementComplianceList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while crearing compliance',
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: err || 'Error while crearing compliance',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* deleteRiskManagementCompliance(action) {
  try {
    const payload = {
      id: action.payload,
      tabName: 'riskManagementCompliance',
    };
    const deleteList = yield call(
      deleteRiskManagementThreatRegisterAPI,
      payload
    );

    if (deleteList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_SUCCESSED,
        data: deleteList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Compliance deleted successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementComplianceList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while deleting compliance',
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while deleting compliance',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* updateRiskManagementCompliance(action) {
  try {
    const payload = {
      payload: action.payload,
      id: action.id,
      tabName: 'riskManagementCompliance',
    };
    const updateList = yield call(
      updateRiskManagementThreatRegisterAPI,
      payload
    );

    if (updateList.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_SUCCESSED,
        data: updateList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Compliance updated successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementComplianceList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while updating compliance',
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while updating compliance',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* automationVendors(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationVendorsList',
    };
    const workflowData = yield call(automationListAPI, payload);

    if (workflowData.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createAutomationVendors(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationVendorsList',
    };
    const createList = yield call(automationCreateListAPI, payload);
    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_SUCCESSED,
        data: createList?.data,
      });
      const msg = createList?.data?.[0]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Automation successfully Created',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationVendorsList({ queryItem: action.payload.query }))
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'success',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateAutomationVendors(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationVendorsList',
    };
    const updateList = yield call(automationUpdateListAPI, payload);

    if (updateList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_SUCCESSED,
        data: updateList?.data,
      });
      const msg = updateList?.data?.[0]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Automation successfully Updated',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationVendorsList({ queryItem: action.payload.query }))
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteAutomationVendors(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationVendorsList',
    };
    const deleteList = yield call(
      deleteRiskManagementThreatRegisterAPI,
      payload
    );
    if (deleteList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_SUCCESSED,
        data: deleteList?.data,
      });
      const msg = deleteList?.data?.message
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Automation successfully Deleted',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationVendorsList({ queryItem: action.payload.query }))
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* automationPublishers(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationPublishers',
    };
    const response = yield call(automationListAPI, payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createAutomationPublishers(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationPublishers',
    };
    const createList = yield call(automationCreateListAPI, payload);
    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_SUCCESSED,
        data: createList?.data,
      });
      yield put(automationPublishersList({ queryItem: action.query }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Publishers created successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Somthing Went Wrong',
        feedbackType: 'success',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateAutomationPublishers(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationPublishers',
    };
    const updateList = yield call(automationUpdateListAPI, payload);

    if (updateList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_SUCCESSED,
        data: updateList?.data,
      });
      yield put(automationPublishersList({ queryItem: action.query }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Publishers Updated successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Somthing Went Wrong',
        feedbackType: 'success',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteAutomationPublishers(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationPublishers',
    };
    const deleteList = yield call(
      deleteRiskManagementThreatRegisterAPI,
      payload
    );
    if (deleteList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_SUCCESSED,
        data: deleteList?.data,
      });
      yield put(automationPublishersList({ queryItem: action.query }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Publishers Deleted successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Somthing Went Wrong',
        feedbackType: 'success',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* automationActionIO(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationActionsIO',
    };
    const workflowData = yield call(automationListAPI, payload);

    if (workflowData.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* watchautomationActionDuplication(action) {
  try {
    const response = yield call(automationActionDuplication, action.id);
    if (response.success === true) {
      yield put({
        type: AUTOMATION_ACTION_DUPLICATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Action is Duplicated',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationActionsLists({ queryItem: action.query }));
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: AUTOMATION_ACTION_DUPLICATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* createAutomationActionIO(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationActionsIO',
    };
    const createList = yield call(automationCreateListAPI, payload);
    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_SUCCESSED,
        data: createList?.data,
      });
      yield put(automationActionIOList({ queryItem: action.payload.query }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Action IO created successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Somthing Went Wrong',
        feedbackType: 'success',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* automationActionIOValidationList(action) {
  try {
    const createList = yield call(automationActionIOValidationListAPI);

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_ACTIONIO_VALIDATION_LIST_SUCCESSED,
        data: createList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_ACTIONIO_VALIDATION_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_ACTIONIO_VALIDATION_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateAutomationActionsIO(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationActionsIO',
    };
    const updateList = yield call(automationUpdateListAPI, payload);

    if (updateList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_SUCCESSED,
        data: updateList?.data,
      });
      yield put(automationActionIOList({ queryItem: action.payload.query }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Action IO Updated successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Somthing Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteAutomationActionsIO(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationActionsIO',
    };
    const deleteList = yield call(
      deleteRiskManagementThreatRegisterAPI,
      payload
    );

    if (deleteList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_SUCCESSED,
        data: deleteList?.data,
      });
      yield put(automationActionIOList({ queryItem: action.payload.query }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Action IO Deleted successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Somthing Went Wrong',
        feedbackType: 'success',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* automationThreat(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationThreat',
    };
    const workflowData = yield call(automationListAPI, payload);

    if (workflowData.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteAutomationThreat(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationThreat',
    };
    const deleteList = yield call(
      deleteRiskManagementThreatRegisterAPI,
      payload
    );
    if (deleteList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_SUCCESSED,
        data: deleteList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Automation Threat Deleted successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationThreatList({ queryItem: action.payload.query }));
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Somthing Went Wrong',
        feedbackType: 'success',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createAutomationThreat(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationThreat',
    };
    const createList = yield call(automationCreateListAPI, payload);
    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_SUCCESSED,
        data: createList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Automation Threat Created successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationThreatList({ queryItem: action.payload.query }));
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Automation Threat Created successfully',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateAutomationThreat(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationThreat',
    };
    const updateList = yield call(automationUpdateListAPI, payload);

    if (updateList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_SUCCESSED,
        data: updateList?.data,
      });
      yield put(automationThreatList({ queryItem: action.payload.query }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Automation Threat Updated successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* automationFamily(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationFamily',
    };
    const workflowData = yield call(automationListAPI, payload);

    if (workflowData.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteAutomationFamily(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationFamily',
    };
    const deleteList = yield call(
      deleteRiskManagementThreatRegisterAPI,
      payload
    );

    if (deleteList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_SUCCESSED,
        data: deleteList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Automation Threat Deleted successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationFamilyList({ queryItem: action.payload.query }));
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createAutomationFamily(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationFamily',
    };
    const createList = yield call(automationCreateListAPI, payload);
    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_SUCCESSED,
        data: createList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Automation Threat Created successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationFamilyList({ queryItem: action.payload.query }));
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateAutomationFamily(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationFamily',
    };
    const updateList = yield call(automationUpdateListAPI, payload);

    if (updateList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_SUCCESSED,
        data: updateList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Automation Threat Updated successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationFamilyList({ queryItem: action.payload.query }));
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* assetDepartmentList(action) {
  try {
    const assetsValueList = yield call(assetsDepartmentListAPI, action.payload);
    if (assetsValueList.success === true) {
      yield put({
        type: ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_SUCCESSED,
        data: assetsValueList,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createAssetDepartment(action) {
  try {
    const assetsCreateDepartmentData = yield call(
      createAssetDepartmentAPI,
      action.payload
    );
    if (assetsCreateDepartmentData.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Department created successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({ type: SHOW_LOADER });
      const assetsValueList = yield call(assetsDepartmentListAPI, {
        queryItem: action.payload.queryItem,
      });
      if (assetsValueList.success === true) {
        yield put({
          type: ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_SUCCESSED,
          data: assetsValueList,
        });
      } else {
        yield put({
          type: ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_FAILED,
          data: null,
        });
      }
      yield put({
        type: ADMINISTRATION_CREATE_ASSET_VALUE_LIST_SUCCESSED,
        data: assetsCreateDepartmentData,
      });
      yield put({ type: HIDE_LOADER });
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_CREATE_ASSET_VALUE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CREATE_ASSET_VALUE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* editAssetDepartment(action) {
  try {
    const assetsEditDepartmentData = yield call(
      editAssetDepartmentAPI,
      action.payload
    );
    if (assetsEditDepartmentData.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Department updated successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({ type: SHOW_LOADER });
      const assetsValueList = yield call(assetsDepartmentListAPI, {
        queryItem: action.payload.queryItem,
      });
      yield put({ type: SHOW_LOADER });
      if (assetsValueList.success === true) {
        yield put({
          type: ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_SUCCESSED,
          data: assetsValueList,
        });
      } else {
        yield put({
          type: ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_FAILED,
          data: null,
        });
      }

      yield put({
        type: ADMINISTRATION_EDIT_DEPARTMENT_SUCCESSED,
        data: assetsEditDepartmentData,
      });
      yield put({ type: HIDE_LOADER });
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_EDIT_DEPARTMENT_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_EDIT_DEPARTMENT_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteAssetDepartment(action) {
  try {
    const assetsValueData = yield call(
      deleteAssetDepartmentAPI,
      action.payload
    );
    if (assetsValueData.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Department deleted successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({ type: SHOW_LOADER });
      const assetsValueList = yield call(assetsDepartmentListAPI, {
        queryItem: action.payload.queryItem,
      });
      if (assetsValueList.success === true) {
        yield put({
          type: ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_SUCCESSED,
          data: assetsValueList,
        });
      } else {
        yield put({
          type: ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_FAILED,
          data: null,
        });
      }

      yield put({
        type: ADMINISTRATION_DELETE_DEPARTMENT_SUCCESSED,
        data: assetsValueData,
      });
      yield put({ type: HIDE_LOADER });
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_DELETE_DEPARTMENT_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_DELETE_DEPARTMENT_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchContainerList() {
  try {
    // yield put({ type: SHOW_LOADER });
    const containerList = yield call(getContainerList);

    if (containerList.success === true) {
      yield put({ type: ADMINISTRATION_CASES_CONTAINER_LIST_SUCCESS, data: containerList?.data });
      // openNotification('Case has been deleted Successfully');
      // yield put(listCases(action.pageNo));

    } else {
      yield put({ type: ADMINISTRATION_CASES_CONTAINER_LIST_FAILDED, data: null });
    }
    // yield put({ type: HIDE_LOADER });
  } catch (err) {
    // yield put({ type: HIDE_LOADER });
    yield put({ type: ADMINISTRATION_CASES_CONTAINER_LIST_FAILDED, data: err?.response?.data?.data });
  }
}

export function* watchCasesDisposition(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const despositionList = yield call(getCasesDespositionList, action.name);

    if (despositionList.success === true) {
      yield put({ type: ADMINISTRATION_CASES_DESPOSITION_SUCCESS, data: despositionList?.data });
      // openNotification('Case has been deleted Successfully');
      // yield put(listCases(action.pageNo));

    } else {
      yield put({ type: ADMINISTRATION_CASES_DESPOSITION_FAILED, data: null });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({ type: ADMINISTRATION_CASES_DESPOSITION_FAILED, data: err?.response?.data?.data });
  }
}

export function* watchCasesCategoriesList(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const categoryList = yield call(getCasesCategoriesList, action.name);

    if (categoryList.success === true) {
      yield put({ type: ADMINISTRATION_CASES_CATEGORY_SUCCESS, data: categoryList?.data });
      // openNotification('Case has been deleted Successfully');
      // yield put(listCases(action.pageNo));

    } else {
      yield put({ type: ADMINISTRATION_CASES_CATEGORY_FAILED, data: null });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({ type: ADMINISTRATION_CASES_CATEGORY_FAILED, data: err?.response?.data?.data });
  }
}


export function* watchCasesCategory(action) {
  try {
    const response = yield call(administratorCasesCategory, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_CATEGORY_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_CATEGORY_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_CATEGORY_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesCategoryDisposition() {
  try {
    const response = yield call(administratorCasesDispositionsItem);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_CATEGORY_DISPOSITION_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_CATEGORY_DISPOSITION_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_CATEGORY_DISPOSITION_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesCategoryUpdate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesCategoryUpdate,
      action.id,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_CATEGORY_UPDATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Update CasesCategory Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorCasesCategoriesList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_CATEGORY_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_CATEGORY_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesCategoryDelete(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(administratorCasesCategoryDelete, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_CATEGORY_DELETE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Delete CasesCategory Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorCasesCategoriesList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_CATEGORY_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_CATEGORY_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesCategoryCreate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesCategoryCreate,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_CATEGORY_CREATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Cases category successfully created',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorCasesCategoriesList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_CATEGORY_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_CATEGORY_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesSubCategory(action) {
  try {
    const response = yield call(administratorCasesSubCategory, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_SUBCATEGORY_LIST_SUCCESSED,
        data: response?.data,
      });

    } else {
      yield put({
        type: ADMINISTRATION_CASES_SUBCATEGORY_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_CATEGORY_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesSubCategoryCreate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesSubCategoryCreate,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Cases sub category successfully created',
          feedbackType: 'success',
          module: 'administration',
        },
      });

      yield put({
        type: ADMINISTRATION_CASES_SUB_CATEGORY_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Create CasesSubCategory Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesSubCategoriesList({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SUB_CATEGORY_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_SUB_CATEGORY_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}





export function* watchCasesSubCategoryUpdate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesSubCategoryUpdate,
      action.id,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Cases sub category successfully updated',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_CASES_SUB_CATEGORY_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Update CasesSubCategory Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesSubCategoriesList({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SUB_CATEGORY_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_SUB_CATEGORY_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesSubCategoryDelete(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(administratorCasesSubCategoryDelete, action.id);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Cases sub category successfully deleted',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_CASES_SUB_CATEGORY_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Delete CasesDeleteCategory Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesSubCategoriesList({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SUB_CATEGORY_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_SUB_CATEGORY_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesSubCategoryList() {
  try {
    const response = yield call(administratorCasesCategoryList);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_PRIMARY_CATEGORY_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_PRIMARY_CATEGORY_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_PRIMARY_CATEGORY_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesDispositionsList(action) {
  try {
    const response = yield call(
      administratorCasesDispositionsList,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_DISPOSITIONS_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_DISPOSITIONS_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_DISPOSITIONS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesDispositionDelete(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(administratorCasesDispositionDelete, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_DISPOSITION_DELETE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.message

      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Delete Cases Dispositions Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesDispositionsDataList({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_DISPOSITION_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_DISPOSITION_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesDispositionUpdate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesDispositionUpdate,
      action.id,
      action.payload
    );

    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_DISPOSITION_UPDATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[1];
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Update Cases Dispositions Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesDispositionsDataList({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_DISPOSITION_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_DISPOSITION_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesDispositionCreate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesDispositionCreate,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_DISPOSITION_CREATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Create Cases Dispositions Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesDispositionsDataList({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_DISPOSITION_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_DISPOSITION_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchSubDispositions(action) {
  try {
    const response = yield call(
      administratorCasesSubDispositionsList,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_SUB_DISPOSITION_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SUB_DISPOSITION_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_SUB_DISPOSITION_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchSubDispositionsDropDownList(action) {
  try {
    const response = yield call(administratorSubCasesDispositionDropdownList);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_SUB_DISPOSITION_DROPDOWN_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SUB_DISPOSITION_DROPDOWN_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_SUB_DISPOSITION_DROPDOWN_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesSubDispositionCreate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesSubDispositionCreate,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_SUB_DISPOSITION_CREATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Cases Sub-disposition successfully created',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorSubCasesDispositions({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SUB_DISPOSITION_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_SUB_DISPOSITION_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesSubDispositionUpdate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorSubCasesDispositionUpdate,
      action.id,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_SUB_DISPOSITION_UPDATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Cases Sub-disposition successfully update',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorSubCasesDispositions({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SUB_DISPOSITION_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_SUB_DISPOSITION_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesSubDispositionDelete(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesSubDispositionDelete,
      action.id
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_SUB_DISPOSITION_DELETE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.message
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Cases Sub-disposition successfully Delete',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorSubCasesDispositions({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SUB_DISPOSITION_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_SUB_DISPOSITION_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* getAssetBusinessGroupList(action) {
  try {
    const assetsBusinessGroupList = yield call(
      assetsBusinessGroupListAPI,
      action.payload
    );
    if (assetsBusinessGroupList.success === true) {
      yield put({
        type: ADMINISTRATION_ASSET_GET_BUSINESS_GROUP_LIST_SUCCESSED,
        data: assetsBusinessGroupList,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ASSET_GET_BUSINESS_GROUP_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSET_GET_BUSINESS_GROUP_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createAssetBusinessGroup(action) {
  try {
    const assetsCreateDepartmentData = yield call(
      createAssetBusinessGroupAPI,
      action.payload
    );
    if (assetsCreateDepartmentData.success === true) {
      yield put({
        type: ADMINISTRATION_ASSET_CREATE_BUSINESS_GROUP_LIST_SUCCESSED,
        data: assetsCreateDepartmentData,
      })
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Business Group created successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getAssetBusinessGroupAction({ queryItem: action.payload.query }));
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_ASSET_CREATE_BUSINESS_GROUP_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* editAssetBusinessGroup(action) {
  try {
    const assetsEditDepartmentData = yield call(
      editAssetBusinessGroupAPI,
      action.payload
    );
    if (assetsEditDepartmentData.success === true) {
      yield put({
        type: ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_LIST_SUCCESSED,
        data: assetsEditDepartmentData,
      });
    }
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Business Group Updated successfully',
        feedbackType: 'success',
        module: 'administration',
      },
    });
    yield put(getAssetBusinessGroupAction({ queryItem: action.payload.query }));
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteAssetBusinessGroup(action) {
  try {
    const assetsValueData = yield call(
      deleteAssetBusinessGroupAPI,
      action.payload
    );
    if (assetsValueData.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Business Group Deleted successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getAssetBusinessGroupAction({ queryItem: action.payload.query }));
      yield put({
        type: ADMINISTRATION_ASSET_DELETE_BUSINESS_GROUP_LIST_SUCCESSED,
        data: assetsValueData,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_ASSET_DELETE_BUSINESS_GROUP_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* editAssetBusinessGroupTitle(action) {
  try {
    const assetsEditDepartmentData = yield call(
      editAssetBusinessGroupTitleAPI,
      action.payload
    );
    if (assetsEditDepartmentData.success === true) {
      yield put(getAllTabbsHeading('assetsBussinessGroup'));
      yield put({
        type: ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_TITLE_SUCCESSED,
        data: assetsEditDepartmentData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_TITLE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_TITLE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* getAssetTypeList(action) {
  try {
    const assetsTypeList = yield call(assetsTypeListAPI, action.payload);
    if (assetsTypeList.success === true) {
      yield put({
        type: ADMINISTRATION_ASSET_TYPE_LIST_SUCCESSED,
        data: assetsTypeList,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ASSET_TYPE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ASSET_TYPE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createAssetTypeList(action) {
  try {
    const assetsCreateAssetTypeData = yield call(
      createAssetTypeAPI,
      action.payload
    );
    if (assetsCreateAssetTypeData.success === true) {
      if (assetsTypeList.success === true) {
        yield put({
          type: SET_FEEDBACK_ALERT,
          payload: {
            feedbackMessage: 'Asset-type created successfully',
            feedbackType: 'success',
            module: 'administration',
          },
        });
        yield put({
          type: ADMINISTRATION_ASSET_TYPE_LIST_SUCCESSED,
          data: assetsTypeList,
        });
        const assetsTypeList = yield call(assetsTypeListAPI, {
          queryItem: action.payload.queryItem,
        });
      } else {
        yield put({
          type: ADMINISTRATION_ASSET_TYPE_LIST_FAILED,
          data: null,
        });
      }

      yield put({
        type: ADMINISTRATION_CREATE_ASSET_TYPE_SUCCESSED,
        data: assetsCreateAssetTypeData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CREATE_ASSET_TYPE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CREATE_ASSET_TYPE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* editAssetTypeList(action) {
  try {
    const assetsEditAssetTypeData = yield call(
      editAssetTypeListAPI,
      action.payload
    );
    if (assetsEditAssetTypeData.success === true) {
      const assetsTypeList = yield call(assetsTypeListAPI, {
        queryItem: action.payload.queryItem,
      });
      if (assetsTypeList.success === true) {
        yield put({
          type: ADMINISTRATION_ASSET_TYPE_LIST_SUCCESSED,
          data: assetsTypeList,
        });
      } else {
        yield put({
          type: ADMINISTRATION_ASSET_TYPE_LIST_FAILED,
          data: null,
        });
      }

      yield put({
        type: ADMINISTRATION_EDIT_ASSET_TYPE_SUCCESSED,
        data: assetsEditAssetTypeData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_EDIT_ASSET_TYPE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_EDIT_ASSET_TYPE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteAssetType(action) {
  try {
    const assetsValueData = yield call(deleteAssetTypeAPI, action.payload);
    if (assetsValueData.success === true) {
      const assetsTypeList = yield call(assetsTypeListAPI, {
        queryItem: action.payload.queryItem,
      });
      if (assetsTypeList.success === true) {
        yield put({
          type: SET_FEEDBACK_ALERT,
          payload: {
            feedbackMessage: 'Delete Asset Type Successfully',
            feedbackType: 'success',
            module: 'administration',
          },
        });
        yield put({
          type: ADMINISTRATION_ASSET_TYPE_LIST_SUCCESSED,
          data: assetsTypeList,
        });
        yield put(getAssetTypeList({ queryItem: action.queryItem }));
      } else {
        yield put({
          type: ADMINISTRATION_ASSET_TYPE_LIST_FAILED,
          data: null,
        });
      }

      yield put({
        type: ADMINISTRATION_DELETE_ASSET_TYPE_SUCCESSED,
        data: assetsValueData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_DELETE_ASSET_TYPE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_DELETE_ASSET_TYPE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* editAssetTypeTitle(action) {
  try {
    const assetsEditDepartmentData = yield call(
      editAssetTypeTitleAPI,
      action.payload
    );
    if (assetsEditDepartmentData.success === true) {
      yield put(getAllTabbsHeading('assetsType'));
      yield put({
        type: ADMINISTRATION_EDIT_ASSET_TYPE_TITLE_SUCCESSED,
        data: assetsEditDepartmentData,
      });
    } else {
      yield put({
        type: ADMINISTRATION_EDIT_ASSET_TYPE_TITLE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_EDIT_ASSET_TYPE_TITLE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchvulnerabilityTechnical(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'technicalVulnerability',
    };
    const vulnerabilityList = yield call(vulnerabilityListAPI, payload);

    if (vulnerabilityList.success === true) {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_SUCCESSED,
        data: vulnerabilityList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_VULNERABILITY_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* getAssetDropDownList(action) {
  try {
    const assetsBusinessGroupList = yield call(
      assetsDropDownListAPI,
      action.payload
    );
    if (assetsBusinessGroupList.success === true) {
      yield put({
        type: ADMINISTRATION_GET_ASSET_TYPE_ASSET_DROP_DOWN_LIST_SUCCESSED,
        data: assetsBusinessGroupList,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_ASSET_TYPE_ASSET_DROP_DOWN_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_GET_ASSET_TYPE_ASSET_DROP_DOWN_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* getSubGroupDropDownList(action) {
  try {
    const assetsBusinessGroupList = yield call(
      subGroupDropDownListAPI,
      action.payload
    );
    if (assetsBusinessGroupList.success === true) {
      yield put({
        type: ADMINISTRATION_GET_ASSET_TYPE_SUBGROUP_DROP_DOWN_LIST_SUCCESSED,
        data: assetsBusinessGroupList,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_ASSET_TYPE_SUBGROUP_DROP_DOWN_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_GET_ASSET_TYPE_SUBGROUP_DROP_DOWN_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteTechnicalVulnerability(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'technicalVulnerability',
    };
    const deleteList = yield call(deleteVulnerabilityAPI, payload);

    if (deleteList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: deleteList.data.message,
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_SUCCESSED,
        data: deleteList?.data,
      });
      yield put(vulnerabilityTechnicalList());
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* getOwnerDropDownList(action) {
  try {
    const assetsBusinessGroupList = yield call(
      ownerDropDownListAPI,
      action.payload
    );
    if (assetsBusinessGroupList.success === true) {
      yield put({
        type: ADMINISTRATION_GET_ASSET_TYPE_OWNER_DROP_DOWN_LIST_SUCCESSED,
        data: assetsBusinessGroupList,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_ASSET_TYPE_OWNER_DROP_DOWN_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_GET_ASSET_TYPE_OWNER_DROP_DOWN_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* vulnerabilityseverityList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'vulnerabilitySeverityList',
    };
    const vulnerabilityList = yield call(vulnerabilityListAPI, payload);

    if (vulnerabilityList.success === true) {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_SEVERITY_SUCCESSED,
        data: vulnerabilityList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_SEVERITY_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_VULNERABILITY_SEVERITY_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* vulnerabilityseverityLevelList(action) {
  try {
    const response = yield call(technicalSeverityLevel, action.payload);

    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_VAL_SEVERTIY_LEVEL_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_VAL_SEVERTIY_LEVEL_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_VAL_SEVERTIY_LEVEL_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* createVulnerabilityseverityLevelList(action) {
  try {
    const response = yield call(technicalSeverityLevelCreate, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_VAL_SEVERTIY_LEVEL_CREATE_LIST_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Vulnerability Severity successfully created",
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(valTechserverity({ queryItem: action.query }));
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: "something went wrong",
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_VAL_SEVERTIY_LEVEL_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* updateVulnerabilityseverityLevelList(action) {
  try {
    const response = yield call(technicalSeverityLevelUpdate, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_VAL_SEVERTIY_LEVEL_UPDATE_LIST_SUCCESSED,
        data: response?.data,
      });
    }
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: "Vulnerabilities Severity updated",
        feedbackType: 'success',
        module: 'administration',
      },
    });
    yield put(valTechserverity({ queryItem: action.query }));
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: "something Went Wrong",
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_VAL_SEVERTIY_LEVEL_UPDATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* deleteVulnerabilityseverityLevelList(action) {
  try {
    const response = yield call(technicalSeverityLevelDelete, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_VAL_SEVERTIY_LEVEL_DELETE_LIST_SUCCESSED,
        data: response?.data,
      });
    }
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: "Vulnerabilities Severity deleted",
        feedbackType: 'success',
        module: 'administration',
      },
    });
    yield put(valTechserverity({ queryItem: action.query }));
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: "Something Went Wrong",
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_VAL_SEVERTIY_LEVEL_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* nontechvulnerabilityseverityLevelList(action) {
  try {
    const response = yield call(NontechnicalSeverityLevel, action.payload);

    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_LIST_SUCCESSED,
        data: response?.data,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* deleteNonVulnerabilityseverityLevelList(action) {
  try {
    const response = yield call(NontechnicalSeverityLevelDelete, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_DELETE_LIST_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Non-Technical severity Level deleted successfully",
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(valNoTechserverity({ queryItem: action.query }));
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* updateNonVulnerabilityseverityLevelList(action) {
  try {
    const response = yield call(NontechnicalSeverityLevelUpdated, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_UPDATE_LIST_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Non-Technical Severity Level Updated successfully",
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(valNoTechserverity({ queryItem: action.query }));
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_UPDATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* createNonVulnerabilityseverityLevelList(action) {
  try {
    const response = yield call(NontechnicalSeverityLevelCreated, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_CREATE_LIST_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Non-Technical Severity Level created successfully",
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(valNoTechserverity({ queryItem: action.query }));
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* getDepartmentDropDownList(action) {
  try {
    const assetsBusinessGroupList = yield call(
      departmentDropDownListAPI,
      action.payload
    );
    if (assetsBusinessGroupList.success === true) {
      yield put({
        type: ADMINISTRATION_GET_ASSET_TYPE_DEPARTMENT_DROP_DOWN_LIST_SUCCESSED,
        data: assetsBusinessGroupList,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_ASSET_TYPE_DEPARTMENT_DROP_DOWN_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_GET_ASSET_TYPE_DEPARTMENT_DROP_DOWN_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* getAssetValueDropDownList(action) {
  try {
    const assetsBusinessGroupList = yield call(
      assetValueDropDownListAPI,
      action.payload
    );
    if (assetsBusinessGroupList.success === true) {
      yield put({
        type: ADMINISTRATION_GET_ASSET_TYPE_ASSET_VALUE_DROP_DOWN_LIST_SUCCESSED,
        data: assetsBusinessGroupList,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_ASSET_TYPE_ASSET_VALUE_DROP_DOWN_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_GET_ASSET_TYPE_ASSET_VALUE_DROP_DOWN_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createTechnicalVulnerability(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'technicalVulnerability',
    };
    const createList = yield call(createVulnerabilityAPI, payload);
    if (createList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: createList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_VULNERABILITY_CREATE_SUCCESSED,
        data: createList?.data,
      });
      yield put(vulnerabilityTechnicalList());
    } else {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_CREATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_VULNERABILITY_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchDitectionMethod(action) {
  try {
    const response = yield call(
      administratorCasesDetectionMethodsList,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_DITECTION_METHOD_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_DITECTION_METHOD_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_DITECTION_METHOD_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesDetectionMethodDelete(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesDetectionMethodDelete,
      action.id
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_DITECTION_METHOD_DELETE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.message
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Delete Cases Ditection Method Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesDitectionsMethod({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_DITECTION_METHOD_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_DITECTION_METHOD_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateTechnicalVulnerability(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'technicalVulnerability',
    };
    const updateList = yield call(updateVulnerabilityAPI, payload);

    if (updateList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: updateList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_VULNERABILITY_UPDATE_SUCCESSED,
        data: updateList?.data,
      });
      yield put(vulnerabilityTechnicalList());
    } else {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_VULNERABILITY_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesDitectionMethodUpdate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesDetectionMethodUpdate,
      action.id,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_DITECTION_METHOD_UPDATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Update Cases Ditection Method Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesDitectionsMethod({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_DITECTION_METHOD_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_DITECTION_METHOD_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesDitectionMethodCreate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesDetectionMethodCreate,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_DITECTION_METHOD_CREATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Cases Ditection Method Created Succesfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesDitectionsMethod({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_DITECTION_METHOD_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_DITECTION_METHOD_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchDitectionSlas(action) {
  try {
    const response = yield call(
      administratorCasesSlaList,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_SLA_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SLA_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_SLA_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* watchDeleteDitectionSlas(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCaseseDelete,
      action.id
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_SLA_DELETE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.message
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Delete SLA Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesSlaAction({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SLA_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_SLA_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* watchCreateDitectionSlas(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesSlaCreate,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_SLA_CREATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.message
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Create SLA Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesSlaAction({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SLA_CREATE_FAILED,
        data: null,
      });

      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while creating SLA',
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_SLA_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while creating SLA',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}



export function* watchUpdateDitectionSlas(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesSlaUpdate,
      action.id, action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_SLA_UPDATE_SUCCESSED,
        data: response?.data,
      });

      const msg = response?.data?.message
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Update SLA Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesSlaAction({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SLA_UPDATE_FAILED,
        data: null,
      });

      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while creating SLA',
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_SLA_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });

    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while creating SLA',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* watchLogDitectionSlas(action) {
  try {
    const response = yield call(
      administratorCasesSlaLogs,
      action.id
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_SLA_VIEW_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SLA_VIEW_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_SLA_VIEW_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchSlasRulesView(action) {
  try {
    const response = yield call(
      administratorCasesSlaViewRule,
      action.id
    );

    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_SLA_RULE_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_SLA_RULE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_SLA_RULE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchvulnerabilityNonTechnical(action) {
  try {
    // yield put({ type: SHOW_LOADER });
    const payload = {
      ...action.payload,
      tabName: 'nonTechnicalVulnerability',
    };
    const vulnerabilityList = yield call(vulnerabilityListAPI, payload);

    if (vulnerabilityList.success === true) {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_SUCCESSED,
        data: vulnerabilityList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_FAILED,
        data: null,
      });
    }
    // yield put({ type: HIDE_LOADER });
  } catch (err) {
    // yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_VULNERABILITY_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesNcissList(action) {
  try {
    const response = yield call(administratorCasesNciss, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({ type: ADMINISTRATION_CASES_NCISS_LIST_FAILED, data: null });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_NCISS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesNcissDropDownList() {
  try {
    const response = yield call(casesNcissDropDownListAPI);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_CATEGORY_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_CATEGORY_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_NCISS_CATEGORY_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* deleteCasesNciss(action) {
  try {
    const response = yield call(administratorCasesNcissDelete, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_DELETE_LIST_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Ncis option delete successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorCasesNcissList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_DELETE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_NCISS_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesNcissCreate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(administratorCasesNcissCreate, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_CREATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Ncis option created successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorCasesNcissList({ queryItem: action.query }));
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_NCISS_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesNcissUpdate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesNcissUpdate,
      action.id,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_UPDATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Ncis option updated successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorCasesNcissList({ queryItem: action.query }));
    } else {
      yield put({ type: ADMINISTRATION_CASES_NCISS_UPDATE_FAILED, data: null });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_NCISS_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesncissCategoriesList(action) {
  try {
    const response = yield call(
      administratorCasesNcisCategories,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_CATEGORIES_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_CATEGORIES_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_NCISS_CATEGORIES_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesncissCategoriesUpdate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorNcisCategoryUpdate,
      action.id,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_CATEGORIES_UPDATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[0];
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Update NCISS Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorCasesNcisscategories({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_CATEGORIES_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_NCISS_CATEGORIES_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesncissCategoriesCreate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorNcisCategoryCreate,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_CATEGORIES_CREATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[0];
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Create NISS Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorCasesNcisscategories({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_CATEGORIES_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_NCISS_CATEGORIES_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesncissCategoriesDelete(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(administratorNcisCategoryDelete, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_CATEGORIES_DELETE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[0];
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Delete NISS Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorCasesNcisscategories({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_CATEGORIES_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_NCISS_CATEGORIES_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchadministratorCasesNcissPeriorities(action) {
  try {
    const response = yield call(
      administratorCasesNcissPeriorities,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_PERIORITIES_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_PERIORITIES_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_NCISS_PERIORITIES_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchadministratorCasesNcissPerioritieDelete(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesNcissPerioritieDelete,
      action.id
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_PERIORITIE_DELETE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[0]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Delete Nciss Prioritie Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesNcissPerioritiesList({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_PERIORITIE_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_NCISS_PERIORITIE_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchadministratorCasesNcissPerioritieUpdate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesNcissPerioritieUpdate,
      action.id,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_PERIORITIE_UPDATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[0]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Update Nciss Prioritie Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesNcissPerioritiesList({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_PERIORITIE_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_NCISS_PERIORITIE_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchadministratorCasesNcissPerioritieCreate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesNcissPerioritieCreate,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_PERIORITIE_CREATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[0]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Create Nciss Prioritie Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
        administratorCasesNcissPerioritiesList({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_CASES_NCISS_PERIORITIE_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_NCISS_PERIORITIE_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesLocationsList(action) {
  try {
    const response = yield call(
      administratorCasesLocationsList,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_LOCATIONS_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASES_LOCATIONS_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASES_LOCATIONS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesLocationDelete(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(administratorCasesLocationDelete, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_LOCATION_DELETE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.message;
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Delete Location Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorCasesLocationList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_LOCATION_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_LOCATION_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* vulnerabilityNonTechnicalseverityList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'vulnerabilityNonTechnicalSeverityList',
    };
    const vulnerabilityList = yield call(vulnerabilityListAPI, payload);

    if (vulnerabilityList.success === true) {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_SEVERITY_SUCCESSED,
        data: vulnerabilityList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_SEVERITY_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_VULNERABILITY_SEVERITY_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCasesLocationCreate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesLocationCreate,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_LOCATION_CREATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Create Location Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorCasesLocationList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_LOCATION_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_LOCATION_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCasesLocationUpdate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      administratorCasesLocationUpdate,
      action.id,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASES_LOCATION_UPDATE_SUCCESSED,
        data: response?.data,
      });
      const msg = response?.data?.[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Update Location Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(administratorCasesLocationList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_CASES_LOCATION_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CASES_LOCATION_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* vulnerabilitythreatList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'vulnerabilityThreatList',
    };
    const vulnerabilityList = yield call(vulnerabilityListAPI, payload);

    if (vulnerabilityList.success === true) {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_THREAT_SUCCESSED,
        data: vulnerabilityList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_THREAT_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_VULNERABILITY_THREAT_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteNonTechnicalVulnerability(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'nonTechnicalVulnerability',
    };
    const deleteList = yield call(deleteVulnerabilityAPI, payload);

    if (deleteList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_SUCCESSED,
        data: deleteList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateNonTechnicalVulnerability(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'nonTechnicalVulnerability',
    };
    const updateList = yield call(updateVulnerabilityAPI, payload);

    if (updateList.success === true) {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_UPDATE_SUCCESSED,
        data: updateList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_VULNERABILITY_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createNonTechnicalVulnerability(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'nonTechnicalVulnerability',
    };
    const createList = yield call(createVulnerabilityAPI, payload);

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_CREATE_SUCCESSED,
        data: createList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: createList?.data?.[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(vulnerabilityNonTechnicalList());
    } else {
      yield put({
        type: ADMINISTRATION_VULNERABILITY_CREATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_VULNERABILITY_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* threatIntelCategoryList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelCategory',
    };
    const threatList = yield call(threatIntelListAPI, payload);

    if (threatList.success === true) {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_LIST_SUCCESSED,
        data: threatList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createthreatIntelCategoryList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelCategory',
    };
    const createList = yield call(createthreatIntelAPI, payload);

    if (createList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: createList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_CREATE_SUCCESSED,
        data: createList?.data,
      });
      yield put(threatIntelCategoryListAction());
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_CREATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deletethreatIntelCategoryList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelCategory',
    };
    const deleteList = yield call(deletethreatIntelAPI, payload);

    if (deleteList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: deleteList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_DELETE_SUCCESSED,
        data: deleteList?.data,
      });
      yield put(threatIntelCategoryListAction());
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updatethreatIntelCategoryList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelCategory',
    };
    const updateList = yield call(updateThreatIntelAPI, payload);
    if (updateList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: updateList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_UPDATE_SUCCESSED,
        data: updateList?.data,
      });
      yield put(threatIntelCategoryListAction());
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

/*  */

export function* threatIntelSubCategoryList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelSubCategory',
    };
    const threatList = yield call(threatIntelListAPI, payload);

    if (threatList.success === true) {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_LIST_SUCCESSED,
        data: threatList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createthreatIntelSubCategoryList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelSubCategory',
    };
    const createList = yield call(createthreatIntelAPI, payload);

    if (createList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: createList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_CREATE_SUCCESSED,
        data: createList?.data,
      });
      yield put(threatIntelSubCategoryListAction());
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_CREATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deletethreatIntelSubCategoryList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelSubCategory',
    };
    const deleteList = yield call(deletethreatIntelAPI, payload);

    if (deleteList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: deleteList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_DELETE_SUCCESSED,
        data: deleteList?.data,
      });
      yield put(threatIntelSubCategoryListAction());
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updatethreatIntelSubCategoryList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelSubCategory',
    };
    const updateList = yield call(updateThreatIntelAPI, payload);

    if (updateList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: updateList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_UPDATE_SUCCESSED,
        data: updateList?.data,
      });
      yield put(threatIntelSubCategoryListAction());
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* threatIntelSeverityList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelSubCategorySeverity',
    };
    const vulnerabilityList = yield call(threatIntelListAPI, payload);

    if (vulnerabilityList.success === true) {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_SEVERITY_SUCCESSED,
        data: vulnerabilityList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_SEVERITY_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_SEVERITY_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* threatIntelPrimaryCateogryList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelSubCategoryPrimaryCategory',
    };
    const vulnerabilityList = yield call(threatIntelListAPI, payload);

    if (vulnerabilityList.success === true) {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_PRIMARY_CATEGORY_SUCCESSED,
        data: vulnerabilityList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_PRIMARY_CATEGORY_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_PRIMARY_CATEGORY_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* getThreatIntelDispositionList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelDispositions',
    };
    const dispositionList = yield call(threatIntelListAPI, payload);
    if (dispositionList.success === true) {
      yield put({
        type: ADMINISTRATION_GET_DISPOSITION_LIST_SUCCESSED,
        data: dispositionList?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_DISPOSITION_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_GET_DISPOSITION_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createThreatIntelDispositionList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelDispositions',
    };
    const createList = yield call(createthreatIntelAPI, payload);

    if (createList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: createList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_CREATE_SUCCESSED,
        data: createList?.data,
      });
      yield put(getThreatDispositionList());
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_CREATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updateThreatIntelDispositionList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelDispositions',
    };
    const updateList = yield call(updateThreatIntelAPI, payload);

    if (updateList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: updateList.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_UPDATE_SUCCESSED,
        data: updateList?.data,
      });
      yield put(getThreatDispositionList());
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteThreatIntelDispositionList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'threatIntelDispositions',
    };
    const deleteList = yield call(deletethreatIntelAPI, payload);
    if (deleteList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: deleteList.data.message,
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_DELETE_SUCCESSED,
        data: deleteList?.data,
      });
      yield put(getThreatDispositionList());
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* automationIngestionList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationIngestionSource',
    };
    const workflowData = yield call(automationListAPI, payload);
    if (workflowData.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* deleteAutomationIngestionIO(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationIngestionSource',
    };
    const deleteList = yield call(
      deleteRiskManagementThreatRegisterAPI,
      payload
    );
    if (deleteList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_SUCCESSED,
        data: deleteList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Automatiton Action Delete Succesfully",
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationIngestionLists({ queryItem: action.payload.query }));
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchProbabilityGetDefault(action) {
  try {
    const reponse = yield call(probabilityGetDefaultAPI, action.payload);
    if (reponse.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_GET_DEFAULT_SUCCESSED,
        data: reponse?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_GET_DEFAULT_FAILED,
        data: null,
      });
    }
  } catch (err) {

    console.log('>>>>>>>>>>>>>> err: ', { err });

    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_GET_DEFAULT_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchProbabilityList(action) {
  try {
    const response = yield call(Riskprobability, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* watchDeleteProbabilityList(action) {

  try {
    yield put({ type: SHOW_LOADER });

    const response = yield call(
      deleteRiskprobability,
      action.id
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_DELETE_LIST_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementProbablity({ queryItem: action.query }));

    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_DELETE_LIST_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while deleting probability',
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
    yield put({ type: HIDE_LOADER });

  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_DELETE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while deleting probability',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* watchUpdateProbabilityList(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      updateRiskprobability,
      action.id,
      action.payload
    );
    if (response.success === true) {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_UPDATE_LIST_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementProbablity({ queryItem: action.query }));
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_UPDATE_LIST_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while updating probability',
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_UPDATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while updating probability',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* watchCreateProbabilityList(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      createRiskprobability,
      action.payload
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_CREATE_LIST_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(riskManagementProbablity({ queryItem: action.query }));
    } else {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while creating probability',
          feedbackType: 'error',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_CREATE_LIST_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while creating probability',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* watchChangeTitle(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      changeProbabilityTitle,
      action.payload,
      action.isRiskScore
    );
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: reponse.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_CHANGE_TITLE_SUCCESSED,
        data: response?.data,
      });

      yield put(getAllTabbsHeading('riskScore'));
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_CHANGE_TITLE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_CHANGE_TITLE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchUpdateFormula(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      updateFormula,
      action.payload,
      action.isRiskScore
    );
    if (response.success === true) {
      // yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_UPDATE_FORMULA_SUCCESSED,
        data: response?.data,
      });
      if (action.isRiskScore) {
        yield put({
          type: SET_FEEDBACK_ALERT,
          payload: {
            feedbackMessage: response.data[1],
            feedbackType: 'success',
            module: 'administration',
          },
        });
      }

      if (action?.payload?.lhv_select === "custom") {
        yield put(riskManagementProbablity({}));
      }
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_UPDATE_FORMULA_FAILED,
        data: null,
      });
      // yield put({ type: HIDE_LOADER });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while updating formula',
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_UPDATE_FORMULA_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while updating formula',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* watchGetFormula(action) {

  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
      getFormula
    );
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_GET_FORMULA_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_GET_FORMULA_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while geting formula',
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_GET_FORMULA_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while geting formula',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* watchCaseGetTabsHeadings(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(caseGetTabsHeadingsApi, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_GET_TABS_HEADING_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_TABS_HEADING_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    console.log('>>>>>>>>>> SAGA HEAD: ', { err });
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_GET_TABS_HEADING_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchGetRiskMatrix() {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(getRiskMatrixAPi);

    if (response.success === true) {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISK_MATRIX_LIST_SUCCESSED,
        data: response?.data,
      });
      yield put({ type: HIDE_LOADER });
    } else {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_RISK_MATRIX_LIST_FAILED,
        data: null,
      });
    }
    // yield put({ type: HIDE_LOADER });
  } catch (err) {
    //  debugger
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISK_MATRIX_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCreateRiskMatrix(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(createRiskMatrixAPi, action.payload);
    if (response.success === true) {
      yield put({ type: HIDE_LOADER });
      yield put({
        type: ADMINISTRATION_CREATE_RISK_MATRIX_SUCCESSED,
        data: response?.data,
      });

      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_CREATE_RISK_MATRIX_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while creating risk matrix',
          feedbackType: 'error',
          module: 'administration',
        },
      });

    }

    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_CREATE_RISK_MATRIX_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while creating risk matrix',
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* watchResetRiskMatrix(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(resetRiskMatrixAPi, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_RESET_RISK_MATRIX_SUCCESSED,
        data: response?.data,
      });
      yield put(getRiskMtrix());
    } else {
      yield put({
        type: ADMINISTRATION_RESET_RISK_MATRIX_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RESET_RISK_MATRIX_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchRiskMetaList() {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(getRiskMetaAPI);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_GET_RISK_META_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_GET_RISK_META_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_GET_RISK_META_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchRiskMetaLabelUpdate(action) {
  // debugger;
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(riskMetaLabelUpdate, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_LABEL_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Label updated succesfully",
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(onGetRiskMetaList());
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_LABEL_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Error while updating label",
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    console.log(err);
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_LABEL_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: "Error while updating label",
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* watchRiskMetaUpdate(action) {

  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(riskMetaUpdateAPI, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Risk meta updated succesfully",
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(onGetRiskMetaList());
    } else {
      yield put({
        type: ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Error while updating risk meta",
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    // console.log(err);
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: "Error while updating risk meta",
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}

export function* watchGetRiskMatrixDropdownData(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const rangeFromResponse = yield call(getRiskMatrixRangeFromApi, action.payload);
    if (rangeFromResponse.success === true) {
      yield put({
        type: ADMINISTRATION_GET_RISK_MATRIX_RANGE_FROM_SUCCESSED,
        data: rangeFromResponse?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_RISK_MATRIX_RANGE_FROM_FAILED,
        data: null,
      });
    }

    const rangeTResponse = yield call(getRiskMatrixRangeToApi, action.payload);
    if (rangeTResponse.success === true) {
      yield put({
        type: ADMINISTRATION_GET_RISK_MATRIX_RANGE_TO_SUCCESSED,
        data: rangeTResponse?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_RISK_MATRIX_RANGE_TO_FAILED,
        data: null,
      });
    }

    const colorListResponse = yield call(getRiskMatrixColorListApi, action.payload);
    if (colorListResponse.success === true) {
      yield put({
        type: ADMINISTRATION_GET_RISK_MATRIX_COLOR_LIST_SUCCESSED,
        data: colorListResponse?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_GET_RISK_MATRIX_COLOR_LIST_FAILED,
        data: null,
      });
    }

    yield put({ type: HIDE_LOADER });
  } catch (err) {
    console.log('>>>>>>>>>>>> ERR: ', { err });
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_GET_RISK_MATRIX_RANGE_FROM_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchIngestionType(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'ingestionType',
    };
    const deleteList = yield call(allIngestionAPI, payload);

    if (deleteList.success === true) {
      yield put({
        type: INGESTION_TYPE_SUCCESSED,
        data: deleteList?.data,
      });
    } else {
      yield put({
        type: INGESTION_TYPE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: INGESTION_TYPE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchIngestionWidget(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'ingestionWidget',
    };
    const deleteList = yield call(allIngestionAPI, payload);

    if (deleteList.success === true) {
      yield put({
        type: INGESTION_WIDGET_SUCCESSED,
        data: deleteList?.data,
      });
    } else {
      yield put({
        type: INGESTION_WIDGET_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: INGESTION_WIDGET_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchInjestionFrequency(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'ingestionFrequence',
    };
    const deleteList = yield call(allIngestionAPI, payload);

    if (deleteList.success === true) {
      yield put({
        type: INGESTION_FREQUENCY_SUCCESSED,
        data: deleteList?.data,
      });
    } else {
      yield put({
        type: INGESTION_FREQUENCY_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: INGESTION_FREQUENCY_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchIngestionApplication(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'ingestionApplication',
    };
    const deleteList = yield call(allIngestionAPI, payload);

    if (deleteList.success === true) {
      yield put({
        type: INGESTION_APPLICATION_SUCCESSED,
        data: deleteList?.data,
      });
    } else {
      yield put({
        type: INGESTION_APPLICATION_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: INGESTION_APPLICATION_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchInjestionUsers(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'ingestionUsers',
    };
    const deleteList = yield call(allIngestionAPI, payload);

    if (deleteList.success === true) {
      yield put({
        type: INGESTION_USERS_SUCCESSED,
        data: deleteList?.data,
      });
    } else {
      yield put({
        type: INGESTION_USERS_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: INGESTION_USERS_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchIngestionAction(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'ingestionAction',
    };
    const deleteList = yield call(ingestionActionAPI, payload);

    if (deleteList.success === true) {
      yield put({
        type: INGESTION_ACTION_SUCCESSED,
        data: deleteList?.data,
      });
    } else {
      yield put({
        type: INGESTION_ACTION_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: INGESTION_ACTION_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAdvisory(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'enableAdvisory',
    };
    const enableAdvisory = yield call(enableAdvisoryAPI, payload);

    if (enableAdvisory.success === true) {
      yield put({
        type: ENABLE_ADVISORY_SUCCESSED,
        data: enableAdvisory?.data,
      });
      const data = enableAdvisory?.data?.message
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: data || 'Ingestion Sources successfully Updated',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ENABLE_ADVISORY_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: "Something Went Wrong",
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ENABLE_ADVISORY_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchActionOutput(action) {
  try {
    const response = yield call(automationActionOutput, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_ACTIONS_OUTPUT_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_ACTIONS_OUTPUT_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_ACTIONS_OUTPUT_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* createAutomationIngestion(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationIngestionSource',
    };
    const createList = yield call(automationCreateListAPI, payload);
    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_SUCCESSED,
        data: createList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Automation Ingestion is Created',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationIngestionLists({ queryItem: action.payload.query }));
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* automationConfigurationIngestionPost(action) {
  try {
    const createList = yield call(automationActionConfigurationsPost, action.id, action.payload);
    if (createList.success === true) {
      yield put({
        type: AUTOMATION_ACTION_CONFIGURATION_POST_SUCCESSED,
        data: createList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Inputs successfully created',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: AUTOMATION_ACTION_CONFIGURATION_POST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* automationViewScript(action) {
  try {
    const createList = yield call(automationViewAction, action.id);
    if (createList.success === true) {
      yield put({
        type: AUTOMATION_ACTION_VIEW_SCRIPT_SUCCESSED,
        data: createList?.data,
      })
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: AUTOMATION_ACTION_VIEW_SCRIPT_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* automationactionUpdateList(action) {
  try {
    const createList = yield call(automationActionsMultiPostData, action.id, action.payload);
    if (createList.success === true) {
      yield put({
        type: AUTOMATION_ACTION_MULTIDATA_POST_SUCCESSED,
        data: createList?.data,
      })
      const msg = createList?.data[1]
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: msg || 'Application Ingestion Sources successfully added',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: AUTOMATION_ACTION_MULTIDATA_POST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* updateAutomationIngestion(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationIngestionSource',
    };
    const updateList = yield call(automationUpdateListAPI, payload);

    if (updateList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_SUCCESSED,
        data: updateList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Automation Ingestion is Updated',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationIngestionLists({ queryItem: action.payload.query }));
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_AUTOMATION_UPDATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* automationActionsList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationActions',
    };
    const workflowData = yield call(automationListAPI, payload);
    if (workflowData.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* automationConfigurationList(action) {
  try {
    const response = yield call(automationActionConfigurations, action.id);
    if (response.success === true) {
      yield put({
        type: AUTOMATION_ACTION_CONFIGURATION_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: AUTOMATION_ACTION_CONFIGURATION_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: AUTOMATION_ACTION_CONFIGURATION_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* actionsType(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationActionsType',
    };
    const workflowData = yield call(allIngestionAPI, payload);
    if (workflowData.success === true) {
      yield put({
        type: ACTIONS_TYPE_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ACTIONS_TYPE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ACTIONS_TYPE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* actionsScript(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationActionsScriptType',
    };
    const workflowData = yield call(allIngestionAPI, payload);
    if (workflowData.success === true) {
      yield put({
        type: ACTIONS_SCRIPT_TYPE_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ACTIONS_SCRIPT_TYPE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ACTIONS_SCRIPT_TYPE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* actionsIoType(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationActionsIOType',
    };
    const workflowData = yield call(allIngestionAPI, payload);
    if (workflowData.success === true) {
      yield put({
        type: ACTIONS_IO_TYPE_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ACTIONS_IO_TYPE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ACTIONS_IO_TYPE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* actionsApplication(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationActionsApplicationType',
    };
    const workflowData = yield call(allIngestionAPI, payload);
    if (workflowData.success === true) {
      yield put({
        type: ACTIONS_APPLICATION_SUCCESSED,
        data: workflowData?.data,
      });
    } else {
      yield put({
        type: ACTIONS_APPLICATION_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ACTIONS_APPLICATION_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createAutomationList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationActions',
    };
    const createList = yield call(automationCreateListAPI, payload);

    if (createList.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_SUCCESSED,
        data: createList?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Action is Created',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationActionsLists({ queryItem: action.payload.query }));
    } else {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* updatAutomationActionList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationActions',
    };
    const response = yield call(automationUpdateListAPI, payload);

    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Automation Action is Updated',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationActionsLists({ queryItem: action.payload.query }));
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* deleteAutomationActionList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'automationActions',
    };
    const response = yield call(automationDeleteListAPI, payload);

    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_AUTOMATION_CREATE_LIST_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Automation Action is Deleted',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(automationActionsLists({ queryItem: action.payload.myQuery }));
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_AUTOMATION_CREATE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
// ADMINISTRATION_AUTOMATION_ACTIONS_DELETE_LIST_REQUESTED

export function* ingestionGetMultiData(action) {
  try {
    // yield put({ type: SHOW_LOADER });
    const payload = {
      ...action.payload,
      tabName: 'ingestionMultiData',
    };
    const getList = yield call(enableAdvisoryAPI, payload);

    if (getList.success === true) {
      yield put({
        type: GET_INGESTION_MULTI_DATA_SUCCESSED,
        data: getList?.data,
      });
    } else {
      yield put({
        type: GET_INGESTION_MULTI_DATA_FAILED,
        data: null,
      });
    }
    // yield put({ type: HIDE_LOADER });
  } catch (err) {
    // yield put({ type: HIDE_LOADER });
    yield put({
      type: GET_INGESTION_MULTI_DATA_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* ingestionGetMapping(action) {
  try {
    // yield put({ type: SHOW_LOADER });
    const payload = {
      ...action.payload,
      tabName: 'ingestionMapping',
    };
    const getList = yield call(enableAdvisoryAPI, payload);

    if (getList.success === true) {
      yield put({
        type: GET_INGESTION_MAPPING_SUCCESSED,
        data: getList?.data,
      });
    } else {
      yield put({
        type: GET_INGESTION_MAPPING_FAILED,
        data: null,
      });
    }
    // yield put({ type: HIDE_LOADER });
  } catch (err) {
    // yield put({ type: HIDE_LOADER });
    yield put({
      type: GET_INGESTION_MAPPING_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* ingestionAddMultiData(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const payload = {
      ...action.payload,
      tabName: 'ingestionMultiData',
    };
    const addList = yield call(addMultiData, payload);

    if (addList.success === true) {
      yield put({
        type: ADD_INGESTION_MULTI_DATA_SUCCESSED,
        data: addList?.data,
      });
    } else {
      yield put({
        type: ADD_INGESTION_MULTI_DATA_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADD_INGESTION_MULTI_DATA_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* logsAppList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'logsApps',
    };
    const logsData = yield call(automationListAPI, payload);

    if (logsData.success === true) {
      yield put({
        type: ADMINISTRATION_LOGS_LIST_SUCCESSED,
        data: logsData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_LOGS_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_LOGS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* logsAuthenticationList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'logsAuthentication',
    };
    const logsData = yield call(automationListAPI, payload);

    if (logsData.success === true) {
      yield put({
        type: ADMINISTRATION_LOGS_LIST_SUCCESSED,
        data: logsData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_LOGS_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_LOGS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* logsActivityList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'logsActivity',
    };
    const logsData = yield call(automationListAPI, payload);

    if (logsData.success === true) {
      yield put({
        type: ADMINISTRATION_LOGS_LIST_SUCCESSED,
        data: logsData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_LOGS_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_LOGS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* logsIngestionList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'logsIngestion',
    };
    const logsData = yield call(automationListAPI, payload);

    if (logsData.success === true) {
      yield put({
        type: ADMINISTRATION_LOGS_LIST_SUCCESSED,
        data: logsData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_LOGS_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_LOGS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* productsRegisterList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'productsRegister',
    };
    const productsData = yield call(automationListAPI, payload);

    if (productsData.success === true) {
      yield put({
        type: ADMINISTRATION_PRODUCTS_LIST_SUCCESSED,
        data: productsData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_PRODUCTS_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_PRODUCTS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* productsRegisterDeleteList(action) {

  console.log('>>>>>>>>>>>> action: ', { action });
  // return false;

  try {
    const payload = {
      ...action.payload,
      tabName: 'productsRegister',
    };
    const deleteList = yield call(deletethreatIntelAPI, payload);

    if (deleteList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: deleteList.data.message,
          feedbackType: 'success',
          module: 'administration',
        },
      });

      yield put({
        type: ADMINISTRATION_THREAT_INTEL_DELETE_SUCCESSED,
        data: deleteList?.data,
      });
      yield put(productsRegisterListAction());
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    console.log('>>>>>>>>>>>> err: ', { err });
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* accessUsersList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'accessControlUsers',
    };
    const accessData = yield call(automationListAPI, payload);

    if (accessData.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_LIST_SUCCESSED,
        data: accessData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* accessUserDeleteList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'accessControlUsers',
    };

    const deleteList = yield call(deletethreatIntelAPI, payload);

    if (deleteList.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[0],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_DELETE_SUCCESSED,
        data: deleteList?.data,
      });

    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* authenticateType(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'accessUsersAuthenticationTypes',
    };
    const accessData = yield call(allIngestionAPI, payload);

    if (accessData.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_AUTHENTICATION_TYPE_SUCCESSED,
        data: accessData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_AUTHENTICATION_TYPE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_AUTHENTICATION_TYPE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* accessPermission(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'accessUsersPermission',
    };
    const accessData = yield call(allIngestionAPI, payload);

    if (accessData.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_PERMISSION_SUCCESSED,
        data: accessData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_PERMISSION_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_PERMISSION_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* accessLandingPage(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'accessUsersLandingPage',
    };
    const accessData = yield call(allIngestionAPI, payload);

    if (accessData.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_LANDING_PAGE_SUCCESSED,
        data: accessData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_LANDING_PAGE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_LANDING_PAGE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* accessGroup(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'accessUsersGroup',
    };
    const accessData = yield call(allIngestionAPI, payload);

    if (accessData.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_GROUP_SUCCESSED,
        data: accessData?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_GROUP_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_GROUP_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* WatchSessionPassword(action) {
  try {
    const response = yield call(sessionPassword);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_SESSION__PASSWORD_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_SESSION__PASSWORD_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_SESSION__PASSWORD_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* WatchuUpdateSessionPassword(action) {
  try {
    const response = yield call(sessionPasswordUpdate, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_SESSION__PASSWORD_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Session & Password successfully updated!",
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(getSessionPassword());
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_SESSION__PASSWORD_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: "something went wrong",
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_ACCESS_SESSION__PASSWORD_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessUserUpdate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(userAccessUpdate, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[0],
          feedbackType: 'success',
          module: 'administration',
        },
      });

      yield put({
        type: ADMINISTRATION_ACCESS_USERS_UPDATE_SUCCESS,
        data: response?.data,
      });
      yield put(accessControlUserlist({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_USERS_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_USERS_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchAccessInviteUser(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(userAccessInviteUser, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Invitation sent Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });

      yield put({
        type: ADMINISTRATION_ACCESS_USER_INVITE_SUCCESSED,
        data: response?.data,
      });
      yield put(accessControlUserlist({ queryItem: action.query }));
    } else {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Something Went Wrong",
          feedbackType: 'error',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_USER_INVITE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_USER_INVITE_FAILED,
      data: err?.response?.data?.data,
    });
    if(err?.response?.data?.data?.usr_email){

      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: err?.response?.data?.data?.usr_email[0],
          feedbackType: 'error',
          module: 'administration',
        },
      });
    } else{
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Something Went Wrong",
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
  }
}

export function* watchAccessControlGroups(action) {
  try {
    const response = yield call(accessControlGroups, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_GROUPS_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_GROUPS_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTORL_GROUPS_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* watchAccessGroupsUpdate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(updateAccessContorlGroup, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[0],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_GROUP_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetAccessControlGroupsTab({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_GROUP_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTORL_GROUP_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessGroupsCreate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(createAccessControlGroup, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[0],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_GROUP_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetAccessControlGroupsTab({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_GROUP_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTORL_GROUP_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessGroupsDelete(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(deleteAccessContorlGroup, action.id);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[0],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_GROUP_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetAccessControlGroupsTab({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_GROUP_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTORL_GROUP_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* watchAccessControlRoles(action) {
  try {
    const response = yield call(accessControlRoles, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_ROLES_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_ROLES_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTORL_ROLES_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessRoleUpdate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(updateAccessControlRole, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[0],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_ROLE_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetAccessControlRolesTab({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_ROLE_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTORL_ROLE_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessRoleCreate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(createAccessControlRole, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[0],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_ROLE_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetAccessControlRolesTab({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_ROLE_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTORL_ROLE_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessRoleDelete(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(deleteAccessControlRole, action.id);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[0],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_ROLE_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetAccessControlRolesTab({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTORL_ROLE_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTORL_ROLE_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* watchAccessControlActions(action) {
  try {
    const response = yield call(accessControlActions, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTIONS_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTIONS_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_ACTIONS_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchAccessControlActionGroup(action) {
  try {
    const response = yield call(accessControlActionsGroup, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchAccessActionsUpdate(action) {
  try {
    // yield put({ type: SHOW_LOADER });
    const response = yield call(updateAccessControlAction, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTION_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetAccessControlActionTab({ queryItem: action.query }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Update Actions Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'error',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    // yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_ACTION_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchAccessActionsCreate(action) {
  try {
    const response = yield call(createAccessControlAction, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTION_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Create Actions Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(onGetAccessControlActionTab({ queryItem: action.query }));
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_ACTION_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessActionsDelete(action) {
  try {
    // yield put({ type: SHOW_LOADER });
    const response = yield call(deleteAccessControlaction, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTION_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Delete Actions Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(onGetAccessControlActionTab({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTION_DELETE_FAILED,
        data: null,
      });
    }
    // yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    // yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_ACTION_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchAccessControlActionsGroupTab(action) {
  try {
    const response = yield call(accessControlActionsGroupTab, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_TAB_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_TAB_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_TAB_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessActionsGroupUpdate(action) {
  try {
    // yield put({ type: SHOW_LOADER });
    const response = yield call(updateAccessControlActionGroup, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'action group successfully updated',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(onGetAccessControlActionGroupTab({ queryItem: action.query }));
    }
    // else {
    //   yield put({
    //     type: ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_UPDATE_FAILED,
    //     data: null,
    //   });
    // }
    // yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchAccessActionsGroupCreate(action) {
  try {
    // yield put({ type: SHOW_LOADER });
    const response = yield call(createAccessControlActionGroup, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'action group successfully created',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(onGetAccessControlActionGroupTab({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_CREATE_FAILED,
        data: null,
      });
    }
    // yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    // yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessActionsGroupDelete(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(deleteAccessControlActionGroup, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'action group successfully deleted',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(onGetAccessControlActionGroupTab({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessControlAuthSetting(action) {
  try {
    const response = yield call(accessControlAuthSettings, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_LIST_SUCCESSED,
        data: response?.data,
      })
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchAccessControlAuthenticationType() {
  try {
    const response = yield call(accessControlAuthSettingAuthencticationType);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_TYPE_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_TYPE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_TYPE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessControlAuthenticationVendors() {
  try {
    const response = yield call(accessControlAuthSettingAuthencticationVendors);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_VENDOR_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_VENDOR_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_VENDOR_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchUpdateThirdPartyAuth(action) {
  try {
    const response = yield call(updateAccessControlThirdPartyAuth, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_UPDATE_AUTH_SETTING_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Third-Party Auth successfully updated',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(onGetAccessControlAuthSettingList({ queryItem: action.query }));
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_UPDATE_AUTH_SETTING_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCreateThirdPartyAuth(action) {
  try {
    const response = yield call(createAccessControlThirdPartyAuth, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_CREATE_AUTH_SETTING_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Third-Party Auth successfully created',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(onGetAccessControlAuthSettingList({ queryItem: action.query }));
    } else {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'something went wrong',
          feedbackType: 'error',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_CREATE_AUTH_SETTING_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_CREATE_AUTH_SETTING_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchDeleteThirdPartyAuth(action) {
  try {
    const response = yield call(deleteAccessControlThirdPartyAuth, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_DELETE_AUTH_SETTING_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Third-Party Auth successfully deleted',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(onGetAccessControlAuthSettingList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_DELETE_AUTH_SETTING_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'something went wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_DELETE_AUTH_SETTING_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessControlPrevileges(action) {
  try {
    const response = yield call(accessControlPrivileges, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessControlPrevilegesDelete(action) {
  try {
    const response = yield call(accessControlPrivilegeDelete, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetListOfPrivileges({ queryItem: action.query || "" }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Delete Previleges Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_DELETE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* watchAccessControlPrevilegesUpdate(action) {
  try {
    const response = yield call(accessControlPrivilegeUpdate, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetListOfPrivileges({ queryItem: action.query || "" }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Update Previleges Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessControlPrevilegesCreate(action) {
  try {
    const response = yield call(accessControlPrivilegeCreate, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetListOfPrivileges({ queryItem: action.query || "" }));
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Create Previleges Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_CREATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAccessControlPrevilegesGroup() {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(accessControlPrivilegeGroup);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_GROUP_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_GROUP_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchProductSettingFeedbackList(action) {
  try {
    const response = yield call(accessControlProductSettingFeedback, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchDeleteProductSettingFeedback(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(deleteProductSettingFeedback, action.id);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data?.message,
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetListOfProductFeedback({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchProductSettingWidget(action) {
  try {
    const response = yield call(accessControlProductSettingWidgets, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGETS_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGETS_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGETS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchProductSettingBackupList(action) {
  try {
    const response = yield call(accessControlProductSettingBackup, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchImportBackup(action) {
  try {
    const response = yield call(importBackup, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_IMPORT_BACKUP_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Restore Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_IMPORT_BACKUP_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchConfigureRestoreBackup(action) {
  try {
    const response = yield call(configureRestoreBackupAPI, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_RESTORE_BACKUP_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response.data[1] || 'Restore Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_RESTORE_BACKUP_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* watchRestoreBackup(action) {
  try {
    const response = yield call(RestoreBackup, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_RESTORE_BACKUP_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Backup Restore Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_RESTORE_BACKUP_FAILED,
      data: err?.response?.data?.data,
    });
  }
}




export function* watchNotifyWatchList() {
  try {
    const response = yield call(notifyUserList);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_NOTIFY_USERS_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_NOTIFY_USERS_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_NOTIFY_USERS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchProductSettingBackupDelete(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(deleteProductSettingBackup, action.id);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data?.message || 'Backup Deleted Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetListofBackups({ queryItem: action.query })); s
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_DELETE_FAILED,
        data: null,
      });
      yield put({ type: HIDE_LOADER });
    }
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCreateBackup(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(createBackupList, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[0] || 'Create Backup Successfully ',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetListofBackups({ queryItem: action.query }));
      yield put({ type: HIDE_LOADER });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_CREATE_FAILED,
        data: null,
      });
      yield put({ type: HIDE_LOADER });
    }
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchDowloadBackup(action) {
  // yield put({ type: SHOW_LOADER });
  try {
    const response = yield call(dowloadBackup, action.id);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_DOWNLOAD_SUCCESSED,
        data: response?.data,
      });

    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_DOWNLOAD_FAILED,
        data: null,
      });
      // yield put({ type: HIDE_LOADER });
    }
    // yield put({ type: HIDE_LOADER });
  } catch (err) {
    // yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_DOWNLOAD_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* watchUpdateWidgets(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(updateProductSettingWidget, action.id, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetWidgetList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_UPDATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchGetBackupSettingAPI(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(getBackupSettingAPI, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_GET_BACKUP_SETTING_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_GET_BACKUP_SETTING_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_GET_BACKUP_SETTING_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* watchCreateWidgets(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(createProductSettingWidget, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data[1],
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetWidgetList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchDeleteWidget(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(deleteProductSettingWidget, action.id);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: response?.data?.message,
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_DELETE_SUCCESSED,
        data: response?.data,
      });
      yield put(onGetWidgetList({ queryItem: action.query }));
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_DELETE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_DELETE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchProductSettingWidgetSources() {
  try {
    const response = yield call(accessControlWidgetDataSource);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_SOURCE_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_SOURCE_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_SOURCE_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchProductSettingWidgetGroup() {
  try {
    const response = yield call(accessControlWidgetDataGroup);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_GROUP_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_GROUP_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_GROUP_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchProductLicense() {
  try {
    const response = yield call(productSettingLicense);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_PRODUCT_LICENSE_INFO_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_PRODUCT_LICENSE_INFO_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_PRODUCT_LICENSE_INFO_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* uploadLicense(action) {
  try {
    const response = yield call(uploadLicenseApi, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_PRODUCT_LICENSE_UPLOAD_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Upload License Is Succesfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    }
  } catch (err) {
    const msg = err.response?.data?.data?.message;
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: msg || 'Somthing Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    });
    yield put({
      type: ADMINISTRATION_PRODUCT_LICENSE_UPLOAD_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* licenceModulesSources() {
  try {
    const response = yield call(getModuleSources);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_PRODUCT_LICENSE_SOURCES_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_PRODUCT_LICENSE_SOURCES_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_PRODUCT_LICENSE_SOURCES_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* createLicense(action) {
  try {
    const response = yield call(createLicenceRequest, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_PRODUCT_LICENSE_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Create License Succesfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_PRODUCT_LICENSE_CREATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    })
    yield put({
      type: ADMINISTRATION_PRODUCT_LICENSE_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}
export function* patchUpdate(action) {
  try {
    const response = yield call(patchUploadRequest, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_PRODUCT_SETTINGS_PATCH_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'License Patch Succesfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
    } else {
      yield put({
        type: ADMINISTRATION_PRODUCT_SETTINGS_PATCH_FAILED,
        data: null,
      });
    }
  } catch (err) {
    const message = err.response?.data?.data?.message;
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: message || 'Something Went Wrong',
        feedbackType: 'error',
        module: 'administration',
      },
    })
    yield put({
      type: ADMINISTRATION_PRODUCT_SETTINGS_PATCH_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchNotificationList() {
  try {
    const response = yield call(notificationListApi);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_NOTIFICATIONS_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_NOTIFICATIONS_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_NOTIFICATIONS_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchProductSettingHealth() {
  try {
    // debugger;
    yield put({ type: SHOW_LOADER });
    const response = yield call(productSettingHealthAPI);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_HEALTH_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_HEALTH_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Error while loading health',
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_HEALTH_FAILED,
      data: null,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: 'Error while loading health',
        feedbackType: 'error',
        module: 'administration',
      },
    });

  }
}

export function* watchNotificationUpdate(action) {
  try {
    const response = yield call(notificationUpdateApi, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Notifications Successfully Updated!',
          feedbackType: 'success',
          module: 'administration',
        },
      });

      yield put({
        type: ADMINISTRATION_NOTIFICATIONS_UPDATE_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_NOTIFICATIONS_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_NOTIFICATIONS_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchFieldSettingList() {
  try {
    const response = yield call(fieldSettingListApi);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_FIELD_SETTING_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_FIELD_SETTING_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_FIELD_SETTING_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchFieldSettingUpdate(action) {
  try {
    const response = yield call(fieldSettingUpdateApi, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Notifications Successfully Updated!',
          feedbackType: 'success',
          module: 'administration',
        },
      });

      yield put({
        type: ADMINISTRATION_FIELD_SETTING_UPDATE_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_FIELD_SETTING_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_FIELD_SETTING_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCaseFieldSettingList() {
  try {
    const response = yield call(fieldCaseSettingListApi);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_CASE_FIELD_SETTING_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_CASE_FIELD_SETTING_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_CASE_FIELD_SETTING_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchCaseFieldSettingUpdate(action) {
  try {
    const response = yield call(caseFieldSettingUpdateApi, action.payload);
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Ticket Fields successfully update!',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put({
        type: ADMINISTRATION_FIELD_SETTING_UPDATE_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_FIELD_SETTING_UPDATE_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_FIELD_SETTING_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchAssociateGroupThreatActor() {
  try {

    const response = yield call(getAssociateThreatActor);

    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_ASSOCIATE_ACTOR_THREAT_ACTOR_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_ASSOCIATE_ACTOR_THREAT_ACTOR_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_ASSOCIATE_ACTOR_THREAT_ACTOR_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* watchGetThreatActorList() {
  try {
    const response = yield call(getThreatActor);

    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}



export function* associateThreatActorList(action) {
  try {
    const payload = {
      ...action.payload,
      tabName: 'associateThreatActor',
    };
    const response = yield call(associateThreatActorListAPI, payload);

    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_ASSOCIATE_THREAT_ACTOR_LIST_SUCCESSED,
        data: response?.data,
      });
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_ASSOCIATE_THREAT_ACTOR_LIST_FAILED,
        data: null,
      });
    }
  } catch (err) {
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_ASSOCIATE_THREAT_ACTOR_LIST_FAILED,
      data: err?.response?.data?.data,
    });
  }
}

export function* watchThreatActorCreate(action) {
  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(
        administratorThreatActorCreate,
        action.payload
    );
    if (response.success === true) {
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Threat Actor successfully created',
          feedbackType: 'success',
          module: 'administration',
        },
      });

      yield put({
        type: ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_CREATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: 'Create Threat Actor Successfully',
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(
          associateGroupThreatActor({ queryItem: action.query })
      );
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_CREATE_FAILED,
        data: null,
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_CREATE_FAILED,
      data: err?.response?.data?.data,
    });
  }
}


export function* watchThreatActorUpdate(action) {

  try {
    yield put({ type: SHOW_LOADER });
    const response = yield call(administratorThreatActorUpdate, action.payload);
    if (response.success === true) {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_UPDATE_SUCCESSED,
        data: response?.data,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Threat Actor updated successfully",
          feedbackType: 'success',
          module: 'administration',
        },
      });
      yield put(associateGroupThreatActorList());
    } else {
      yield put({
        type: ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_UPDATE_FAILED,
        data: null,
      });
      yield put({
        type: SET_FEEDBACK_ALERT,
        payload: {
          feedbackMessage: "Error while updating Threat Actor",
          feedbackType: 'error',
          module: 'administration',
        },
      });
    }
    yield put({ type: HIDE_LOADER });
  } catch (err) {
    // console.log(err);
    yield put({ type: HIDE_LOADER });
    yield put({
      type: ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_UPDATE_FAILED,
      data: err?.response?.data?.data,
    });
    yield put({
      type: SET_FEEDBACK_ALERT,
      payload: {
        feedbackMessage: "Error while updating Threat Actor",
        feedbackType: 'error',
        module: 'administration',
      },
    });
  }
}




export default function* watcher() {
  yield takeLatest(
    ADMINISTRATION_ORGANIZATION_LIST_REQUESTED,
    organizationList
  );
  yield takeLatest(
    ADMINISTRATION_ORAGANIZATION_USERS_REQUESTED,
    organizationUsersList
  );

  yield takeLatest(
    ADMINISTRATION_CLASSIFICATION_LIST_REQUESTED,
    classificationList
  );
  yield takeLatest(
    ADMINISTRATION_CLASSIFICATION_UPDATE_LIST_REQUESTED,
    updateList
  );
  yield takeLatest(
    ADMINISTRATION_GET_SELECTED_ORGANIZATION_REQUESTED,
    watchGetSelectionOraganization
  );
  yield takeLatest(
    ADMINISTRATION_SET_SELECTED_ORGANIZATION_REQUESTED,
    watchSetSelectionOraganization
  );
  yield takeLatest(
    ADMINISTRATION_CLASSIFICATION_DELETE_REQUESTED,
    deleteClassification
  );
  yield takeLatest(
    ADMINISTRATION_ORAGANIZATION_DELETE_REQUESTED,
    watchDeleteOraganization
  );
  yield takeLatest(
    ADMINISTRATION_CLASSIFICATION_CREATE_LIST_REQUESTED,
    createClassification
  );
  yield takeLatest(ORAGANIZATION_REQUESTED, watchOraganizationsList);

  yield takeLatest(
    ADMINISTRATION_ORAGANIZATION_MEMBERS_REQUESTED,
    watchOraganizatioMemberList
  );

  yield takeLatest(
    ADMINISTRATION_ORAGANIZATION_CREATE_REQUESTED,
    watchCreateOraganization
  );
  yield takeLatest(
    ADMINISTRATION_ORGANIZATION_UPDATE_REQUESTED,
    watchUpdateOraganization
  );
  yield takeLatest(
    ADMINISTRATION_GET_INTIAL_DATA_ORAGANIZATION_INFOMATION_REQUESTED,
    watchGetIntialValueInfo
  );

  yield takeLatest(
    ORAGANIZATION_USER_CREATE_REQUESTED,
    watchCreateOraganizationUser
  );
  yield takeLatest(
    ORAGANIZATION_USER_UPDATE_REQUESTED,
    watchUpdateOraganizationUser
  );
  yield takeLatest(
    ORAGANIZATION_USER_DELETE_REQUESTED,
    watchDeleteOraganizationUser
  );
  yield takeLatest(ADMINISTRATION_OWNERS_LIST_REQUESTED, ownerList);
  yield takeLatest(ADMINISTRATION_OWNERS_DELETE_REQUESTED, deleteOwner);
  yield takeLatest(ADMINISTRATION_OWNERS_UPDATE_LIST_REQUESTED, updateOwner);
  yield takeLatest(ADMINISTRATION_OWNERS_CREATE_LIST_REQUESTED, createOwner);
  yield takeLatest(ADMINISTRATION_ASSETS_GROUP_LIST_REQUESTED, assetGroupList);
  yield takeLatest(
    ADMINISTRATION_ASSETS_GROUP_SOURCE_LIST_REQUESTED,
    assetSourceList
  );
  yield takeLatest(
    ADMINISTRATION_ASSETS_GROUP_SUB_GROUP_REQUESTED,
    assetSubGroupList
  );
  yield takeLatest(
    ADMINISTRATION_CREATE_ASSETS_GROUP_REQUESTED,
    createAssetGroup
  );
  yield takeLatest(
    ADMINISTRATION_DELETE_ASSETS_GROUPS_REQUESTED,
    deleteAssetGroup
  );
  yield takeLatest(ADMINISTRATION_EDIT_ASSETS_GROUPS_REQUESTED, editAssetGroup);
  yield takeLatest(ADMINISTRATION_WORKFLOW_LIST_REQUESTED, workflowList);
  yield takeLatest(ADMINISTRATION_CATEGORY_LIST_REQUESTED, categoryList);
  yield takeLatest(
    ADMINISTRATION_CATEGORY_CREATE_LIST_REQUESTED,
    createCategoryList
  );
  yield takeLatest(
    ADMINISTRATION_CATEGORY_UPDATE_LIST_REQUESTED,
    updateCateogryList
  );
  yield takeLatest(
    ADMINISTRATION_CATEGORY_DELETE_LIST_REQUESTED,
    deleteCategory
  );
  yield takeLatest(
    ADMINISTRATION_WORKFLOW_CHANGE_STATUS_REQUESTED,
    changeWorkFlowStatus
  );
  yield takeLatest(
    ADMINISTRATION_ASSET_SUB_GROUP_LIST_REQUESTED,
    assetSubGroupTabList
  );
  yield takeLatest(
    ADMINISTRATION_ASSET_GROUP_DROP_DOWN_LIST_REQUESTED,
    assetSubGroupDropDownList
  );
  yield takeLatest(
    ADMINISTRATION_CREATE_ASSET_SUB_GROUP_REQUESTED,
    createAssetSubGroup
  );
  yield takeLatest(
    ADMINISTRATION_DELETE_ASSET_SUB_GROUP_REQUESTED,
    deleteAssetSubGroup
  );
  yield takeLatest(
    ADMINISTRATION_EDIT_ASSET_SUB_GROUP_REQUESTED,
    editAssetSubGroup
  );
  yield takeLatest(
    ORGANIZATION_INFOMATION_POST_REQUESTED,
    watchOragaizationInfomationPost
  );
  yield takeLatest(
    ADMINISTRATION_WORKFLOW_DUPLICATE_REQUESTED,
    duplicateWorkFlow
  );
  yield takeLatest(
    ADMINISTRATION_ORAGANIZATION_TIMEZONE_REQUESTED,
    watchOraganizationTimezon
  );
  yield takeLatest(ADMINISTRATION_WORKFLOW_DELETE_REQUESTED, deleteWorkFlow);
  yield takeLatest(
    ADMINISTRATION_WORKFLOW_CATEGORY_REQUESTED,
    workFlowCategoryList
  );
  yield takeLatest(
    ADMINISTRATION_CASES_CATEGORY_DISPOSITION_REQUESTED,
    watchCasesCategoryDisposition
  );
  yield takeLatest(
    ADMINISTRATION_CASES_CATEGORY_UPDATE_REQUESTED,
    watchCasesCategoryUpdate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_CATEGORY_DELETE_REQUESTED,
    watchCasesCategoryDelete
  );
  yield takeLatest(
    ADMINISTRATION_CASES_CATEGORY_CREATE_REQUESTED,
    watchCasesCategoryCreate
  );
  yield takeLatest(
    ADMINISTRATION_WORKFLOW_SUB_CATEGORY_REQUESTED,
    workFlowSubCategoryList
  );
  yield takeLatest(
    ADMINISTRATION_WORKFLOW_TASK_CATEGORY_REQUESTED,
    workFlowTaskCategoryList
  );
  yield takeLatest(ADMINISTRATION_WORKFLOW_CREATE_REQUESTED, createWorkFlow);
  yield takeLatest(ADMINISTRATION_WORKFLOW_UPDATE_REQUESTED, updateWorkFlow);
  yield takeLatest(ADMINISTRATION_ASSET_VALUE_LIST_REQUESTED, assetValueList);
  yield takeLatest(ADMINISTRATION_ASSET_CONFIDENTIALUITY_LIST_REQUESTED, assetConfidentiality);
  yield takeLatest(ASSET_CLASSIFICATION_CHANGE_TITLE_REQUESTED, assetClassificationTitleChange);
  yield takeLatest(ASSET_CLASSIFICATION_FORMULA_CHANGE_REQUESTED, assetClassificationFormulaChange);
  yield takeLatest(ASSET_CLASSIFICATION_GET_FORMULA_REQUESTED, getAssetClassificationgFormula);
  yield takeLatest(ASSET_CLASSIFICATION_INTEGIRTY_LIST_REQUESTED, assetIntegrity);
  yield takeLatest(ASSET_CLASSIFICATION_INTEGIRTY_UPDATE_REQUESTED, updateIntegrity);
  yield takeLatest(ASSET_CLASSIFICATION_INTEGIRTY_DELETE_REQUESTED, deleteIntegrity);
  yield takeLatest(ASSET_CLASSIFICATION_INTEGIRTY_CREATE_REQUESTED, createIntegrity);
  yield takeLatest(ASSET_CLASSIFICATION_AVAILABILITY_LIST_REQUESTED, assetAvailability);
  yield takeLatest(ASSET_CLASSIFICATION_AVAILABILITY_CREATE_REQUESTED, createAvailability);
  yield takeLatest(ASSET_CLASSIFICATION_AVAILABILITY_UPDATE_REQUESTED, updateAvailability);
  yield takeLatest(ASSET_CLASSIFICATION_AVAILABILITY_DELETE_REQUESTED, deleteAvailability);
  yield takeLatest(ADMINISTRATION_ASSET_CONFIDENTIALUITY_UPDATE_REQUESTED, updateConfidentiality);
  yield takeLatest(ADMINISTRATION_ASSET_CONFIDENTIALUITY_CREATE_REQUESTED, createConfidentiality);
  yield takeLatest(ADMINISTRATION_ASSET_CONFIDENTIALUITY_DELETE_REQUESTED, deleteConfidentiality);
  yield takeLatest(
    ADMINISTRATION_CREATE_ASSET_VALUE_LIST_REQUESTED,
    createAssetValue
  );
  yield takeLatest(ADMINISTRATION_EDIT_ASSET_VALUE_REQUESTED, editAssetsValue);
  yield takeLatest(
    ADMINISTRATION_DELETE_ASSET_VALUE_REQUESTED,
    deleteAssetsValue
  );
  yield takeLatest(
    ADMINISTRATION_CHANGE_TITLE_ASSET_VALUE_REQUESTED,
    changeAssetValueTitle
  );
  yield takeLatest(
    ADMINISTRATION_GET_OPERATING_SYSTEM_LIST_REQUESTED,
    assetOsList
  );
  yield takeLatest(
    ADMINISTRATION_CREATE_OPERATING_SYSTEM_REQUESTED,
    createOperatingSystem
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_REQUESTED,
    riskManagementThreatRegister
  );

  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VALUE_REQUESTED,
    riskManagementThreatResisterValueList
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_VULNERABILITY_REQUESTED,
    riskManagementThreatResisterVulnerabilityList
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_CREATE_REQUESTED,
    createRiskManagementThreatRegister
  );

  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_UPDATE_REQUESTED,
    updateRiskManagementThreatRegister
  );

  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_THREAT_REGISTER_DELETE_REQUESTED,
    deleteRiskManagementThreatRegister
  );

  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_CONTROL_REGISTER_DELETE_REQUESTED,
    deleteRiskManagementControlRegister
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_REQUESTED,
    riskManagementThreatValue
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_CREATE_REQUESTED,
    createRiskManagementThreatValue
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_DELETE_REQUESTED,
    deleteRiskManagementThreatValue
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_THREAT_VALUE_UPDATE_REQUESTED,
    updateRiskManagementThreatValue
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_CONTROL_REGISTER_REQUESTED,
    riskManagementControlRegister
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_CONTROL_REGISTER_CREATE_REQUESTED,
    createRiskManagementControlRegister
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_CONTROL_REGISTER_UPDATE_REQUESTED,
    updateRiskManagementControlRegister
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_REQUESTED,
    riskManagementBusinessImpact
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_DELETE_REQUESTED,
    deleteRiskManagementBusinessImpact
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_CREATE_REQUESTED,
    createRiskManagementBusinessImpact
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_UPDATE_REQUESTED,
    updateRiskManagementBusinessImpact
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_BUSINESS_IMPACT_CHANGE_TITLE_REQUESTED,
    RiskManagementBusinessImpactChangeTitle
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_REQUESTED,
    riskManagementCompliance
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_CREATE_REQUESTED,
    createRiskManagementCompliance
  );
  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_DELETE_REQUESTED,
    deleteRiskManagementCompliance
  );

  yield takeLatest(
    ADMINISTRATION_RISKMANAGEMENT_COMPLIANCE_UPDATE_REQUESTED,
    updateRiskManagementCompliance
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_VENDORS_LIST_REQUESTED,
    automationVendors
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_VENDORS_CREATE_LIST_REQUESTED,
    createAutomationVendors
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_VENDORS_UPDATE_LIST_REQUESTED,
    updateAutomationVendors
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_VENDORS_DELETE_LIST_REQUESTED,
    deleteAutomationVendors
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_PUBLISHERS_LIST_REQUESTED,
    automationPublishers
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_PUBLISHERS_CREATE_LIST_REQUESTED,
    createAutomationPublishers
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_PUBLISHERS_UPDATE_LIST_REQUESTED,
    updateAutomationPublishers
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_PUBLISHERS_DELETE_LIST_REQUESTED,
    deleteAutomationPublishers
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_ACTIONIO_LIST_REQUESTED,
    automationActionIO
  );
  yield takeLatest(
    AUTOMATION_ACTION_DUPLICATE_REQUESTED,
    watchautomationActionDuplication
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_ACTIONS_OUTPUT_REQUESTED,
    watchActionOutput
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_ACTIONIO_CREATE_LIST_REQUESTED,
    createAutomationActionIO
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_ACTIONIO_VALIDATION_LIST_REQUESTED,
    automationActionIOValidationList
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_ACTIONIO_UPDATE_LIST_REQUESTED,
    updateAutomationActionsIO
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_ACTIONIO_DELETE_LIST_REQUESTED,
    deleteAutomationActionsIO
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_THREAT_LIST_REQUESTED,
    automationThreat
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_THREAT_DELETE_LIST_REQUESTED,
    deleteAutomationThreat
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_THREAT_CREATE_LIST_REQUESTED,
    createAutomationThreat
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_THREAT_UPDATE_LIST_REQUESTED,
    updateAutomationThreat
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_CASE_FAMILY_LIST_REQUESTED,
    automationFamily
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_CASE_FAMILY_CREATE_LIST_REQUESTED,
    createAutomationFamily
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_CASE_FAMILY_DELETE_LIST_REQUESTED,
    deleteAutomationFamily
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_CASE_FAMILY_UPDATE_LIST_REQUESTED,
    updateAutomationFamily
  );
  yield takeLatest(
    ADMINISTRATION_EDIT_OPERATING_SYSTEM_REQUESTED,
    editOperatingSystem
  );
  yield takeLatest(
    ADMINISTRATION_DELETE_OPERATING_SYSTEM_REQUESTED,
    deleteOperatingSystem
  );
  yield takeLatest(
    ADMINISTRATION_GET_ASSET_DEPARTMENT_LIST_REQUESTED,
    assetDepartmentList
  );
  yield takeLatest(
    ADMINISTRATION_CREATE_ASSET_DEPARTMENT_LIST_REQUESTED,
    createAssetDepartment
  );
  yield takeLatest(
    ADMINISTRATION_EDIT_DEPARTMENT_REQUESTED,
    editAssetDepartment
  );
  yield takeLatest(
    ADMINISTRATION_DELETE_DEPARTMENT_REQUESTED,
    deleteAssetDepartment
  );

  yield takeLatest(ADMINISTRATION_CASES_CONTAINER_LIST_REQUESTED, watchContainerList);
  yield takeLatest(ADMINISTRATION_CASES_DESPOSITION_REQUESTED, watchCasesDisposition);
  yield takeLatest(ADMINISTRATION_CASES_CATEGORY_REQUESTED, watchCasesCategoriesList);

  yield takeLatest(
    ADMINISTRATION_ASSET_GET_BUSINESS_GROUP_LIST_REQUESTED,
    getAssetBusinessGroupList
  );
  yield takeLatest(
    ADMINISTRATION_ASSET_CREATE_BUSINESS_GROUP_LIST_REQUESTED,
    createAssetBusinessGroup
  );
  yield takeLatest(
    ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_LIST_REQUESTED,
    editAssetBusinessGroup
  );
  yield takeLatest(
    ADMINISTRATION_ASSET_DELETE_BUSINESS_GROUP_LIST_REQUESTED,
    deleteAssetBusinessGroup
  );
  yield takeLatest(
    ADMINISTRATION_ASSET_EDIT_BUSINESS_GROUP_TITLE_REQUESTED,
    editAssetBusinessGroupTitle
  );
  yield takeLatest(
    ADMINISTRATION_CASES_CATEGORY_LIST_REQUESTED,
    watchCasesCategory
  );
  yield takeLatest(
    ADMINISTRATION_GET_ASSET_TYPE_ASSET_DROP_DOWN_LIST_REQUESTED,
    getAssetDropDownList
  );
  yield takeLatest(
    ADMINISTRATION_GET_ASSET_TYPE_SUBGROUP_DROP_DOWN_LIST_REQUESTED,
    getSubGroupDropDownList
  );
  yield takeLatest(
    ADMINISTRATION_GET_ASSET_TYPE_OWNER_DROP_DOWN_LIST_REQUESTED,
    getOwnerDropDownList
  );
  yield takeLatest(
    ADMINISTRATION_GET_ASSET_TYPE_DEPARTMENT_DROP_DOWN_LIST_REQUESTED,
    getDepartmentDropDownList
  );
  yield takeLatest(
    ADMINISTRATION_GET_ASSET_TYPE_ASSET_VALUE_DROP_DOWN_LIST_REQUESTED,
    getAssetValueDropDownList
  );
  yield takeLatest(
    ADMINISTRATION_CREATE_ASSET_TYPE_REQUESTED,
    createAssetTypeList
  );
  yield takeLatest(ADMINISTRATION_EDIT_ASSET_TYPE_REQUESTED, editAssetTypeList);
  yield takeLatest(
    ADMINISTRATION_CASES_SUBCATEGORY_LIST_REQUESTED,
    watchCasesSubCategory
  );
  yield takeLatest(
    ADMINISTRATION_CASES_SUB_CATEGORY_CREATE_REQUESTED,
    watchCasesSubCategoryCreate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_SUB_CATEGORY_UPDATE_REQUESTED,
    watchCasesSubCategoryUpdate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_SUB_CATEGORY_DELETE_REQUESTED,
    watchCasesSubCategoryDelete
  );
  yield takeLatest(
    ADMINISTRATION_SUB_CATEGORY_LIST_REQUESTED,
    watchCasesSubCategoryList
  );
  yield takeLatest(ADMINISTRATION_ASSET_TYPE_LIST_REQUESTED, getAssetTypeList);
  yield takeLatest(
    ADMINISTRATION_EDIT_ASSET_TYPE_TITLE_REQUESTED,
    editAssetTypeTitle
  );
  yield takeLatest(ADMINISTRATION_DELETE_ASSET_TYPE_REQUESTED, deleteAssetType);
  yield takeLatest(
    ADMINISTRATION_PRIMARY_CATEGORY_LIST_REQUESTED,
    watchCasesSubCategoryList
  );
  yield takeLatest(
    ADMINISTRATION_CASES_DISPOSITIONS_LIST_REQUESTED,
    watchCasesDispositionsList
  );
  yield takeLatest(
    ADMINISTRATION_CASES_DISPOSITION_UPDATE_REQUESTED,
    watchCasesDispositionUpdate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_DISPOSITION_DELETE_REQUESTED,
    watchCasesDispositionDelete
  );
  yield takeLatest(
    ADMINISTRATION_CASES_DISPOSITION_CREATE_REQUESTED,
    watchCasesDispositionCreate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_SUB_DISPOSITION_LIST_REQUESTED,
    watchSubDispositions
  );
  yield takeLatest(
    ADMINISTRATION_CASES_SUB_DISPOSITION_CREATE_REQUESTED,
    watchCasesSubDispositionCreate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_SUB_DISPOSITION_UPDATE_REQUESTED,
    watchCasesSubDispositionUpdate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_SUB_DISPOSITION_DELETE_REQUESTED,
    watchCasesSubDispositionDelete
  );
  yield takeLatest(
    ADMINISTRATION_VULNERABILITY_TECHNICAL_REQUESTED,
    watchvulnerabilityTechnical
  );
  yield takeLatest(
    ADMINISTRATION_SUB_CATEGORY_LIST_REQUESTED,
    watchCasesSubCategoryList
  );
  yield takeLatest(ADMINISTRATION_DELETE_ASSET_TYPE_REQUESTED, deleteAssetType);
  yield takeLatest(
    ADMINISTRATION_CASES_SUB_DISPOSITION_DROPDOWN_LIST_REQUESTED,
    watchSubDispositionsDropDownList
  );
  yield takeLatest(
    ADMINISTRATION_CASES_DITECTION_METHOD_LIST_REQUESTED,
    watchDitectionMethod
  );
  yield takeLatest(
    ADMINISTRATION_CASES_DITECTION_METHOD_DELETE_REQUESTED,
    watchCasesDetectionMethodDelete
  );
  yield takeLatest(
    ADMINISTRATION_CASES_DITECTION_METHOD_UPDATE_REQUESTED,
    watchCasesDitectionMethodUpdate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_DITECTION_METHOD_CREATE_REQUESTED,
    watchCasesDitectionMethodCreate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_SLA_LIST_REQUESTED,
    watchDitectionSlas
  );
  yield takeLatest(
    ADMINISTRATION_CASES_SLA_DELETE_REQUESTED,
    watchDeleteDitectionSlas
  );

  yield takeLatest(
    ADMINISTRATION_CASES_SLA_CREATE_REQUESTED,
    watchCreateDitectionSlas
  );

  yield takeLatest(
    ADMINISTRATION_CASES_SLA_UPDATE_REQUESTED,
    watchUpdateDitectionSlas
  );
  yield takeLatest(
    ADMINISTRATION_CASES_SLA_VIEW_LIST_REQUESTED,
    watchLogDitectionSlas
  );
  yield takeLatest(
    ADMINISTRATION_CASES_SLA_RULE_LIST_REQUESTED,
    watchSlasRulesView
  );
  yield takeLatest(
    ADMINISTRATION_CASES_LOCATIONS_LIST_REQUESTED,
    watchCasesLocationsList
  );
  yield takeLatest(
    ADMINISTRATION_CASES_LOCATION_DELETE_REQUESTED,
    watchCasesLocationDelete
  );
  yield takeLatest(
    ADMINISTRATION_CASES_LOCATION_CREATE_REQUESTED,
    watchCasesLocationCreate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_LOCATION_UPDATE_REQUESTED,
    watchCasesLocationUpdate
  );
  yield takeLatest(
    ADMINISTRATION_VULNERABILITY_TECHNICAL_DELETE_REQUESTED,
    deleteTechnicalVulnerability
  );
  yield takeLatest(
    ADMINISTRATION_VULNERABILITY_SEVERITY_REQUESTED,
    vulnerabilityseverityList
  );
  yield takeLatest(
    ADMINISTRATION_VAL_SEVERTIY_LEVEL_LIST_REQUESTED,
    vulnerabilityseverityLevelList
  );
  yield takeLatest(
    ADMINISTRATION_VAL_SEVERTIY_LEVEL_CREATE_LIST_REQUESTED,
    createVulnerabilityseverityLevelList
  );
  yield takeLatest(
    ADMINISTRATION_VAL_SEVERTIY_LEVEL_UPDATE_LIST_REQUESTED,
    updateVulnerabilityseverityLevelList
  );
  yield takeLatest(
    ADMINISTRATION_VAL_SEVERTIY_LEVEL_DELETE_LIST_REQUESTED,
    deleteVulnerabilityseverityLevelList
  );

  yield takeLatest(
    ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_LIST_REQUESTED,
    nontechvulnerabilityseverityLevelList
  );
  yield takeLatest(
    ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_DELETE_LIST_REQUESTED,
    deleteNonVulnerabilityseverityLevelList
  );
  yield takeLatest(
    ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_UPDATE_LIST_REQUESTED,
    updateNonVulnerabilityseverityLevelList
  );
  yield takeLatest(
    ADMINISTRATION_NON_VAL_SEVERTIY_LEVEL_CREATE_LIST_REQUESTED,
    createNonVulnerabilityseverityLevelList
  );
  yield takeLatest(
    ADMINISTRATION_VULNERABILITY_TECHNICAL_CREATE_REQUESTED,
    createTechnicalVulnerability
  );
  yield takeLatest(
    ADMINISTRATION_VULNERABILITY_TECHNICAL_UPDATE_REQUESTED,
    updateTechnicalVulnerability
  );
  yield takeLatest(
    ADMINISTRATION_VULNERABILITY_NON_TECHNICAL_REQUESTED,
    watchvulnerabilityNonTechnical
  );
  yield takeLatest(
    ADMINISTRATION_VULNERABILITY_NON_TECHNICAL_SEVERITY_REQUESTED,
    vulnerabilityNonTechnicalseverityList
  );
  yield takeLatest(
    ADMINISTRATION_VULNERABILITY_THREAT_REQUESTED,
    vulnerabilitythreatList
  );
  yield takeLatest(
    ADMINISTRATION_VULNERABILITY_NON_TECHNICAL_DELETE_REQUESTED,
    deleteNonTechnicalVulnerability
  );
  yield takeLatest(
    ADMINISTRATION_VULNERABILITY_TECHNICAL_NON_UPDATE_REQUESTED,
    updateNonTechnicalVulnerability
  );
  yield takeLatest(
    ADMINISTRATION_VULNERABILITY_NON_TECHNICAL_CREATE_REQUESTED,
    createNonTechnicalVulnerability
  );
  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_CATEGORY_LIST_REQUESTED,
    threatIntelCategoryList
  );
  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_CATEGORY_CREATE_REQUESTED,
    createthreatIntelCategoryList
  );
  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_CATEGORY_DELETE_REQUESTED,
    deletethreatIntelCategoryList
  );
  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_CATEGORY_UPDATE_REQUESTED,
    updatethreatIntelCategoryList
  );


  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_SUB_CATEGORY_LIST_REQUESTED,
    threatIntelSubCategoryList
  );
  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_SUB_CATEGORY_CREATE_REQUESTED,
    createthreatIntelSubCategoryList
  );
  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_SUB_CATEGORY_DELETE_REQUESTED,
    deletethreatIntelSubCategoryList
  );
  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_SUB_CATEGORY_UPDATE_REQUESTED,
    updatethreatIntelSubCategoryList
  );
  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_SEVERITY_REQUESTED,
    threatIntelSeverityList
  );
  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_PRIMARY_CATEGORY_REQUESTED,
    threatIntelPrimaryCateogryList
  );

  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_PERIORITIE_DELETE_REQUESTED,
    watchadministratorCasesNcissPerioritieDelete
  );

  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_DELETE_LIST_REQUESTED,
    deleteCasesNciss
  );

  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_PERIORITIE_UPDATE_REQUESTED,
    watchadministratorCasesNcissPerioritieUpdate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_PERIORITIE_CREATE_REQUESTED,
    watchadministratorCasesNcissPerioritieCreate
  );

  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_LIST_REQUESTED,
    watchCasesNcissList
  );
  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_CATEGORY_LIST_REQUESTED,
    watchCasesNcissDropDownList
  );
  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_CREATE_REQUESTED,
    watchCasesNcissCreate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_UPDATE_REQUESTED,
    watchCasesNcissUpdate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_CATEGORIES_LIST_REQUESTED,
    watchCasesncissCategoriesList
  );
  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_CATEGORIES_UPDATE_REQUESTED,
    watchCasesncissCategoriesUpdate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_CATEGORIES_CREATE_REQUESTED,
    watchCasesncissCategoriesCreate
  );
  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_CATEGORIES_DELETE_REQUESTED,
    watchCasesncissCategoriesDelete
  );
  yield takeLatest(
    ADMINISTRATION_CASES_NCISS_PERIORITIES_LIST_REQUESTED,
    watchadministratorCasesNcissPeriorities
  );
  yield takeLatest(
    ADMINISTRATION_GET_DISPOSITION_LIST_REQUESTED,
    getThreatIntelDispositionList
  );
  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_DISPOSITION_UPDATE_REQUESTED,
    updateThreatIntelDispositionList
  );
  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_DISPOSITION_CREATE_REQUESTED,
    createThreatIntelDispositionList
  );
  yield takeLatest(
    ADMINISTRATION_THREAT_INTEL_DISPOSITION_DELETE_REQUESTED,
    deleteThreatIntelDispositionList
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_INGESTION_LIST_REQUESTED,
    automationIngestionList
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_INGESTION_CREATE_LIST_REQUESTED,
    createAutomationIngestion
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_INGESTION_UPDATE_LIST_REQUESTED,
    updateAutomationIngestion
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_INGESTION_DELETE_LIST_REQUESTED,
    deleteAutomationIngestionIO
  );
  yield takeLatest(INGESTION_TYPE_REQUESTED, watchIngestionType);
  yield takeLatest(INGESTION_WIDGET_REQUESTED, watchIngestionWidget);
  yield takeLatest(INGESTION_FREQUENCY_REQUESTED, watchInjestionFrequency);
  yield takeLatest(INGESTION_APPLICATION_REQUESTED, watchIngestionApplication);
  yield takeLatest(INGESTION_USERS_REQUESTED, watchInjestionUsers);
  yield takeLatest(INGESTION_ACTION_REQUESTED, watchIngestionAction);
  yield takeLatest(ENABLE_ADVISORY_REQUESTED, watchAdvisory);
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_ACTIONS_LIST_REQUESTED,
    automationActionsList
  );
  yield takeLatest(
    AUTOMATION_ACTION_CONFIGURATION_REQUESTED,
    automationConfigurationList
  );
  yield takeLatest(
    AUTOMATION_ACTION_CONFIGURATION_POST_REQUESTED,
    automationConfigurationIngestionPost
  );
  yield takeLatest(
    AUTOMATION_ACTION_VIEW_SCRIPT_REQUESTED,
    automationViewScript
  );
  yield takeLatest(
    AUTOMATION_ACTION_MULTIDATA_POST_REQUESTED,
    automationactionUpdateList
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_ACTIONS_CREATE_LIST_REQUESTED,
    createAutomationList
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_ACTIONS_UPDATE_LIST_REQUESTED,
    updatAutomationActionList
  );
  yield takeLatest(
    ADMINISTRATION_AUTOMATION_ACTIONS_DELETE_LIST_REQUESTED,
    deleteAutomationActionList
  );
  yield takeLatest(ACTIONS_TYPE_REQUESTED, actionsType);
  yield takeLatest(ACTIONS_SCRIPT_TYPE_REQUESTED, actionsScript);
  yield takeLatest(ACTIONS_IO_TYPE_REQUESTED, actionsIoType);
  yield takeLatest(ACTIONS_APPLICATION_REQUESTED, actionsApplication);
  yield takeLatest(GET_INGESTION_MULTI_DATA_REQUESTED, ingestionGetMultiData);
  yield takeLatest(GET_INGESTION_MAPPING_REQUESTED, ingestionGetMapping);
  yield takeLatest(ADD_INGESTION_MULTI_DATA_REQUESTED, ingestionAddMultiData);
  yield takeLatest(ADMINISTRATION_LOGS_APPS_LIST_REQUESTED, logsAppList);
  yield takeLatest(
    ADMINISTRATION_LOGS_AUTHENTICATION_LIST_REQUESTED,
    logsAuthenticationList
  );
  yield takeLatest(
    ADMINISTRATION_LOGS_ACTIVITY_LIST_REQUESTED,
    logsActivityList
  );
  yield takeLatest(
    ADMINISTRATION_LOGS_INGESTION_LIST_REQUESTED,
    logsIngestionList
  );
  yield takeLatest(
    ADMINISTRATION_PRODUCT_FAILED_REGISTER_LIST_REQUESTED,
    productsRegisterList
  );
  yield takeLatest(
    ADMINISTRATION_PRODUCT_FAILED_REGISTER_DELETE_REQUESTED,
    productsRegisterDeleteList
  );
  yield takeLatest(ADMINISTRATION_ACCESS_USERS_LIST_REQUESTED, accessUsersList);
  yield takeLatest(
    ADMINISTRATION_ACCESS_USERS_DELETE_REQUESTED,
    accessUserDeleteList
  );
  yield takeLatest(
    ADMINISTRATION_ACCESS_AUTHENTICATION_TYPE_REQUESTED,
    authenticateType
  );
  yield takeLatest(
    ADMINISTRATION_ACCESS_PERMISSION_REQUESTED,
    accessPermission
  );
  yield takeLatest(
    ADMINISTRATION_ACCESS_LANDING_PAGE_REQUESTED,
    accessLandingPage
  );
  yield takeLatest(ADMINISTRATION_ACCESS_GROUP_REQUESTED, accessGroup);
  yield takeLatest(ADMINISTRATION_ACCESS_SESSION__PASSWORD_REQUESTED, WatchSessionPassword);
  yield takeLatest(ADMINISTRATION_ACCESS_SESSION__PASSWORD_UPDATE_REQUESTED, WatchuUpdateSessionPassword);
  yield takeLatest(ADMINISTRATION_ACCESS_USERS_UPDATE_REQUESTED, watchAccessUserUpdate);
  yield takeLatest(ADMINISTRATION_ACCESS_USER_INVITE_REQUESTED, watchAccessInviteUser);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTORL_GROUPS_REQUESTED, watchAccessControlGroups);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTORL_GROUP_UPDATE_REQUESTED, watchAccessGroupsUpdate);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTORL_GROUP_CREATE_REQUESTED, watchAccessGroupsCreate);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTORL_GROUP_DELETE_REQUESTED, watchAccessGroupsDelete);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTORL_ROLES_REQUESTED, watchAccessControlRoles);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTORL_ROLE_UPDATE_REQUESTED, watchAccessRoleUpdate);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTORL_ROLE_DELETE_REQUESTED, watchAccessRoleDelete);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTORL_ROLE_CREATE_REQUESTED, watchAccessRoleCreate);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_ACTIONS_REQUESTED, watchAccessControlActions);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_ACTION_UPDATE_REQUESTED, watchAccessActionsUpdate);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_ACTION_CREATE_REQUESTED, watchAccessActionsCreate);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_ACTION_DELETE_REQUESTED, watchAccessActionsDelete);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_REQUESTED, watchAccessControlActionGroup);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_ACTIONS_GROUP_TAB_REQUESTED, watchAccessControlActionsGroupTab);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_UPDATE_REQUESTED, watchAccessActionsGroupUpdate);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_CREATE_REQUESTED, watchAccessActionsGroupCreate);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_ACTION_GROUP_DELETE_REQUESTED, watchAccessActionsGroupDelete);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_LIST_REQUESTED, watchAccessControlAuthSetting);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_TYPE_LIST_REQUESTED, watchAccessControlAuthenticationType);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_AUTH_SETTING_AUTHENTICATION_VENDOR_REQUESTED, watchAccessControlAuthenticationVendors);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_DELETE_AUTH_SETTING_REQUESTED, watchDeleteThirdPartyAuth);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_CREATE_AUTH_SETTING_REQUESTED, watchCreateThirdPartyAuth);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_UPDATE_AUTH_SETTING_REQUESTED, watchUpdateThirdPartyAuth);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_LIST_REQUESTED, watchAccessControlPrevileges);

  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_CREATE_REQUESTED, watchAccessControlPrevilegesCreate);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_UPDATE_REQUESTED, watchAccessControlPrevilegesUpdate);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_DELETE_REQUESTED, watchAccessControlPrevilegesDelete);

  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PREVILEGES_GROUP_REQUESTED, watchAccessControlPrevilegesGroup);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_LIST_REQUESTED, watchProductSettingFeedbackList);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_FEEDBACK_DELETE_REQUESTED, watchDeleteProductSettingFeedback);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGETS_LIST_REQUESTED, watchProductSettingWidget);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_UPDATE_REQUESTED, watchUpdateWidgets);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_CREATE_REQUESTED, watchCreateWidgets);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_DELETE_REQUESTED, watchDeleteWidget);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_GROUP_LIST_REQUESTED, watchProductSettingWidgetGroup);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_WIDGET_SOURCE_LIST_REQUESTED, watchProductSettingWidgetSources);
  yield takeLatest(ADMINISTRATION_PRODUCT_LICENSE_INFO_LIST_REQUESTED, watchProductLicense);
  yield takeLatest(ADMINISTRATION_PRODUCT_LICENSE_UPLOAD_REQUESTED, uploadLicense);
  yield takeLatest(ADMINISTRATION_PRODUCT_LICENSE_CREATE_REQUESTED, createLicense);
  yield takeLatest(ADMINISTRATION_PRODUCT_SETTINGS_PATCH_REQUESTED, patchUpdate);
  yield takeLatest(ADMINISTRATION_PRODUCT_LICENSE_SOURCES_REQUESTED, licenceModulesSources);
  yield takeLatest(ADMINISTRATION_NOTIFICATIONS_LIST_REQUESTED, watchNotificationList);
  yield takeLatest(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_HEALTH_REQUESTED, watchProductSettingHealth)
  yield takeEvery(ADMINISTRATION_NOTIFICATIONS_UPDATE_REQUESTED, watchNotificationUpdate);

  yield takeEvery(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_LIST_REQUESTED, watchProductSettingBackupList);
  yield takeEvery(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_IMPORT_BACKUP_REQUESTED, watchImportBackup);
  yield takeEvery(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_SETTING_RESTORE_BACKUP_REQUESTED, watchRestoreBackup);
  yield takeEvery(ADMINISTRATION_PRODUCT_SETTTING_BACKUP_SETTING_RESTORE_CONFIGURE_AUTO_BACKUP_REQUESTED, watchConfigureRestoreBackup);
  yield takeEvery(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_DELETE_REQUESTED, watchProductSettingBackupDelete);
  yield takeEvery(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_BACKUP_CREATE_REQUESTED, watchCreateBackup);
  yield takeEvery(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_NOTIFY_USERS_LIST_REQUESTED, watchNotifyWatchList);
  yield takeEvery(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_DOWNLOAD_REQUESTED, watchDowloadBackup);
  yield takeEvery(ADMINISTRATION_ACCESS_CONTROL_PRODUCT_SETTTING_GET_BACKUP_SETTING_REQUESTED, watchGetBackupSettingAPI);
  yield takeLatest(ADMINISTRATION_FIELD_SETTING_LIST_REQUESTED, watchFieldSettingList);
  yield takeLatest(ADMINISTRATION_FIELD_SETTING_UPDATE_REQUESTED, watchFieldSettingUpdate);
  yield takeLatest(ADMINISTRATION_CASE_FIELD_SETTING_LIST_REQUESTED, watchCaseFieldSettingList);
  yield takeLatest(ADMINISTRATION_CASE_FIELD_SETTING_UPDATE_REQUESTED, watchCaseFieldSettingUpdate);
  yield takeEvery(ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_GET_DEFAULT_REQUESTED, watchProbabilityGetDefault);
  yield takeEvery(ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_LIST_REQUESTED, watchProbabilityList);
  yield takeEvery(ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_DELETE_LIST_REQUESTED, watchDeleteProbabilityList);
  yield takeEvery(ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_UPDATE_LIST_REQUESTED, watchUpdateProbabilityList);
  yield takeEvery(ADMINISTRATION_RISKMANAGEMENT_PROBABLITY_CREATE_LIST_REQUESTED, watchCreateProbabilityList);
  yield takeEvery(ADMINISTRATION_RISKMANAGEMENT_CHANGE_TITLE_REQUESTED, watchChangeTitle);
  yield takeEvery(ADMINISTRATION_RISKMANAGEMENT_UPDATE_FORMULA_REQUESTED, watchUpdateFormula);
  yield takeEvery(ADMINISTRATION_RISKMANAGEMENT_GET_FORMULA_REQUESTED, watchGetFormula);
  yield takeLatest(ADMINISTRATION_GET_TABS_HEADING_REQUESTED, watchCaseGetTabsHeadings);
  yield takeLatest(ADMINISTRATION_RISK_MATRIX_LIST_REQUESTED, watchGetRiskMatrix);
  yield takeLatest(ADMINISTRATION_CREATE_RISK_MATRIX_REQUESTED, watchCreateRiskMatrix)
  yield takeEvery(ADMINISTRATION_RESET_RISK_MATRIX_REQUESTED, watchResetRiskMatrix);
  yield takeEvery(ADMINISTRATION_RISKMANAGEMENT_GET_RISK_META_REQUESTED, watchRiskMetaList);
  yield takeLatest(ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_LABEL_REQUESTED, watchRiskMetaLabelUpdate);
  yield takeLatest(ADMINISTRATION_RISKMANAGEMENT_RISK_META_UPDATE_REQUESTED, watchRiskMetaUpdate);
  yield takeEvery(ADMINISTRATION_GET_RISK_MATRIX_DROPDOWN_DATA_REQUESTED, watchGetRiskMatrixDropdownData);
  yield takeLatest(ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_LIST_REQUESTED,watchGetThreatActorList);
  yield takeLatest(ADMINISTRATION_THREAT_INTEL_ASSOCIATE_ACTOR_THREAT_ACTOR_REQUESTED,watchAssociateGroupThreatActor);
  yield takeLatest(ADMINISTRATION_THREAT_INTEL_ASSOCIATE_THREAT_ACTOR_LIST_REQUESTED,associateThreatActorList);
  yield takeLatest(ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_CREATE_REQUESTED, watchThreatActorCreate);
  yield takeLatest(ADMINISTRATION_THREAT_INTEL_THREAT_ACTOR_UPDATE_REQUESTED, watchThreatActorUpdate);
}
