import React, { useEffect, useState } from 'react';
import { compose } from 'redux';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import Dustbin from '../../../../../../assets/svgIcon/dustbin';
import Pencil from '../../../../../../assets/svgIcon/pencil';
import SetDocumentTitleHOC from '../../../../../../HOCs/SetDocumentTitleHOC';
import AuthTokenHOC from '../../../../../../HOCs/AuthTokenHOC';
import {
    deleteTechnicalVulnerability,
    createTechnicalVulnerability,
    updateTechnicalVulnerability,
    valTechserverity,
    valNoTechserverity,
    deleteNonValTechserverity,
    updateNonValTechserverity,
    createNonValTechserverity,
} from '../../../../../../actions/administration';
import queryString from 'query-string';
import SPTable from '../../../../../../components/SPTable';
import SPDrawer from '../../../../../../components/SPDrawer';
import SPButton from '../../../../../../components/SPButton';
import SPSearch from '../../../../../../components/SPSearch';
import { Row, Col, Modal } from 'antd';
import { useHistory, useParams } from 'react-router';
import SPSelect from '../../../../../../components/SPSelect';
import { showingFilter } from '../../../constant';
import { isEmpty } from 'lodash-es';
import TechnicalFormDrawer from './TechnicalForm';
import PageHeader from '../../../../../layout/pageHeader';
import PlusIcon from '../../../../../../assets/svgIcon/plusIcon';
const { confirm } = Modal;
import SPSingleSelectDropdown from '../../../../../../components/SPSingleSelectDropdown';
import { ExclamationCircleOutlined } from '@ant-design/icons';
import SeverityNonTechnicalForm from './SeverityNonTechnicalForm'


const SeverityNonTechnical = ({
    onGetList,
    vulnerabilityList,
    updateList,
    deleteList,
    createList,
    userProfile,
   isLoading,
   access
}) => {
    const history = useHistory();
    const [openDrawer, setOpenDrawer] = useState(false);
    const [isCreate, setIsCreate] = useState(false);
    const [record, setRecord] = useState({});
    const [totalCount, setTotalCount] = useState(1);
    const [currentPage, setCurrentPage] = useState(1);
    const [query, setQuery] = useState(location.search);
    const [severityOptions, setSeverityOptions] = useState([]);

    const {
        perPage = '20',
        page = 1,
        subject,
        sort = undefined,
    } = queryString.parse(query);

    const [showing, setShowing] = useState(perPage);
    const [searchText, setSearchText] = useState(subject);
    const [activeOption, setActiveOption] = useState(
        history.location.pathname.split('/')[2] || 'all'
    );

    useEffect(() => {
        const myArrayQry = mapQueryWithApi(query);
        onGetList({ queryItem: myArrayQry });
    }, [query] || []);

    useEffect(() => {
        if (vulnerabilityList) {
            setTotalCount(vulnerabilityList?._meta?.totalCount);
            setCurrentPage(vulnerabilityList?._meta?.currentPage);
        }
    }, [vulnerabilityList]);

    function showConfirm(key) {
        confirm({
            title: 'Are you sure you want to delete Technical Vulnerability?',
            centered: true,
            icon: <ExclamationCircleOutlined />,
            onOk() {
                const myArrayQry = mapQueryWithApi(query);
                deleteList(key, myArrayQry);
            },
            onCancel() {
                console.log('Cancel');
            },
        });
    }

    const columns = [
        {
            title: '#',
            dataIndex: 'vls_id',
            editable: false,
            key: (text, record, index) => record?.vc_id,
            render: (text, record, index) => (currentPage - 1) * showing + index + 1,
        },
        {
            title: 'Name',
            dataIndex: 'vls_name',
            editable: false,
            sorter: true,
            width: '45%',
        },
        {
            title: 'Value',
            dataIndex: 'vls_value',
            sorter: true,
            width: '45%',
            key: (text, record, index) => record?.vc_id,
        },
        {
            title: 'Actions',
            dataIndex: 'vc_id',
            dataIndex1: 'vc_id',
            editable: false,
            width: '60%',
            render: (text, record, index) => {
                const moreItems = [];
                if(access!==undefined && (access.includes("all-super-admin") || access.includes("update-vulnerability-severity"))){
                    const updateVulnerabilitySeverity=  {
                        key: 'edit',
                        label: 'Edit',
                        icon: <Pencil />,
                        onClickItem: () => {
                            setOpenDrawer(true);
                            if (record) {
                                setRecord(record);
                                setIsCreate(false)
                            }
                        },
                    };
                    moreItems.push(updateVulnerabilitySeverity);
                }
                if(access!==undefined && (access.includes("all-super-admin") || access.includes("update-vulnerability-severity"))){
                    const deleteVulnerabilitySeverity={
                        key: 'delete',
                        label: 'Delete',
                        icon: <Dustbin />,
                        onClickItem: () => {
                            showConfirm(record?.vls_id);
                        },
                    };
                    moreItems.push(deleteVulnerabilitySeverity);
                }


                if (userProfile?.usr_api_organization === record?.vls_organization  && moreItems.length !== 0) {
                    return (
                        <SPSingleSelectDropdown
                            items={moreItems}
                            onSelect={() => { }}
                            title="more"
                        />
                    );
                }
            },
        },
    ];

    function mapQueryWithApi(queryItem) {
        let myArrayQry = '';
        const parsedQuery = queryString.parse(queryItem);
        if (parsedQuery) {
            const queryObject = {
                payload: {},
                VulnerabilityRegisterSearch: {},
                QueryString: '',
            };
            if (parsedQuery.page) {
                queryObject.payload.page = parsedQuery.page;
            }
            if (parsedQuery.sort) {
                queryObject.payload.sort = parsedQuery.sort;
            }
            if (parsedQuery.subject) {
                queryObject.VulnerabilityRegisterSearch.search = parsedQuery.subject;
            }
            if (parsedQuery.perPage) {
                queryObject.payload['per-page'] = parsedQuery.perPage;
            }
            const applicationCategorySearch = queryObject?.VulnerabilityRegisterSearch;
            if (Object.keys(applicationCategorySearch).length !== 0) {
                Object.entries(applicationCategorySearch).forEach(([key, val]) => {
                    myArrayQry += 'VulnerabilityRegisterSearch[' + key + ']=' + val + '&';
                });
            }

            if (Object.keys(queryObject.payload).length !== 0) {
                Object.entries(queryObject.payload).forEach(([key, val]) => {
                    myArrayQry += key + '=' + val + '&';
                });
            }
        }

        return myArrayQry;
    }

    const handleTableChange = (pagination, filters, sorter) => {
        let columnIndex = sorter.field;
        if (sorter.order === 'ascend') {
            console.log({ columnIndex });
        } else if (sorter.order === 'descend') {
            columnIndex = '-' + columnIndex;
        } else {
            columnIndex = undefined;
        }
        if (columnIndex !== undefined && columnIndex !== sort) {
            handleChange('sort', columnIndex);
        }
    };

    const onPageChange = pageNumber => {
        handleChange('page', pageNumber);
        window.scrollTo(0, 0);
    };

    const handleChange = (name, value) => {
        if (value !== null || value !== undefined) {
            const obj = queryString.parse(query);
            if (value === 'all') {
                obj[name] = '';
            } else {
                obj[name] = value;
            }
            delete obj['active_tab'];
            const str = queryString.stringify(obj);
            if (name == 'perPage') {
                setShowing(value);
            }
            handleQuery(str);
        }
    };

    const handleQuery = qs => {
        if (activeOption !== 'all') {
            history.push(
                '/administration?active_tab=vulnerability_management&' +
                activeOption +
                '?' +
                qs
            );
        } else {
            history.push('/administration?active_tab=vulnerability_management&' + qs);
        }
        setQuery(qs);
    };

    const handleSubmit = values => {
        const myArrayQry = mapQueryWithApi(query);
        if (!isCreate) {
            // console.log(">>>values", values)
            updateList(record?.vls_id, values, myArrayQry);
        } else {
            createList(values, myArrayQry);
        }
        setOpenDrawer(false);
        setIsCreate(false);
        setRecord({});
    };
    return (
        <>
            <PageHeader
                title="Severity Level"
                options={[
                    (access!==undefined && (access.includes("all-super-admin") || access.includes("update-vulnerability-severity"))) &&
                    <SPButton
                        onButtonClick={() => {
                            setIsCreate(true);
                            setRecord({});
                            setOpenDrawer(true);
                        }}
                        title="Create Vulnerability Severity"
                        size="small"
                        image={<PlusIcon />}
                    />
                ]}
            />
            <Row gutter={[19, 25]}>
                <Col
                    span={12}
                    style={{ display: "inherit" }}
                >
                    <div>
                        <SPSearch
                            text={searchText}
                            onChange={e => {
                                setSearchText(e.target.value);
                            }}
                            placeholder="Search..."
                            onEnter={() => {
                                handleChange('subject', searchText);
                            }}
                            size="420px"
                        />
                    </div>
                    <div style={{ marginLeft: 20 }}>
                        <SPSelect
                            title="Showing"
                            items={showingFilter}
                            selected={perPage}
                            onChange={e => {
                                handleChange('perPage', e.key);
                            }}
                        />
                    </div>
                </Col>
            </Row>
            <SPTable
                columns={columns}
                dataSource={vulnerabilityList?.items}
                onPageChange={onPageChange}
                canPaginate
                emptyText="No Data"
                totalRecords={totalCount}
                showingTill={showing}
                handleTableChange={handleTableChange}
                currentShowing={
                    currentPage === 1 ? currentPage : (currentPage - 1) * showing + 1
                }
                currentPage={currentPage}
                isLoading={isLoading}
            />
            <SPDrawer
                title={`${isCreate ? 'Add' : 'Update'} Severity `}
                isVisible={openDrawer}
                onClose={() => setOpenDrawer(false)}
            >
                <SeverityNonTechnicalForm
                    submit={handleSubmit}
                    closeDrawer={() => setOpenDrawer(false)}
                    isOpen={openDrawer}
                    isCreate={isCreate}
                    record={record}
                />
            </SPDrawer>
        </>
    );
};

const mapStateToProps = state => ({
    vulnerabilityList: state.administration.vulnerabilityList.nontecnicalServerityLevel,
    isLoading: state.administration.vulnerabilityList.loading,
    userProfile: state?.userStore?.userProfile?.data?.profile[0],
});

const mapDispatchToProps = dispatch => ({
    onGetList: payload => dispatch(valNoTechserverity(payload)),
    updateList: (...args) => dispatch(updateNonValTechserverity(...args)),
    deleteList: (...args) => dispatch(deleteNonValTechserverity(...args)),
    createList: (...args) => dispatch(createNonValTechserverity(...args)),
});

export default compose(
    connect(mapStateToProps, mapDispatchToProps),
    SetDocumentTitleHOC,
    AuthTokenHOC
)(SeverityNonTechnical);
