import React, { useEffect, useState } from 'react';
import { compose } from 'redux';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import Dustbin from '../../../../../../assets/svgIcon/dustbin';
import Pencil from '../../../../../../assets/svgIcon/pencil';
import SetDocumentTitleHOC from '../../../../../../HOCs/SetDocumentTitleHOC';
import AuthTokenHOC from '../../../../../../HOCs/AuthTokenHOC';
import {
  deleteNonTechnicalVulnerability,
  vulnerabilityNonTechnicalSeverityList,
  updateNonTechnicalVulnerability,
  vulnerabilityNonTechnicalList,
  vulnerabilityThreatList,
  createNonTechnicalVulnerability,
} from '../../../../../../actions/administration';
import queryString from 'query-string';
import SPTable from '../../../../../../components/SPTable';
import { DeleteBox } from '../../Assets/AssetDetails/StyledComponents';
import SPDrawer from '../../../../../../components/SPDrawer';
import SPButton from '../../../../../../components/SPButton';
import SPSearch from '../../../../../../components/SPSearch';
import { Row, Col } from 'antd';
import { useHistory, useParams } from 'react-router';
import SPSelect from '../../../../../../components/SPSelect';
import { showingFilter } from '../../../constant';
import { isEmpty } from 'lodash-es';
import NonTechnicalFormDrawer from './NonTechnicalForm';
import PageHeader from '../../../../../layout/pageHeader';
import PlusIcon from '../../../../../../assets/svgIcon/plusIcon';
import SPSingleSelectDropdown from '../../../../../../components/SPSingleSelectDropdown';
import SeverityNonTechnical from './SeverityNonTechnical'


const TechnicalVulnerability = ({
  onGetList,
  vulnerabilityList,
  updateList,
  deleteList,
  createList,
  severityList,
  getSeverityList,
  getThreatList,
  userProfile,
  access
}) => {
  const history = useHistory();
  const [openDrawer, setOpenDrawer] = useState(false);
  const [isCreate, setIsCreate] = useState(false);
  const [record, setRecord] = useState({});
  const [totalCount, setTotalCount] = useState(1);
  const [currentPage, setCurrentPage] = useState(1);
  const [query, setQuery] = useState(location.search);
  const [severityOptions, setSeverityOptions] = useState([]);
  const [threatOptions, setThreatOptions] = useState([]);
  const [isHShowSeverityLevels, setIsHShowSeverityLevels] = useState(false);
  const { path } = useParams();

  const {
    tca_showing = '20',
    tca_page_no = 1,
    tca_subject,
    sort = undefined,
  } = queryString.parse(query);

  const [showing, setShowing] = useState(tca_showing);
  const [searchText, setSearchText] = useState(tca_subject);
  const [activeOption, setActiveOption] = useState(
    history.location.pathname.split('/')[2] || 'all'
  );
  useEffect(() => {
    getSeverityList();
    getThreatList();
  }, []);

  useEffect(() => {
    const myArrayQry = mapQueryWithApi(query);
    onGetList({ queryItem: myArrayQry, path });
  }, [query] || []);

  useEffect(() => {
    if (vulnerabilityList?.listData?.items) {
      setTotalCount(vulnerabilityList.listData._meta.totalCount);
      setCurrentPage(vulnerabilityList.listData._meta.currentPage);
    }
    if (vulnerabilityList?.severityList) {
      if (!isEmpty(vulnerabilityList.severityList)) {
        const arr = [];
        Object.entries(vulnerabilityList.severityList).map(
          ([key, value], index) =>
            arr.push({
              key: key,
              value: key,
              label: value,
            })
        );
        setSeverityOptions(arr);
      }
    }
    if (vulnerabilityList?.threatList) {
      if (!isEmpty(vulnerabilityList.threatList)) {
        const arr = [];
        Object.entries(vulnerabilityList.threatList).map(
          ([key, value], index) =>
            arr.push({
              key: key,
              value: key,
              label: value,
            })
        );
        setThreatOptions(arr);
      }
    }
  }, [vulnerabilityList]);

  const columns = [
    {
      title: '#',
      dataIndex: 'vrg_id',
      dataIndex1: 'vrg_id',
      editable: false,
      key: (text, record, index) => record?.vrg_id,
      render: (text, record, index) => (currentPage - 1) * showing + index + 1,
    },
    {
      title: 'Name',
      dataIndex: 'vrg_name',
      dataIndex1: 'vrg_name',
      editable: false,
      sorter: true,
      key: (text, record, index) => record?.vrg_id,
      render: (text, record, index) => record?.vrg_name,
    },
    {
      title: 'Description',
      dataIndex: 'vrg_desc',
      dataIndex1: 'vrg_desc',
      editable: false,
      sorter: true,
      key: (text, record, index) => record?.vrg_id,
      render: (text, record, index) => record?.vrg_desc,
    },
    {
      title: 'Severity',
      dataIndex: 'vrg_severity',
      dataIndex1: 'vrg_severity',
      editable: false,
      sorter: true,
      key: (text, record, index) => record?.vrg_id,
      render: (text, record, index) =>
        handleSeverityListView(record?.vrg_severity),
    },
    {
      title: 'Actions',
      dataIndex: 'vrg_id',
      dataIndex1: 'vrg_id',
      editable: false,
      render: (text, record, index) => {
        const moreItems = [];
        if(access!==undefined && (access.includes("all-super-admin") || access.includes("update-vulnerability-register"))){
          const updateVulnerabilityRegister={
            key: 'edit',
            label: 'Edit',
            icon: <Pencil />,
            onClickItem: () => {
              setOpenDrawer(true);
              setRecord(record);
            },
          };
          moreItems.push(updateVulnerabilityRegister);
        }
        if(access!==undefined && (access.includes("all-super-admin") || access.includes("delete-vulnerability-register"))){
          const deleteVulnerabilityRegister={
            key: 'delete',
            label: 'Delete',
            icon: <Dustbin />,
            onClickItem: () => {
              showConfirm(record.vrg_id);
            },
          };
          moreItems.push(deleteVulnerabilityRegister);
        }


        if (userProfile?.usr_api_organization === record?.vrg_organization && moreItems.length !== 0) {
          return (
            <SPSingleSelectDropdown
              items={moreItems}
              onSelect={() => { }}
              title="more"
            />
          );
        }
      },
    },
  ];

  const handleSeverityListView = index => {
    return severityOptions.map(data => {
      if (data.key == index) return data.label;
    });
  };
  function mapQueryWithApi(queryItem) {
    let myArrayQry = '';
    const parsedQuery = queryString.parse(queryItem);
    if (parsedQuery) {
      const queryObject = {
        payload: {},
        applicationCategorySearch: {},
        QueryString: '',
      };
      if (parsedQuery.tca_page_no) {
        queryObject.payload.page = parsedQuery.tca_page_no;
      }
      if (parsedQuery.sort) {
        queryObject.payload.sort = parsedQuery.sort;
      }
      if (parsedQuery.tca_subject) {
        queryObject.applicationCategorySearch.search = parsedQuery.tca_subject;
      }
      if (parsedQuery.tca_showing) {
        queryObject.payload['per-page'] = parsedQuery.tca_showing;
      }
      const applicationCategorySearch = queryObject?.applicationCategorySearch;
      if (Object.keys(applicationCategorySearch).length !== 0) {
        Object.entries(applicationCategorySearch).forEach(([key, val]) => {
          myArrayQry += 'VulnerabilityRegisterSearch[' + key + ']=' + val + '&';
        });
      }

      if (Object.keys(queryObject.payload).length !== 0) {
        Object.entries(queryObject.payload).forEach(([key, val]) => {
          myArrayQry += key + '=' + val + '&';
        });
      }
    }

    return myArrayQry;
  }

  const handleTableChange = (pagination, filters, sorter) => {
    let columnIndex = sorter.field;
    if (sorter.order === 'ascend') {
      console.log({ columnIndex });
    } else if (sorter.order === 'descend') {
      columnIndex = '-' + columnIndex;
    } else {
      columnIndex = undefined;
    }
    if (columnIndex !== undefined && columnIndex !== sort) {
      handleChange('sort', columnIndex);
    }
  };

  const onPageChange = pageNumber => {
    handleChange('tca_page_no', pageNumber);
    window.scrollTo(0, 0);
  };

  const handleChange = (name, value) => {
    if (value !== null || value !== undefined) {
      const obj = queryString.parse(query);
      if (value === 'all') {
        obj[name] = '';
      } else {
        obj[name] = value;
      }
      delete obj['active_tab'];
      const str = queryString.stringify(obj);
      if (name == 'tca_showing') {
        setShowing(value);
      }
      handleQuery(str);
    }
  };

  const handleQuery = qs => {
    if (activeOption !== 'all') {
      history.push(
        '/administration?active_tab=vulnerability_management&' +
        activeOption +
        '?' +
        qs
      );
    } else {
      history.push('/administration?active_tab=vulnerability_management&' + qs);
    }
    setQuery(qs);
  };

  const handleSubmit = async values => {
    if (!isCreate) {
      let payload = {
        values,
        id: record.vrg_id,
      };
      updateList(payload);
    } else await createList({ payload: values });
    setOpenDrawer(false);
    setIsCreate(false);
    setRecord({});
  };

  if (isHShowSeverityLevels) {
    return <SeverityNonTechnical access ={access} />
  }

  return (
    <>
      <Row>
        <PageHeader
          title="Non-Technical Vulnerabilities"
          options={[
            (access!==undefined && (access.includes("all-super-admin") || access.includes("index-vulnerability-severity"))) &&
            <SPButton
              title="Severity Levels"
              size="small"
              onButtonClick={() => setIsHShowSeverityLevels(true)}
            />,
            (access!==undefined && (access.includes("all-super-admin") || access.includes("create-vulnerability-register"))) &&
            <SPButton
              onButtonClick={() => {
                setIsCreate(true);
                setOpenDrawer(true);
              }}
              title="Create Vulnerability"
              size="small"
              image={<PlusIcon />}
            />
          ]}
        />
      </Row>
      <Row gutter={[19, 25]}>
        <Col
          span={12}
          style={{ display: "inherit" }}
        >
          <div>
            <SPSearch
              text={searchText}
              onChange={e => {
                setSearchText(e.target.value);
              }}
              placeholder="Search..."
              onEnter={() => {
                handleChange('tca_subject', searchText);
              }}
              size="420px"
            />
          </div>
          <div style={{ marginLeft: 20 }}>
            <SPSelect
              title="Showing"
              items={showingFilter}
              selected={tca_showing}
              onChange={e => {
                handleChange('tca_showing', e.key);
              }}
            />
          </div>
        </Col>
      </Row>
      <SPTable
        columns={columns}
        dataSource={vulnerabilityList?.listData?.items}
        onPageChange={onPageChange}
        canPaginate
        emptyText="No Data"
        totalRecords={totalCount}
        showingTill={showing}
        handleTableChange={handleTableChange}
        currentShowing={
          currentPage === 1 ? currentPage : (currentPage - 1) * showing + 1
        }
        currentPage={currentPage}
        isLoading={vulnerabilityList?.loading}
      />
      <SPDrawer
        title={`${isCreate ? 'Create' : 'Update'} Vulnerability`}
        isVisible={openDrawer}
        onClose={() => setOpenDrawer(false)}
      >
        <NonTechnicalFormDrawer
          recordValue={record}
          severityOptions={severityOptions}
          threatOptions={threatOptions}
          submit={handleSubmit}
          closeDrawer={() => setOpenDrawer(false)}
        />
      </SPDrawer>
    </>
  );
};

const mapStateToProps = state => ({
  vulnerabilityList: state.administration.vulnerabilityList,
  userProfile: state?.userStore?.userProfile?.data?.profile[0],
});

const mapDispatchToProps = dispatch => ({
  getSeverityList: payload =>
    dispatch(vulnerabilityNonTechnicalSeverityList(payload)),
  getThreatList: payload => dispatch(vulnerabilityThreatList(payload)),
  onGetList: payload => dispatch(vulnerabilityNonTechnicalList(payload)),
  updateList: payload => dispatch(updateNonTechnicalVulnerability(payload)),
  deleteList: payload => dispatch(deleteNonTechnicalVulnerability(payload)),
  createList: payload => dispatch(createNonTechnicalVulnerability(payload)),
});

export default compose(
  connect(mapStateToProps, mapDispatchToProps),
  SetDocumentTitleHOC,
  AuthTokenHOC
)(TechnicalVulnerability);
