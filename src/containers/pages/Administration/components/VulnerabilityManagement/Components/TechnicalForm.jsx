import React, { useEffect, useState } from 'react';
import * as Yup from 'yup';
import { Formik, Form } from 'formik';
import { Row, Col } from 'antd';
import SPButton from '../../../../../../components/SPButton';
import 'antd/dist/antd.css';
import { isArray, isEmpty } from 'lodash';
import InputBox from '../../../../../../components/InputBox';
import TextEditorBox from '../../../../../../components/TextEditorBox';
import SelectBox from '../../../../../../components/SelectBox';
import FieldEditor from '../../../../../../components/FieldEditor';

function TechnicalFormDrawer({
  recordValue,
  submit,
  closeDrawer,
  severityOptions,
}) {
  const [formInitialValues, setFormInitialValues] = useState({
    vc_vulnerability_name: '',
    vc_vulnerability_severity: '',
    vc_vulnerability_threat: '',
    vc_vulnerability_impact: '',
    vc_vulnerability_solution: '',
  });

  const validationSchema = Yup.object({
    vc_vulnerability_name: Yup.string().required('Required'),
    vc_vulnerability_severity: Yup.string().required('Required'),
    vc_vulnerability_threat: Yup.string().required('Required'),
    vc_vulnerability_impact: Yup.string().required('Required'),
  });

  useEffect(() => {
    let initialValues = {};
    if (!isEmpty(recordValue)) {
      initialValues['vc_vulnerability_name'] =
        recordValue.vc_vulnerability_name;
      initialValues['vc_vulnerability_severity'] =
        recordValue.vc_vulnerability_severity;
      initialValues['vc_vulnerability_threat'] =
        recordValue.vc_vulnerability_threat;
      initialValues['vc_vulnerability_impact'] =
        recordValue.vc_vulnerability_impact;
      initialValues['vc_vulnerability_solution'] =
        recordValue.vc_vulnerability_solution;
      setFormInitialValues(initialValues);
    }
  }, [recordValue]);

  return (
    <div>
      <Formik
        id="formik"
        validationSchema={validationSchema}
        initialValues={formInitialValues}
        enableReinitialize
        onSubmit={(values, { resetForm }) => {
          submit(values);
          resetForm();
        }}
      >
        {({
          values,
          errors,
          touched,
          handleChange,
          handleBlur,
          handleSubmit,
          isSubmitting,
          resetForm,
          setFieldValue,
        }) => (
          <Form>
            <InputBox
              id={'vc_vulnerability_name'}
              label={'Name'}
              name={'vc_vulnerability_name'}
              placeholder={'Name'}
              onInputChange={handleChange}
              onBlur={handleBlur}
              value={values.vc_vulnerability_name}
              errorMessage={errors.vc_vulnerability_name}
              touched={touched.vc_vulnerability_name}
              noBorderValidation
            />

            <SelectBox
              id="vc_vulnerability_severity"
              label="Attack Ended"
              name="vc_vulnerability_severity"
              placeholder="Attack Ended"
              onInputChange={setFieldValue}
              onBlur={handleBlur}
              errorMessage={errors.vc_vulnerability_severity}
              value={values.vc_vulnerability_severity}
              touched={touched.vc_vulnerability_severity}
              options={severityOptions}
            />
            <FieldEditor
              lable="Threat"
              name="vc_vulnerability_threat"
              errors={errors.vc_vulnerability_threat}
              touched={touched.vc_vulnerability_threat}
              onChange={html => {
                setFieldValue('vc_vulnerability_threat', html);
              }}
            />

            <FieldEditor
              lable="Impact"
              name="vc_vulnerability_impact"
              errors={errors.vc_vulnerability_impact}
              touched={touched.vc_vulnerability_impact}
              onChange={html => {
                setFieldValue('vc_vulnerability_impact', html);
              }}
            />

            <TextEditorBox
              value={values.vc_vulnerability_solution ?? ''}
              onChange={html => {
                setFieldValue('vc_vulnerability_solution', html);
              }}
              placeholder={''}
              label={'Solution'}
            />
            <Row gutter={11} justify="end" style={{ width: 640 }}>
              <Col>
                <SPButton
                  title="Cancel"
                  size="small"
                  type="secondary"
                  onButtonClick={() => {
                    resetForm();
                    closeDrawer();
                  }}
                />
              </Col>
              <Col>
                <SPButton
                  title="Save"
                  size="small"
                  type="submit"
                  onButtonClick={handleSubmit}
                  isLoading={false}
                />
              </Col>
            </Row>
          </Form>
        )}
      </Formik>
    </div>
  );
}

export default TechnicalFormDrawer;
