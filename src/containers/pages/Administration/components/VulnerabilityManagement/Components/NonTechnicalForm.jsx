import React, { useEffect, useState } from 'react';
import * as Yup from 'yup';
import { Formik, Form } from 'formik';
import { Row, Col } from 'antd';
import SPButton from '../../../../../../components/SPButton';
import 'antd/dist/antd.css';
import { isArray, isEmpty } from 'lodash';
import InputBox from '../../../../../../components/InputBox';
import TextEditorBox from '../../../../../../components/TextEditorBox';
import SelectBox from '../../../../../../components/SelectBox';
import TextAreaBox from '../../../../../../components/TextAreaBox';

function NonTechnicalFormDrawer({
  recordValue,
  submit,
  closeDrawer,
  severityOptions,
  threatOptions,
}) {
  const [formInitialValues, setFormInitialValues] = useState({
    vrg_name: '',
    vrg_desc: '',
    vrg_severity: [],
    thr_id: [],
  });

  let validationSchemaStandard = Yup.object({
    vrg_name: Yup.string().required('Required'),
    thr_id: Yup.array().required('Required'),
  });

  useEffect(() => {
    let initialValues = {};
    if (!isEmpty(recordValue)) {
      initialValues['vrg_name'] = recordValue.vrg_name;
      initialValues['vrg_desc'] = recordValue.vrg_desc;
      initialValues['vrg_severity'] = recordValue.vrg_severity
        ? `${recordValue.vrg_severity}`
        : '';
      initialValues['thr_id'] = recordValue.thr_id;
      setFormInitialValues(initialValues);
    }
  }, [recordValue]);

  return (
    <div>
      <Formik
        id="formik"
        validationSchema={validationSchemaStandard}
        initialValues={formInitialValues}
        enableReinitialize
        onSubmit={(values, { resetForm }) => {
          submit(values);
          resetForm();
        }}
      >
        {({
          values,
          errors,
          touched,
          handleChange,
          handleBlur,
          handleSubmit,
          isSubmitting,
          resetForm,
          setFieldValue,
        }) => (
          <Form>
            <InputBox
              id={'vrg_name'}
              label={'Name'}
              name={'vrg_name'}
              placeholder={'Name'}
              onInputChange={handleChange}
              onBlur={handleBlur}
              value={values.vrg_name}
              touched={touched.vrg_name}
              noBorderValidation
            />

            <TextAreaBox
              id="vrg_desc"
              name="vrg_desc"
              label={'Description'}
              onInputChange={handleChange}
              placeholder="Description"
              onBlur={handleBlur}
              errorMessage={errors.vrg_desc}
              value={values.vrg_desc}
              touched={touched.vrg_desc}
              disabled={isSubmitting}
              noBorderValidation
            />

            <SelectBox
              id="vrg_severity"
              label="Severity"
              name="vrg_severity"
              placeholder=""
              onInputChange={setFieldValue}
              onBlur={handleBlur}
              errorMessage={errors.vrg_severity}
              value={values.vrg_severity}
              touched={touched.vrg_severity}
              options={severityOptions}
            />

            <SelectBox
              id="thr_id"
              label="Associated Threats"
              mode="multiple"
              name="thr_id"
              placeholder=""
              onInputChange={setFieldValue}
              onBlur={handleBlur}
              errorMessage={errors.thr_id}
              value={values.thr_id}
              touched={touched.thr_id}
              options={threatOptions}
            />
            <Row gutter={11} justify="end" style={{ width: 640 }}>
              <Col>
                <SPButton
                  title="Cancel"
                  size="small"
                  type="secondary"
                  onButtonClick={() => {
                    resetForm();
                    closeDrawer();
                  }}
                />
              </Col>
              <Col>
                <SPButton
                  title="Save"
                  size="small"
                  type="submit"
                  onButtonClick={handleSubmit}
                  isLoading={false}
                />
              </Col>
            </Row>
          </Form>
        )}
      </Formik>
    </div>
  );
}

export default NonTechnicalFormDrawer;
